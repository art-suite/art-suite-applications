import &StandardImport, &ArtBrowserTools
&@ArtSuite/ArtFoundation extract humanByteSize

getEnv() extract drawCacheDebug

mapRemove = (map, key) ->
  out = map.get key
  map.delete key
  out

###
  PURPOSE
  - Keep the maximum byte-size of the cache under a cap.
  - recycle unused bitmaps since creating bitmaps is costly

  TODO

  Stop clearing cached sub-elements when drawing a new cached element.
   - the DrawCacheManager will reclaim their bitmaps in time

  Stop tracking caching stats in Element

  Call advanceFrameTime every global draw-frame
  Call doneWithCacheBitmap from _clearDrawCache(doNotUpdateDrawCacheManager) unless doNotUpdateDrawCacheManager is true
  call allocateCacheBitmap when a new cache bitmap is used
  call useCacheBitmap every time a the drawCache bitmap is used

class CacheBitmap extends BaseClass

  constructor: (@element, @bitmap, lastFrameUsed)->
    @_reset lastFrameUsed

  _reset: (lastFrameUsed) ->
    @useCount = 0
    @lastFrameUsed = lastFrameUsed || 0

  ## release
    OUT: bytesReleased
    NOTE:
      Safari on iOS may work better with this:
        _canvas.width = _canvas.height = 1

      testing...
  release: ->
    @elementDoneWithCacheBitmap()
    if @bitmap extract byteSize, _canvas
      _canvas.width = _canvas.height = 1
    @bitmap = null
    byteSize

  # returns @bitmap
  recycle: (newElement, lastFrameUsed) ->
    @elementDoneWithCacheBitmap()
    @element = newElement
    @_reset lastFrameUsed
    @bitmap.clear()
    @bitmap

  use: (currentFrameNumber) ->
    @lastFrameUsed = currentFrameNumber
    @useCount++

  elementDoneWithCacheBitmap: ->
    if @element && @element._drawCacheBitmap == @bitmap
      @element.__clearDrawCacheCallbackFromDrawCacheManager()

    @element = null

  @getter
    inspectedObjects: -> {} @size, @byteSize, @bitmap
    size:             -> @bitmap.size
    byteSize:         -> @bitmap.getByteSize()

class DrawCacheManager extends BaseClass
  @byteSizeFromSize: byteSizeFromSize = (size) -> size.x * size.y * 4
  @singletonClass()

  @getDrawCacheManager: -> DrawCacheManager.singleton

  @usableBitmap: usableBitmap = (bitmap, w, h) ->
    bitmap.size extract x, y
    w <= x && h <= y # big enough
    && x * y < w * h * 2   # but no more than twice the pixel-count

  constructor: ->
    super
    @_currentFrameNumber = 0
    @_maxCacheByteSize = 1024 * 1024 * if getIsMobileBrowser() then 64 else 128
    @_bitmapsCreated = 0

    @_initCache()

  _initCache: ->
    @_cacheByteSize = 0
    @_cacheBitmaps = new Map

    @_unusedCacheBitmaps = []
    @_unusedCacheByteSize = 0

  ##############################
    INSPECTION
  ##############################
  @getter
    :cacheByteSize
    :unusedCacheByteSize
    :maxCacheByteSize
    :bitmapsCreated
    byteSize: -> @_cacheByteSize + @_unusedCacheByteSize
    humanByteSize: -> humanByteSize @byteSize
    humanCacheSummary: -> "#{humanByteSize @_cacheByteSize} + #{humanByteSize @_unusedCacheByteSize} = #{@humanByteSize}"
    cacheByteSizeOk: -> @byteSize <= @_maxCacheByteSize
    inspectedObjects: ->
      cacheBitmaps = []
      @_cacheBitmaps.forEach (cacheBitmap) -> cacheBitmaps.push cacheBitmap.inspectedObjects
      {cacheBitmaps}

    currentFrameNumber: -> @_currentFrameNumber
    recycleableSortedCacheBitmaps: ->
      recyclable = []
      currentFrameNumber = @_currentFrameNumber
      @_cacheBitmaps.forEach (v, k) ->
        recyclable.push v if v.lastFrameUsed < currentFrameNumber - 1

      recyclable.sort (a, b) -> a.lastFrameUsed - b.lastFrameUsed

  @getCacheInfo: -> DrawCacheManager.singleton.getCacheInfo()
  getCacheInfo: ->
    {}
      cacheBitmaps:       @_cacheBitmaps.size
      unusedCacheBitmaps: @_unusedCacheBitmaps.length
      @cacheByteSize
      @unusedCacheByteSize
      @maxCacheByteSize
      @bitmapsCreated

  ##########################
    MAIN API
  ##########################
  ## allocateCacheBitmap
    called every time a new element drawCache is created
    OUT: a clear Art.Canvas.Bitmap (filled with pixel with color: #0000)
  allocateCacheBitmap: (element, size) ->
    @doneWithCacheBitmap element

    @_recycleUnusedCacheBitmap  element, size
    ? @_createCacheBitmap       element, size

  ## useDrawCache
    called by element every time the draw-cache is used
  useDrawCache: (element) ->
    @_cacheBitmaps.get element
    ?.use @_currentFrameNumber

  ## doneWithCacheBitmap
    called by Element#_clearDrawCache
    EFFECT:
      if element has a cacheBitmap,
        move it to @_unusedCacheBitmaps
  doneWithCacheBitmap: (element) ->
    # @_validateCacheByteSize "doneWithCacheBitmap start"
    if cachedBitmap = mapRemove @_cacheBitmaps, element
      cachedBitmap.elementDoneWithCacheBitmap()
      byteSize = cachedBitmap.getByteSize()
      # console.error "doneWithCacheBitmap recycling for #{cachedBitmap.element?.inspectedName} bitmap = #{cachedBitmap.bitmap.size}"
      @_unusedCacheByteSize += byteSize
      @_cacheByteSize -= byteSize
      @_unusedCacheBitmaps.push cachedBitmap
      # @_validateCacheByteSize "doneWithCacheBitmap done"

  ## advanceFrame
    called call once per global draw cycle
  advanceFrame: ->
    @_currentFrameNumber++

  ##############################
    VALIDATION
  ##############################
  # manually callable
  @validateCacheByteSize: (context) -> DrawCacheManager.singleton.validateCacheByteSize context
  validateCacheByteSize: (context) ->
    # log "_validateCacheByteSize #{context} _cacheByteSize: #{@_cacheByteSize}"
    # disabled for now; seems OK August 19, 2017
    cacheBitmaps = []
    unusedCacheByteSize = 0
    cacheByteSize = 0
    @_cacheBitmaps.forEach (bitmap, element) ->
      cacheByteSize += bitmap.byteSize
      cacheBitmaps.push {bitmap, element:element.inspectedName}

    each b in @_unusedCacheBitmaps
      unusedCacheByteSize += b.byteSize

    unless true &&
        @_cacheByteSize + @_unusedCacheByteSize <= @_maxCacheByteSize &&
        @_cacheByteSize == cacheByteSize &&
        @_unusedCacheByteSize == unusedCacheByteSize

      log.error validateCacheByteSize:
        context:            context
        tracked:            {@cacheByteSize, @unusedCacheByteSize}
        actual:             {cacheByteSize, unusedCacheByteSize}
        cacheBitmaps:      cacheBitmaps.length
        unusedCacheBitmaps: @_unusedCacheBitmaps.length

      throw new Error "bad _cacheByteSize"

    {}
      message: :ok
      eq: @_cacheByteSize == cacheByteSize
      cacheByteSize, @_cacheByteSize, unusedCacheByteSize, @_unusedCacheByteSize

  ##############################
    FLUSH CACHE
  ##############################
  ## flushCache
    EFFECT: all cached bitmaps are released
    OUT: {bytesReleased, bitmapsReleased}
  @flushCache: -> DrawCacheManager.singleton.flushCache()
  flushCache: ->
    log DrawCacheManager:
      flushCache: "start"
      info: @getCacheInfo()
    # @_validateCacheByteSize "flushCache start"

    bitmapsReleased = @_unusedCacheBitmaps.length
    bytesReleased = @releaseUnusedBitmaps()

    @_cacheBitmaps.forEach (cachedBitmap, element) ->
      bitmapsReleased++
      log :flushCache_release
      bytesReleased += cachedBitmap.release()

    bytesReleased += @_cacheByteSize

    @_initCache()

    # @_validateCacheByteSize "flushCache done"

    log DrawCacheManager:
      flushCache: :done
      info: @getCacheInfo()
      results: {} bytesReleased, bitmapsReleased

    {} bytesReleased, bitmapsReleased

  releaseUnusedBitmaps: ->
    bytesReleased = 0
    each cv in @_unusedCacheBitmaps
      bytesReleased += cv.release()
    @_unusedCacheByteSize = 0
    @_unusedCacheBitmaps = []
    bytesReleased

  ##########################
  # PRIVATE
  ##########################

  # OUT: a clear bitmap (filled with pixel with color: #0000)
  _recycleUnusedCacheBitmap: (element, size) ->
    if unusedCacheBitmap = @_getUnusedCacheBitmap size
      logFrameEvent :recycleUnusedCacheBitmap :recycleUnusedCacheBitmap
      unusedCacheBitmap.recycle element, @_currentFrameNumber
      @_addCacheBitmap element, unusedCacheBitmap

  # OUT: cacheBitmap.bitmap (Art.Canvas.Bitmap)
  _addCacheBitmap: (element, cacheBitmap) ->
    # @_validateCacheByteSize "_addCacheBitmap start"
    @_cacheBitmaps.set element, cacheBitmap
    @_cacheByteSize += cacheBitmap.getByteSize()
    cacheBitmap.bitmap
    # @_validateCacheByteSize "_addCacheBitmap done"

  # OUT: Art.Canvas.Bitmap
  _createCacheBitmap: (element, size) ->
    # @_validateCacheByteSize "_createCacheBitmap start"
    size = size.max point1

    @_bitmapsCreated++
    logFrameEvent :createCacheBitmap :createCacheBitmap

    bitmap = @_addCacheBitmap element, new CacheBitmap element,
      element.getBitmapFactory().newBitmap size
      @_currentFrameNumber

    if drawCacheDebug then log "+#{humanByteSize byteSizeFromSize size} - new #{size} (#{@humanCacheSummary})"
    @_ensureSafeMemorySize()

    bitmap


  # used for internal validation, uncomment body to help debug
  _validateCacheByteSize: (context) ->
    @validateCacheByteSize context

  canUseBitmap: canUseBitmap = (cachedBitmap, requestedSize) ->
    if cachedBitmap extract? size
      if size.area < requestedSize.area * 2     # not too big
        requestedSize extract w, h
        size extract x, y
        x >= w && y >= h                        # big enough


  ## _getUnusedCacheBitmap
    OUT:
      a recycledCachedbitmap with the right size (removing it from @_unusedCacheBitmaps)
      OR null if there is no matching recycledCacheBitmap
  _getUnusedCacheBitmap: (size) ->
    each cachedBitmap, i in-array @_unusedCacheBitmaps when canUseBitmap cachedBitmap, size
      @_unusedCacheBitmaps = remove @_unusedCacheBitmaps, i
      @_unusedCacheByteSize -= cachedBitmap.byteSize
      return cachedBitmap

    null # none found

  # remove oldest bitmaps from the cache until we have enough from for a new bitmap of the specified size
  # return null
  _evictCacheBitmaps: ->
    @_evictUnusedBitmaps()

    unless @cacheByteSizeOk
      each cachedBitmap in-array @recycleableSortedCacheBitmaps
        if cachedBitmap = mapRemove @_cacheBitmaps, cachedBitmap.element
          @_cacheByteSize -= byteSize = cachedBitmap.getByteSize()
          cachedBitmap.release()
          if drawCacheDebug then log "-#{humanByteSize byteSize} - releasing not-recently-used (#{@humanCacheSummary})"
          break if @cacheByteSizeOk

      unless @cacheByteSizeOk
        log.warn "evictCacheBitmaps was unable to release enough memory: #{humanByteSize @byteSize} > #{humanByteSize @_maxCacheByteSize}"

    null

  _evictUnusedBitmaps: ->
    @_unusedCacheBitmaps.sort (a, b) ->
      a.byteSize - b.byteSize

    until @cacheByteSizeOk || @_unusedCacheBitmaps.length == 0
      cachedBitmap = @_unusedCacheBitmaps.pop()
      cachedBitmap extract byteSize, size
      cachedBitmap.release()
      @_unusedCacheByteSize -= byteSize
      if drawCacheDebug then log "-#{humanByteSize byteSize} - releasing unused #{size} (#{@humanCacheSummary})"

    null

  _ensureSafeMemorySize: ->
    if !@cacheByteSizeOk
      @_evictUnusedBitmaps()

      unless @cacheByteSizeOk
        timeout 0, => @_evictCacheBitmaps()

    null