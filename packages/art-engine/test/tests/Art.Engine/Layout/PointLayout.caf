import &StandardImport
# Foundation = require '@art-suite/art-foundation'
# Atomic = require 'art-atomic'
# Engine = require 'art-engine'

# {point, matrix, Point} = Atomic
# {Layout} = Engine
# {point0} = Point
# {log, inspect, min, max, deepMap, isFunction, formattedInspect} = Foundation
{PointLayout} = Layout

ps = point 100, 200
cs = point 30, 40

testLayout = (shouldBeX, shouldBeY, params, previousLayout) ->
  shouldBe = point shouldBeX, shouldBeY
  # preprocessedParams = deepMap params, (v) -> if isFunction v then v.toString() else v
  test (formattedInspect params), ->
    pointLayout = new PointLayout params, previousLayout && new PointLayout previousLayout
    assert.eq
      shouldBe
      pointLayout.layout(ps, cs)
      """
        testLayout:
          layout:         #{formattedInspect pointLayout.initializer}
          ps:             #{formattedInspect ps}
          cs:             #{formattedInspect cs}
          outputWas:      #{formattedInspect pointLayout.layout(ps, cs)}
          outputShouldBe: #{formattedInspect shouldBe}
    assert.eq shouldBe.x, pointLayout.layoutX(ps, cs), "testing X of PointLayout #{formattedInspect pointLayout.initializer}"
    assert.eq shouldBe.y, pointLayout.layoutY(ps, cs), "testing X of PointLayout #{formattedInspect pointLayout.initializer}"

ps2 = point 10, 20

suite:
  constructorTests: ->
    test "new PointLayout",             -> assert.equal new PointLayout().toString(),             'pointLayout(0)'
    test "new PointLayout ps:1",        -> assert.equal new PointLayout(ps:1).toString(),         'pointLayout(ps: 1)'
    test "new PointLayout point0",      -> assert.equal new PointLayout(point0).toString(),       'pointLayout(0)'
    test "new PointLayout point(1,2)",  -> assert.equal new PointLayout(point 1, 2).toString(),   'pointLayout(point(1, 2))'
    test "new PointLayout x: -> 1",     ->
      f = -> 1
      assert.match new PointLayout(x: f).toString(), /pointLayout\(x\: (f|function)\(\)\)/

  layout.basic: ->
    testLayout   0,   0,    null
    testLayout   0,   0,    {}
    testLayout 123, 123,    123
    testLayout 123, 456,    point(123, 456)

  layout.strings: ->
    testLayout   0,   0,    'topLeft'
    testLayout  50, 100,    'centerCenter'
    testLayout 100, 200,    'bottomRight'

  layout.functions: ->
    testLayout 123, 123,    -> 123
    testLayout 100, 200,    (ps) -> ps
    testLayout 130, 240,    (ps, cs) -> ps.add cs

    testLayout 100,   0,    x: (ps) -> ps.x
    testLayout   0, 200,    y: (ps) -> ps.y

    testLayout
      100
      200
      x: (ps) -> ps.x
      y: (ps) -> ps.y

    testLayout 123, 200,    x: 123, y: (ps) -> ps.y

  layout.illegal: ->
    test "x: point0 - illegal" ->
      assert.throws -> new PointLayout x: point0

    test "{invalid: 1} throws error" ->
      assert.throws -> pl = new PointLayout invalid: 1

  layout.options: ->
    testLayout   1,   1,    plus: 1
    testLayout 100, 200,    ps: 1
    testLayout  30,  40,    cs: 1
    testLayout   1,   0,    x: 1
    testLayout   0,   1,    y: 1
    testLayout 100,   0,    xw: 1
    testLayout   0, 200,    yh: 1

    testLayout 200,   0,    xh: 1
    testLayout   0, 100,    yw: 1

    testLayout  50,   0,    xw: .5
    testLayout   0, 100,    yh: .5

    testLayout  30,   0,    xcw: 1
    testLayout   0,  40,    ych: 1
    testLayout
      2 * (ps.x + cs.x + 1)
      2 * (ps.y + cs.y + 1)
      x:1, y:1, xpw:1, yph:1, xcw:1, ych:1, ps:1, cs:1, plus:1

    testLayout  ps.x * 1.0, ps.y * 0.5,  ps:  "centerRight"
    testLayout  cs.x * 1.0, cs.y * 0.5,  cs:  "centerRight"
    testLayout         1.0,        0.5,  pts: "centerRight"

    testLayout  ps.x * 0.6, ps.y * 0.7,  ps:  point .6, .7
    testLayout  cs.x * 0.6, cs.y * 0.7,  cs:  point .6, .7
    testLayout         0.6,        0.7,  pts: point .6, .7

  max: ->
    testLayout  10, 100,    w: 10,  h:100,  max: w: 50
    testLayout  50,  10,    w: 100, h:10,   max: w: 50

    test "max does effect relativity" ->
      pl = new PointLayout w: 100, h: 10, max: ww: 1
      assert.eq true,   pl.getXParentRelative()
      assert.eq false,  pl.getYParentRelative()

  dependencies:
    basic: ->
      test "new PointLayout - not relative" ->
        pl = new PointLayout
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, false

      test "new PointLayout -> 1 - not relative" ->
        pl = new PointLayout -> 1
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, false

      test "new PointLayout (ps, cs) -> 1 - not relative" ->
        pl = new PointLayout (ps, cs) -> 1
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, false

      test "new PointLayout (ps, cs) -> ps - only parent relative" ->
        pl = new PointLayout (ps, cs) -> ps
        assert.eq pl.childrenRelative, false

      test "new PointLayout (ps, cs) -> cs - only children relative" ->
        pl = new PointLayout (ps, cs) -> cs
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, true

      test "new PointLayout (ps, cs) -> ps.add cs - both relative" ->
        pl = new PointLayout (ps, cs) -> ps.add cs
        assert.eq pl.parentRelative, true
        assert.eq pl.childrenRelative, true

      test "new PointLayout x: (ps) -> ps.x - parent width relative" ->
        pl = new PointLayout x: (ps) -> ps.x
        assert.eq pl.parentRelative,      true,  "parentRelative"
        assert.eq pl.childrenRelative,    false, "childrenRelative"
        assert.eq pl.xRelativeToParentW,  true,  "xRelativeToParentW"
        assert.eq pl.xRelativeToParentH,  false, "xRelativeToParentH" # this one
        assert.eq pl.yRelativeToParentW,  false, "yRelativeToParentW"
        assert.eq pl.yRelativeToParentH,  false, "yRelativeToParentH"

      test "regression foo" ->
        pl1 = new PointLayout w:220, hch:1
        pl2 = new PointLayout wcw:1, hh:1
        assert.eq pl1.childrenRelative, true
        assert.eq pl2.parentRelative, true

      test "regressionA with min" ->
        pl = new PointLayout
          hch: 1
          w: (ps, cs) -> min ps.w, cs.w
        assert.eq pl.parentRelative,        true,   "parentRelative"
        assert.eq pl.childrenRelative,      true,   "childrenRelative"
        assert.eq pl.xRelativeToParentW,    true,   "xRelativeToParentW"
        assert.eq pl.xRelativeToParentH,    false,  "xRelativeToParentH"
        assert.eq pl.yRelativeToParentW,    false,  "yRelativeToParentW"
        assert.eq pl.yRelativeToParentH,    false,  "yRelativeToParentH"

        assert.eq pl.xRelativeToChildrenW,  true,   "xRelativeToChildrenW"
        assert.eq pl.xRelativeToChildrenH,  false,  "xRelativeToChildrenH"
        assert.eq pl.yRelativeToChildrenW,  false,  "yRelativeToChildrenW"
        assert.eq pl.yRelativeToChildrenH,  true,   "yRelativeToChildrenH"

      test "regressionB with max" ->
        pl = new PointLayout
          hch: 1
          w: (ps, cs) -> max ps.w, cs.w
        assert.eq pl.parentRelative, true
        assert.eq pl.childrenRelative, true
        assert.eq pl.xRelativeToParentW, true
        assert.eq pl.xRelativeToParentH, false
        assert.eq pl.yRelativeToParentW, false
        assert.eq pl.yRelativeToParentH, false

        assert.eq pl.xRelativeToChildrenW, true
        assert.eq pl.xRelativeToChildrenH, false
        assert.eq pl.yRelativeToChildrenW, false
        assert.eq pl.yRelativeToChildrenH, true

      test "regression with inf parent size" ->
        pl = new PointLayout ww:1, hch:1
        ps2 = point 100, 1.0000000000000002e+100
        cs2 = point 100, 30
        assert.eq 100, pl.layoutX ps2, cs2
        assert.eq 30, pl.layoutY ps2, cs2

      test "new PointLayout x:1, y:2 - not relative" ->
        pl = new PointLayout x:1, y:2
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, false

      test "new PointLayout ps:1 - parent relative" ->
        pl = new PointLayout ps:1
        assert.eq pl.parentRelative, true
        assert.eq pl.childrenRelative, false

      test "new PointLayout cs:1 - parent relative" ->
        pl = new PointLayout cs:1
        assert.eq pl.parentRelative, false
        assert.eq pl.childrenRelative, true

      test "interpolate 0" ->
        pl1 = new PointLayout 100
        pl2 = new PointLayout 200
        ipl = pl1.interpolate pl2, 0
        assert.equal ipl, pl1

      test "interpolate 1" ->
        pl1 = new PointLayout 100
        pl2 = new PointLayout 200
        ipl = pl1.interpolate pl2, 1
        assert.equal ipl, pl2

      test "interpolate .5" ->
        pl1 = new PointLayout 100
        pl2 = new PointLayout 200
        ipl = pl1.interpolate pl2, .5
        assert.eq ipl.layoutX(), 150
        assert.eq ipl.layoutY(), 150

      test "detecting child relativity when using 'min' function" ->
        pl1 = new PointLayout h: (ps, cs) -> min cs.y, ps.y
        pl2 = new PointLayout h: (ps, cs) -> min cs.y, max ps.y, 100
        assert.eq true, pl1.getChildrenRelative()
        assert.eq true, pl2.getChildrenRelative()

    max: ->
      test "cs: 1, max: ww: 1 - both relative" ->
        pl = new PointLayout
          hch: 1
          wcw: 1
          max: ww: 1
        assert.eq pl.parentRelative, true
        assert.eq pl.childrenRelative, true

      test "same layout as a function" ->
        pl = new PointLayout
          hch: 1
          w: (ps, cs) -> min cs.x, ps.x
        assert.eq pl.parentRelative, true
        assert.eq pl.childrenRelative, true

  failed-detection-warnings: ->
    test "should warn x-funtion not detected to be parent relative" ->
      new PointLayout x: (ps) -> 0

    test "should warn y-funtion not detected to be parent relative" ->
      new PointLayout y: (ps) -> 0

    test "should warn x-funtion not detected to be children relative" ->
      new PointLayout x: (ps, cs) -> 0

    test "should warn y-funtion not detected to be children relative" ->
      new PointLayout y: (ps, cs) -> 0

  defaults: ->
    test "relativity should pass through for defaults" ->
      pl = new PointLayout {}, def = new PointLayout hh: 1, wcw: 1
      each key in []
          "xRelativeToParentW"
          "xRelativeToParentH"
          "xRelativeToChildrenW"
          "xRelativeToChildrenH"
          "yRelativeToParentW"
          "yRelativeToParentH"
          "yRelativeToChildrenW"
          "yRelativeToChildrenH"
        assert.eq def[key], pl[key], key

    test "regression" ->
      l = new PointLayout w:30, h: (ps) -> max 60, ps.y
      log l.layout point(100)

  previousLayoutTestLayout: ->
    testLayout 5, 7, {x: 5}, {x: 3, y: 7}
    testLayout 50, 200, {wpw: .5}, ps: 1