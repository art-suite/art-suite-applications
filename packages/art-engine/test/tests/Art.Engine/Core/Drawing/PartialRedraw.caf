import &StandardImport
HtmlCanvas = &@ArtSuite/ArtFoundation.Browser.DomElementFactories.Canvas

{compareDownsampledRedChannel} = &CoreHelper
A = 10
B = 11
C = 12
D = 13
E = 14
F = 15

defaultElementColor = #8ff
defaultCanvasColor = #480

testPartialBeforeAfter = (name, options, moreTests...) ->
  test name, ->
    {canvasElement,
    children,
    canvasSize = 4,
    color = defaultElementColor,
    canvasColor = defaultCanvasColor,
    init,
    before,
    after,
    change,
    testArea} = options

    doAfterTest = (canvasElement, change, after, moreAfterTests...) ->

      canvasElement.canvasBitmap.clear :black
      log apply: {change}
      object change into testElement
      log testElement: {} testElement?.redrawRequired, testElement.changingProps

      canvasElement.onNextReady()
      .then ->

        compareDownsampledRedChannel "#{name}: after #{formattedInspect change}", canvasElement, after, {} testArea
        if moreTests?.length > 0
          [{change, after}, rest...] = moreAfterTests
          doAfterTest
            canvasElement
            change
            after
            rest...
        canvasElement

    canvasElement ||=
      CanvasElement
        key: "partialRedrawCanvas"
        pixelsPerPoint: 1
        size: canvasSize
        canvas: HtmlCanvas
          width:  canvasSize
          height: canvasSize
        draw: canvasColor
        children ? RectangleElement
          key: :testElement
          color: color
          init


    testElement = null
    canvasElement.onNextReady()
    .then ->
      [testElement] = canvasElement.find :testElement
      before && compareDownsampledRedChannel "#{name}: before", canvasElement, before, {} testArea
      doAfterTest canvasElement, change, after, moreTests...

suite:
  basic: ->
    {test} = global

    testPartialBeforeAfter
      "change location"
      init:
        size: 1
        location: 2
      before:
        4 4 4 4
        4 4 4 4
        4 4 8 4
        4 4 4 4
      change: location: 1
      after:
        0 0 0 0
        0 8 0 0
        0 0 4 0
        0 0 0 0


    testPartialBeforeAfter
      "change size"
      init:
        size: 2
        location: 1
      before:
        4 4 4 4
        4 8 8 4
        4 8 8 4
        4 4 4 4
      change: size: 1
      after:
        0 0 0 0
        0 8 4 0
        0 4 4 0
        0 0 0 0

    testPartialBeforeAfter
      "change size while transparent"
      init:
        opacity: .75
        size: 2
        location: 1
      before:
        4 4 4 4
        4 7 7 4
        4 7 7 4
        4 4 4 4
      change: size: 1
      after:
        0 0 0 0
        0 7 4 0
        0 4 4 0
        0 0 0 0

    testPartialBeforeAfter
      "change axis"
      init:
        size: 2
        location: 2

      before:
        4 4 4 4
        4 4 4 4
        4 4 8 8
        4 4 8 8

      change: axis: :bottomLeft
      after:
        0 0 8 8
        0 0 8 8
        0 0 4 4
        0 0 4 4

    testPartialBeforeAfter
      "change angle size 4 - fails without roundOut"
      canvasColor: #000
      color: #f00
      init:
        size: ps: .5
        location: ps: .5
        axis: :centerCenter

      before:
        0 0  0  0
        0 15 15 0
        0 15 15 0
        0 0  0  0
      change: angle: Math.PI/4
      after:
        gte:
          0 1  1  0
          1 11 11 1
          1 11 11 1
          0 1  1  0
        lte:
          0 2  2  0
          2 12 12 2
          2 13 13 2
          0 2  2  0

    test "change angle size 5", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: canvasSize = 5
        canvas: HtmlCanvas()
        []
          RectangleElement color: #200
          e = Element
            size: 3
            location: ps: .5
            axis: :centerCenter
            RectangleElement color: #f00

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then ->
        assert.compactRedChannelEq "change angle - initialDraw", canvasElement, compactFlatten []
          0 0 0 0 0
          0 1 1 1 0
          0 1 1 1 0
          0 1 1 1 0
          0 0 0 0 0
      .then ->

        canvasElement.canvasBitmap.clear :black
        e.angle = Math.PI/4
        canvasElement.onNextReady()
      .then ->
        assert.compactRedChannelEq
          "change angle - partialDraw"
          canvasElement
          compactFlatten []
            0 0 1 0 0
            0 2 3 2 0
            1 3 3 3 1
            0 2 3 2 0
            0 0 1 0 0
          compactFlatten []
            0 1 3 1 0
            2 5 6 5 2
            4 6 6 6 4
            2 5 6 5 2
            0 1 3 1 0

    test "change opacity", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 2
        size: w: 4, h: 2
        canvas: HtmlCanvas()
        []
          RectangleElement color: #480
          e = Element
            {}
            Element
              axis:         :centerCenter
              location: ps: :centerCenter
              size: hh: 1, w: 2
              RectangleElement color: #8ff

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then -> compareDownsampledRedChannel "change axis - initialDraw",   canvasElement, []
        4 4 8 8 8 8 4 4
        4 4 8 8 8 8 4 4
        4 4 8 8 8 8 4 4
        4 4 8 8 8 8 4 4

      .then ->
        canvasElement.canvasBitmap.clear :black
        e.opacity = .5
        canvasElement.onNextReady()
      .then -> compareDownsampledRedChannel  "change axis - partialDraw",  canvasElement, []
        0 0 6 6 6 6 0 0
        0 0 6 6 6 6 0 0
        0 0 6 6 6 6 0 0
        0 0 6 6 6 6 0 0

    test "clipping limits dirty redraw", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: 4
        canvas: HtmlCanvas
          width: 4
          height: 4
        []
          RectangleElement color: #480
          Element
            location: x: 1
            size: 1
            clip: true
            e = RectangleElement size: 2, color: #8ff

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "partialRedraw clipping", canvasElement, []
          4 8 4 4
          4 4 4 4
          4 4 4 4
          4 4 4 4

        canvasElement.canvasBitmap.clear :black
        e.location = x: -1
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "partialRedraw clipping", canvasElement, []
          0 8 0 0
          0 0 0 0
          0 0 0 0
          0 0 0 0

    test "TextElement alignment redraws both before and after areas", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: w: 6, h: 2
        canvas: HtmlCanvas
          width: 6
          height: 2
        []
          RectangleElement color: #480
          e = TextElement
            padding: 1
            size: ps: 1
            fontSize: 1
            text: "."
            align: "left"
            color: #8ff

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "partialRedraw_initialDraw",         canvasElement, []
          4 4 4 4 4 4
          4 4 4 4 4 4

        canvasElement.canvasBitmap.clear :black
        e.align = "center"
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "partialRedraw_redrawLeftAndCenter", canvasElement, []
          4 4 4 4 0 0
          4 4 4 4 0 0

        canvasElement.canvasBitmap.clear :black
        e.align = "bottomCenter"
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "partialRedraw_redrawCenter",        canvasElement, []
          0 4 4 4 0 0
          0 4 4 4 0 0


    test "change color with negative padding", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: 6
        canvas: HtmlCanvas
          width:  canvasSize = 4
          height: canvasSize
        []
          RectangleElement color: #480
          parent = Element
            size: 2
            location: 2
            child = RectangleElement
              padding: -1
              radius: 1
              color: #8ff

      canvasElement.onNextReady()
      .then ->
        assert.eq parent.elementSpaceDrawArea, rect -1, -1, 4, 4
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel
          "change color with negative padding - initialDraw"
          canvasElement
          compactFlatten []
            4 4 4 4 4 4
            4 6 8 8 6 4
            4 8 8 8 8 4
            4 8 8 8 8 4
            4 6 8 8 6 4
            4 4 4 4 4 4

          compactFlatten []
            4 4 4 4 4 4
            4 7 8 8 7 4
            4 8 8 8 8 4
            4 8 8 8 8 4
            4 7 8 8 7 4
            4 4 4 4 4 4

        canvasElement.canvasBitmap.clear :black
        child.color = #6ff
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change color with negative padding - partialDraw", canvasElement, compactFlatten []
          0 0 0 0 0 0
          0 5 6 6 5 0
          0 6 6 6 6 0
          0 6 6 6 6 0
          0 5 6 6 5 0
          0 0 0 0 0 0


    test "negative padding change", ->
      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: 6
        canvas: HtmlCanvas
          width:  canvasSize = 4
          height: canvasSize
        []
          RectangleElement color: #480
          parent = Element
            key: "parent"
            size: 2
            location: 2
            child = RectangleElement
              key: "child"
              color: #8ff

      canvasElement.onNextReady()
      .then ->
        assert.eq parent.elementSpaceDrawArea, rect 0, 0, 2, 2
        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change color with negative padding - initialDraw", canvasElement, compactFlatten []
          4 4 4 4 4 4
          4 4 4 4 4 4
          4 4 8 8 4 4
          4 4 8 8 4 4
          4 4 4 4 4 4
          4 4 4 4 4 4

        canvasElement.canvasBitmap.clear :black
        child.padding = -1
        canvasElement.onNextReady()
      .then ->
        assert.eq parent.elementSpaceDrawArea, rect -1, -1, 4, 4
        compareDownsampledRedChannel "change color with negative padding - partialDraw", canvasElement, compactFlatten []
          0 0 0 0 0 0
          0 8 8 8 8 0
          0 8 8 8 8 0
          0 8 8 8 8 0
          0 8 8 8 8 0
          0 0 0 0 0 0


    test "change drawOrder", ->
      cursorArea = ({w, h}, {pos}) ->
        rect pos * w - h / 2, 0, h, h

      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: canvasSize = 4
        canvas: HtmlCanvas()
        []
          RectangleElement color: #27f
          e = Element
            location: 1
            size: 2
            drawOrder:
              #8f0
              shape:
                pos: 1
                area: cursorArea
                path: Paths.rectanglePath
              #40f

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change axis - initialDraw", canvasElement, compactFlatten []
          2 2 2 2
          2 8 4 4
          2 8 4 4
          2 2 2 2

        canvasElement.canvasBitmap.clear :black
        e.drawOrder =
          #8f0
          shape:
            pos: .5
            area: cursorArea
            path: Paths.rectanglePath
          #40f

        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change axis - partialDraw", canvasElement, compactFlatten []
          0 0 0 0
          0 4 4 2
          0 4 4 2
          0 0 0 0


    test "drawOrder with padding", ->
      cursorArea = ({w, h}, {pos}) ->
        rect pos * w - h / 2, 0, h, h

      canvasElement = CanvasElement
        pixelsPerPoint: 1
        size: w: 10, h: 4
        canvas: HtmlCanvas()
        []
          RectangleElement color: #27f
          e = Element
            size: 4
            padding: h: 1
            drawOrder:
              #8f0
            RectangleElement color: #400

      canvasElement.onNextReady()
      .then -> canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change axis - initialDraw", canvasElement, compactFlatten []
          8 4 4 8 2 2 2 2 2 2
          8 4 4 8 2 2 2 2 2 2
          8 4 4 8 2 2 2 2 2 2
          8 4 4 8 2 2 2 2 2 2

        canvasElement.canvasBitmap.clear :black
        e.location = x: 6

        canvasElement.onNextReady()
      .then ->
        compareDownsampledRedChannel "change axis - partialDraw", canvasElement, compactFlatten []
          2 2 2 2 0 0 8 4 4 8
          2 2 2 2 0 0 8 4 4 8
          2 2 2 2 0 0 8 4 4 8
          2 2 2 2 0 0 8 4 4 8

  aa: ->
    {test} = global

    testPartialBeforeAfter
      "change location"
      init:
        size: 1
        location: 2.4
      before:
        4 4 4 4
        4 4 4 4
        4 4 8 4
        4 4 4 4
      change: location: 1
      after:
        0 0 0 0
        0 8 0 0
        0 0 4 4
        0 0 4 4

    testPartialBeforeAfter
      "change size thresholds 2/1.999"
      init:
        size: 1.999
        location: 1.5
        axis: .5

      before:
        4 4 4 4
        4 8 4 4
        4 4 4 4
        4 4 4 4

      change: size: 2
      after:
        4 4 4 0
        4 8 8 0
        4 8 8 0
        0 0 0 0

      {}
        change: size: 1.999
        after:
          4 4 4 0
          4 8 4 0
          4 4 4 0
          0 0 0 0

    testPartialBeforeAfter
      "change size thresholds 2/2.001"
      init:
        size: 2
        location: 1.5
        axis: .5

      before:
        4 4 4 4
        4 8 8 4
        4 8 8 4
        4 4 4 4

      change: size: 2.001
      after:
        8 8 8 0
        8 8 8 0
        8 8 8 0
        0 0 0 0

      {}
        change: size: 2
        after:
          4 4 4 0
          4 8 8 0
          4 8 8 0
          0 0 0 0


    testPartialBeforeAfter
      "change scale thresholds 2/1.999"
      init:
        size: 1
        scale: 1.999
        location: 1.5
        axis: .5

      before:
        4 4 4 4
        4 8 4 4
        4 4 4 4
        4 4 4 4
      change: scale: 2
      after:
        4 4 4 0
        4 8 8 0
        4 8 8 0
        0 0 0 0
      {}
        change: scale: 1.999
        after:
          4 4 4 0
          4 8 4 0
          4 4 4 0
          0 0 0 0

    testPartialBeforeAfter
      "change scale thresholds 2/2.001"

      init:
        size: 1
        scale: 2
        location: 1.5
        axis: .5

      before:
        4 4 4 4
        4 8 8 4
        4 8 8 4
        4 4 4 4
      change: scale: 2.001
      after:
        8 8 8 0
        8 8 8 0
        8 8 8 0
        0 0 0 0
      {}
        change: scale: 2
        after:
          4 4 4 0
          4 8 8 0
          4 8 8 0
          0 0 0 0

  regressions: ->
    testPartialBeforeAfter
      "with stage and clip true"

      canvasSize: 5 1

      children:
        Element
          key: :testElement
          size: 5 1
          stage: true
          clip: true

          Element
            size: 1000
            draw: defaultElementColor

      before: 8 8 8 8 8
      change: size: 4 1
      after:  8 8 8 8 4

    testPartialBeforeAfter
      "visible true > false"

      canvasSize: 2 1

      children:
        Element
          Element
            key: "testElement"
            draw: defaultElementColor

      before: 8 8
      change: visible: false
      after:  4 4

    # THIS IS THE ONE THAT WAS ACTUALLY FAILING!
    testPartialBeforeAfter
      "visible false > true"

      canvasSize: 2 1

      children:
        # the nested elements was required to make this fail
        Element
          Element
            key: "testElement"
            visible: false
            draw: defaultElementColor

      before: 4 4
      change: visible: true
      after:  8 8

    testPartialBeforeAfter
      "cached-opacity set to zero"

      canvasSize: 1

      children:
        # the nested elements was required to make this fail
        Element
          draw: defaultElementColor
          size: 1
          key: "testElement"
          opacity: 1

      before: 8
      change: opacity: 0
      after:  4
