
import &ArtStandardLib, &ArtCanvasPath, {} &fs

{}
  addFilesToCanvasPathLibrary = (cpl, files, options = {}, stats = {}) ->
    options extract camelCase, extract as extractNamedPaths, ignoreErrors
    Promise.all compactFlatten array file in files
      svg =
        fs.readFileSync file
        .toString()

      stats.totalBytesRead += svg.length
      stats.svgSourceLength += svg.length

      name = &path.parse(file).name

      namedSvgs =
        if extractNamedPaths
          object path, name in extractNamedSvgPaths svg
            """
              <svg>
              #{path}
              </svg>
        else
          [name]: svg

      array svg, name in namedSvgs
        name = lowerCamelCase name if camelCase
        log encoding: name
        svgToCanvasPath svg
        .then (canvasPath) ->
          cpl.add name, canvasPath
          stats.totalPathsEncoded++
        .catch (error) ->
          stats.totalErrors++
          log.error error-parsing-vg: {}
            error.message
            name
            file
          throw error unless ignoreErrors

    .then -> stats

  cliMain: ->
    &colors

    {output} = options = commander =
      &commander
      .version &package.version
      .option '-o, --output [file]',  "" output file name (extension: .cpf)
      .option '-e, --extract',        "" extract named paths from source SVG files
      .option '-c, --camelCase',      "" convert names to lowerCamelCase for output
      .option '-i, --ignoreErrors',   "" skip over errors
      .option '--verify',   "" verify the created CPF file
      .usage  "" [options] <files...>
      .description """ Scan and convert one or more .svg files into a .cpf file.
      .parse process.argv

    files = commander.args
    if files.length > 0
      log inputs: files

      addFilesToCanvasPathLibrary
        cpl = new CanvasPathLibrary
        files
        options
        stats =
          svgSourceLength:    0
          totalBytesRead:     0
          totalPathsEncoded:  0
          totalErrors:        0

      .then ->
        cpl.normalize()
        cpl.flatten()
        cpl.xbd.toXbd()
      .tap (cpfFile) ->
        if options.verify
          log verifying-cpf: cpfFile
          decodeCpf cpfFile
          log verified-cpf: cpfFile

      .then (cpfFile) ->
        size =
          input: stats.totalBytesRead
          output: cpfFile.length
          reduced:
            stats.totalBytesRead / cpfFile.length
            * 100
            | 0
            / 100
            + :x

        output += ".cpf" unless /\.cpf$/.test output
        log {} stats, size, output: output ? "" use -o to specify the output filename
        if output
          fs.writeFileSync output, cpfFile.nodeBuffer

    else
      commander.outputHelp()