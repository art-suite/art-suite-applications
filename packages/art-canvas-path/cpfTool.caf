import &ArtStandardLib, &ArtCanvasPath, &ArtCanvasPath.CliLib

&colors

{output} = options = commander =
  &commander
  .version &package.version
  .option '-o, --output [file]',  "" output file name (extension: .cpf)
  .option '-e, --extract',        "" extract named paths from source SVG files
  .option '-c, --camelCase',      "" convert names to lowerCamelCase for output
  .option '-i, --ignoreErrors',   "" skip over errors
  .usage  "" [options] <files...>
  .description """ Scan and convert one or more .svg files into a .cpf file.
  .parse process.argv

files = commander.args
if files.length > 0
  log inputs: files

  addFilesToCanvasPathLibrary
    cpl = new CanvasPathLibrary
    files
    options
    stats =
      svgSourceLength:    0
      totalBytesRead:     0
      totalPathsEncoded:  0
      totalErrors:        0

  .then ->
    cpl.normalize()
    cpl.flatten()
    cpl.xbd.toXbd()
  .then (cpfFile) ->
    if output
      unless /\.cpf$/.test output
        output += ".cpf"
      log {}
        output
        stats
        size:
          input: stats.totalBytesRead
          output: cpfFile.length
          reduced:
            stats.totalBytesRead / cpfFile.length
            * 100
            | 0
            / 100
            + :x
      &fs.writeFileSync output, cpfFile.nodeBuffer
    else
      log {} stats, cpfFile

else
  commander.outputHelp()