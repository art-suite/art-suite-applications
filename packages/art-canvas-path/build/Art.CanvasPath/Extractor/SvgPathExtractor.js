"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "IntermediateCanvasPath", "peek", "rect", "CanvasPathSet", "Builder", "DOMParser"], [global, require('./StandardImport'), require('../CanvasPathBuilder'), require('@xmldom/xmldom')], (BaseClass, IntermediateCanvasPath, peek, rect, CanvasPathSet, Builder, DOMParser) => {let SvgPathExtractor; return SvgPathExtractor = Caf.defClass(class SvgPathExtractor extends BaseClass {constructor() {super(...arguments); this._paths = [new IntermediateCanvasPath];};}, function(SvgPathExtractor, classSuper, instanceSuper) {this.prototype._advancePath = function() {let path; this._paths.push(path = new IntermediateCanvasPath); return path;}; this.prototype.advancePathIfPainted = function() {return this.currentPath.painted ? this._advancePath() : this.currentPath;}; this.getter("paths", {currentPath: function() {return peek(this._paths);}, drawArea: function() {let out; out = rect(); Caf.each2(this.paths, (path) => path.drawArea.unionInto(out)); return out;}, inspectedObjects: function() {return {SvgPathExtractor: {currentPath: this.currentPath.inspectedObjects}};}, canvasPath: function() {return new CanvasPathSet(Caf.array(this.paths, (path) => path.canvasPath));}, xbd: function() {return this.canvasPath.xbd;}}); this.prototype.extract = function(svg) {return require('canvg').default.fromString((new Builder(this)).getContext(), svg, {window: null, ignoreMouse: true, ignoreAnimation: true, ignoreDimensions: true, ignoreClear: true, DOMParser}).render().then(() => {Caf.each2(this.paths, (path) => path.resolveMatrix()); return this;});};});});});
//# sourceMappingURL=SvgPathExtractor.js.map
