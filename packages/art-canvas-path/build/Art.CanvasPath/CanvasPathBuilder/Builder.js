"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "matrix", "peek", "Error"], [global, require('./StandardImport')], (BaseObject, matrix, peek, Error) => {let ContextState, CanvgCanvasContext2dMock, Builder; ContextState = Caf.defClass(class ContextState extends BaseObject {constructor(prevState) {super(...arguments); if (prevState) {this.fillStyle = prevState.fillStyle; this.strokeStyle = prevState.strokeStyle; this.lineWidth = prevState.lineWidth; this.miterLimit = prevState.miterLimit; this.lineCap = prevState.lineCap; this.lineJoin = prevState.lineJoin; this.matrix = prevState.matrix;} else {this.fillStyle; this.strokeStyle; this.lineWidth; this.miterLimit; this.lineCap; this.lineJoin = null; this.matrix = matrix();};};}, function(ContextState, classSuper, instanceSuper) {this.property("fillStyle", "strokeStyle", "lineWidth", "miterLimit", "lineCap", "lineJoin", "matrix");}); CanvgCanvasContext2dMock = Caf.defClass(class CanvgCanvasContext2dMock extends BaseObject {constructor(canvas, svgPathExtractor) {super(...arguments); this.canvas = canvas; this.svgPathExtractor = svgPathExtractor; this.stateStack = [new ContextState];};}, function(CanvgCanvasContext2dMock, classSuper, instanceSuper) {let transparentStyle; this.prototype.save = function() {return this.stateStack.push(new ContextState(this.currentState));}; this.prototype.restore = function() {return this.stateStack.pop();}; transparentStyle = "rgba(0,0,0,0)"; this.prototype.fill = function(v) {let currentPath; return (this.fillStyle != null && this.fillStyle !== transparentStyle) ? (({currentPath} = this.svgPathExtractor), v != null ? v : v = "nonzero", currentPath.fillRule = (v === "nonzero") ? undefined : "evenodd", currentPath.fillStyle = this.fillStyle, currentPath.matrix = this.matrix) : undefined;}; this.prototype.stroke = function() {let currentPath; return (this.strokeStyle && this.strokeStyle !== transparentStyle) ? (({currentPath} = this.svgPathExtractor), currentPath.strokeStyle = this.strokeStyle, currentPath.lineWidth = this.lineWidth, currentPath.miterLimit = this.miterLimit, currentPath.lineCap = this.lineCap, currentPath.lineJoin = this._lineJoin, currentPath.matrix = this.matrix) : undefined;}; this.getter({currentState: function() {return peek(this.stateStack);}, currentPath: function() {return this.svgPathExtractor.currentPath;}, fillStyle: function() {return this.currentState.fillStyle;}, strokeStyle: function() {return this.currentState.strokeStyle;}, lineWidth: function() {return this.currentState.lineWidth;}, miterLimit: function() {return this.currentState.miterLimit;}, lineCap: function() {return this.currentState.lineCap;}, lineJoin: function() {return this.currentState.lineJoin;}, matrix: function() {return this.currentState.matrix;}, width: function() {return (() => {throw new Error("can't get width on this");})();}, height: function() {return (() => {throw new Error("can't get height on this");})();}}); this.setter({fillStyle: function(v) {return this.currentState.fillStyle = v;}, strokeStyle: function(v) {return this.currentState.strokeStyle = v;}, lineWidth: function(v) {return this.currentState.lineWidth = v;}, miterLimit: function(v) {return this.currentState.miterLimit = v;}, lineCap: function(v) {return this.currentState.lineCap = v;}, lineJoin: function(v) {return this.currentState.lineJoin = v;}, matrix: function(v) {return this.currentState.matrix = v;}, globalAlpha: function(v) {return (v < 254 / 256) ? (() => {throw new Error("NOT SUPPORTED: globalAlpha???");})() : undefined;}, globalCompositeOperation: function() {return (() => {throw new Error("NOT SUPPORTED: globalCompositeOperation???");})();}}); this.prototype.translate = function(x, y) {return this.matrix = this.matrix.translateXY(x, y);}; this.prototype.scale = function(x, y) {return this.matrix = this.matrix.scaleXY(x, y);}; this.prototype.transform = function(xx, yx, xy, yy, x1, y1) {return this.matrix = matrix(xx, yy, xy, yx, x1, y1).mul(this.matrix);}; this.prototype.beginPath = function() {return this.svgPathExtractor.currentPath.beginPath();}; this.prototype.moveTo = function(x, y) {return this.svgPathExtractor.currentPath.moveTo(x, y);}; this.prototype.lineTo = function() {}; this.prototype.closePath = function() {}; this.prototype.beginPath = function() {return this.svgPathExtractor.advancePathIfPainted().beginPath();}; this.prototype.closePath = function() {return this.svgPathExtractor.advancePathIfPainted().closePath();}; this.prototype.moveTo = function(a, b) {return this.svgPathExtractor.advancePathIfPainted().moveTo(a, b);}; this.prototype.lineTo = function(a, b) {return this.svgPathExtractor.advancePathIfPainted().lineTo(a, b);}; this.prototype.quadraticCurveTo = function(a, b, c, d) {return this.svgPathExtractor.advancePathIfPainted().quadraticCurveTo(a, b, c, d);}; this.prototype.bezierCurveTo = function(a, b, c, d, e, f) {return this.svgPathExtractor.advancePathIfPainted().bezierCurveTo(a, b, c, d, e, f);}; this.prototype.arc = function(a, b, c, d, e, f) {return this.svgPathExtractor.advancePathIfPainted().arc(a, b, c, d, e, f);};}); return Builder = Caf.defClass(class Builder extends Object {constructor(svgPathExtractor) {super(...arguments); this.svgPathExtractor = svgPathExtractor;};}, function(Builder, classSuper, instanceSuper) {this.prototype.getContext = function() {return new CanvgCanvasContext2dMock(this, this.svgPathExtractor);};});});});
//# sourceMappingURL=Builder.js.map
