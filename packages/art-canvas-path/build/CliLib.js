"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Promise", "compactFlatten", "fs", "extractNamedSvgPaths", "lowerCamelCase", "log", "svgToCanvasPath", "process", "CanvasPathLibrary"], [global, require('art-standard-lib'), require('./Art.CanvasPath'), {fs: require('fs')}], (Promise, compactFlatten, fs, extractNamedSvgPaths, lowerCamelCase, log, svgToCanvasPath, process, CanvasPathLibrary) => {let addFilesToCanvasPathLibrary; return {addFilesToCanvasPathLibrary: addFilesToCanvasPathLibrary = function(cpl, files, options = {}, stats = {}) {let camelCase, extractNamedPaths, ignoreErrors; camelCase = options.camelCase; extractNamedPaths = options.extract; ignoreErrors = options.ignoreErrors; return Promise.all(compactFlatten(Caf.array(files, (file) => {let svg, name, namedSvgs; svg = fs.readFileSync(file).toString(); stats.totalBytesRead += svg.length; stats.svgSourceLength += svg.length; name = require('path').parse(file).name; namedSvgs = extractNamedPaths ? Caf.object(extractNamedSvgPaths(svg), (path, name) => `<svg>\n${Caf.toString(path)}\n</svg>`) : {[name]: svg}; return Caf.array(namedSvgs, (svg, name) => {if (camelCase) {name = lowerCamelCase(name);}; log({encoding: name}); return svgToCanvasPath(svg).then((canvasPath) => {cpl.add(name, canvasPath); return stats.totalPathsEncoded++;}).catch((error) => {stats.totalErrors++; log.error({"error-parsing-vg": {message: error.message, name, file}}); return !ignoreErrors ? (() => {throw error;})() : undefined;});});}))).then(() => stats);}, cliMain: function() {let output, options, commander, files, cpl, stats; require('colors'); ({output} = options = commander = require('commander').version(require('../package').version).option("-o, --output [file]", "output file name (extension: .cpf)").option("-e, --extract", "extract named paths from source SVG files").option("-c, --camelCase", "convert names to lowerCamelCase for output").option("-i, --ignoreErrors", "skip over errors").usage("[options] <files...>").description("Scan and convert one or more .svg files into a .cpf file.").parse(process.argv)); files = commander.args; return (files.length > 0) ? (log({inputs: files}), addFilesToCanvasPathLibrary(cpl = new CanvasPathLibrary, files, options, stats = {svgSourceLength: 0, totalBytesRead: 0, totalPathsEncoded: 0, totalErrors: 0}).then(() => {cpl.normalize(); cpl.flatten(); return cpl.xbd.toXbd();}).then((cpfFile) => {let size; size = {input: stats.totalBytesRead, output: cpfFile.length, reduced: (stats.totalBytesRead / cpfFile.length * 100 | 0) / 100 + "x"}; if (!/\.cpf$/.test(output)) {output += ".cpf";}; log({stats, size, output: output != null ? output : "use -o to specify the output filename"}); return output ? fs.writeFileSync(output, cpfFile.nodeBuffer) : undefined;})) : commander.outputHelp();}};});});
//# sourceMappingURL=CliLib.js.map
