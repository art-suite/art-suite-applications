import &StandardImport
&ArtConfig.configure()

require "fake-indexeddb/auto"
global.window = global

{food} = class Food extends IndexedDbPipeline
  @registry new PipelineRegistry session: {}
  @indexes
    foodByType: :type/createdAt

  @publicRequestTypes :get :create :update :delete

  dbVersion: 2
  dbName: :FoodNetwork
  @filter createDatabaseFilters
    linkFilterVersion: 2
    fields:
      name: "required trimmedString"
      type: :trimmedString

chainedTest 'init' -> food.create data: name: :Throwaway

.thenTest 'create' ->
  food.create data: name: :Shane
  .tap (out) ->
    assert.eq out.name, :Shane
    assert.isNumber out.createdAt
    assert.isNumber out.updatedAt
    assert.present out.id

.tapTest
  :get ({id}) ->
    food.get key: id
    .tap (out) ->
      assert.eq out.name, :Shane
      assert.isNumber out.createdAt
      assert.eq out.createdAt, out.updatedAt
      assert.present out.id

  :update ({id, name}) ->
    food.update key: id, data: name: "" #{name} Delamore
    .then (out) ->
      assert.eq out.name, "" Shane Delamore
      food.get key: id
    .then (out) ->
      assert.eq out.name, "" Shane Delamore

  :delete ({id}) ->
    food.delete key: id
    .then (deleted) ->
      assert.eq id, deleted.id
      assert.rejects food.get key: id
