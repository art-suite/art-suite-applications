"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["currentSecond", "fastBind", "Error", "merge", "process", "getEnv", "Neptune", "compactFlatten", "Math", "timeout", "objectHasKeys", "Object"], [global, require('art-standard-lib'), require('art-communication-status')], (currentSecond, fastBind, Error, merge, process, getEnv, Neptune, compactFlatten, Math, timeout, objectHasKeys, Object) => {let memoryCheckCycleMs, timeAgeString, Server; require('colors'); memoryCheckCycleMs = 10000; timeAgeString = function(actualAge, testAge) {testAge != null ? testAge : testAge = actualAge; return (testAge <= 60) ? `${Caf.toString(actualAge.toFixed(2))}s` : (testAge <= 60 * 60) ? `${Caf.toString((actualAge / 60).toFixed(2))}m` : `${Caf.toString((actualAge / (60 * 60)).toFixed(2))}h`;}; return Server = Caf.defClass(class Server extends require('./LoggingMixin')(require('art-class-system').BaseClass) {constructor(...manyOptions) {let WEB_CONCURRENCY, PORT, ART_EXPRESS_SERVER_VERBOSE, base; super(...arguments); ({WEB_CONCURRENCY, PORT, ART_EXPRESS_SERVER_VERBOSE} = getEnv()); this.options = this._allowAllCors(merge(Server.defaults, {numWorkers: WEB_CONCURRENCY || 1, port: PORT, verbose: ART_EXPRESS_SERVER_VERBOSE != null && ART_EXPRESS_SERVER_VERBOSE !== false && ART_EXPRESS_SERVER_VERBOSE !== "false"}, ...manyOptions)); if ((Caf.exists(base = this.options) && base.numWorkers) != null) {this._numWorkers = this.options.numWorkers | 0;};};}, function(Server, classSuper, instanceSuper) {this.defaults = {port: 8085, server: "http://localhost"}; this.start = function(...manyOptions) {return (new Server(...manyOptions)).start();}; this.getter({uptime: function() {return currentSecond() - this.startTime;}, uptimeString: function() {return timeAgeString(this.uptime);}}, "numWorkers", "startTime", "requestCount", "server", "app", {hostAndPort: function() {return `${Caf.toString(this.host)}:${Caf.toString(this.port)}`;}, host: function() {let address; address = this.server.address(); return (address.address === "::") ? "localhost" : address.address;}, port: function() {return this.server.address().port;}}); this.prototype.start = function(...manyOptions) {this.logVerbose({start: {options: this.options}}); if (this.numWorkers > 1) {require('throng')({workers: this.numWorkers, master: () => {this.logEnvironment(); return this.log({start: {throng: {workers: this.numWorkers}}});}, start: fastBind(this._startOneServer, this)});} else {this.logEnvironment(); this._startOneServer();}; return this;}; this.prototype.stop = function() {return (this.numWorkers > 1) ? (() => {throw new Error("cant stop throng");})() : this.server.close();}; this.prototype.logEnvironment = function() {return this.logVerbose({start: {options: this.options, verbose: this.verbose, env: merge(Caf.object(process.env, null, (v, k) => k.match(/^art/)), {WEB_CONCURRENCY: getEnv().WEB_CONCURRENCY, WEB_MEMORY: getEnv().WEB_MEMORY, MEMORY_AVAILABLE: getEnv().MEMORY_AVAILABLE, PORT: getEnv().PORT, ART_EXPRESS_SERVER_MAX_AGE_SECONDS: getEnv().ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB: getEnv().ART_EXPRESS_SERVER_MAX_SIZE_MB, ART_EXPRESS_SERVER_VERBOSE: getEnv().ART_EXPRESS_SERVER_VERBOSE}), Neptune: Neptune.getVersions()}});}; this.prototype._allowAllCors = function(options) {return options.allowAllCors ? merge(options, {commonResponseHeaders: merge(require('./AllowAllCorsHandler').commonResponseHeaders, options.commonResponseHeaders), handlers: compactFlatten([require('./AllowAllCorsHandler'), options.handlers])}) : options;}; this.prototype._initMonitors = function(server) {let ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB, maxAgeMs, maxAgeTimeString, checkMemory; ({ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB} = getEnv()); if (ART_EXPRESS_SERVER_MAX_AGE_SECONDS) {ART_EXPRESS_SERVER_MAX_AGE_SECONDS = ART_EXPRESS_SERVER_MAX_AGE_SECONDS | 0; maxAgeMs = 1000 * ART_EXPRESS_SERVER_MAX_AGE_SECONDS * (.9 + Math.random() * .2) | 0; maxAgeTimeString = timeAgeString(maxAgeMs / 1000, ART_EXPRESS_SERVER_MAX_AGE_SECONDS); this.log(`ART_EXPRESS_SERVER_MAX_AGE_SECONDS=${Caf.toString(ART_EXPRESS_SERVER_MAX_AGE_SECONDS)} -> shut down after ${Caf.toString(maxAgeTimeString)} (+/- 10% randomly)`.green); timeout(maxAgeMs).then(() => {this.log(`ART_EXPRESS_SERVER_MAX_AGE_SECONDS=${Caf.toString(ART_EXPRESS_SERVER_MAX_AGE_SECONDS)} -> shutting down: ${Caf.toString(maxAgeTimeString)} expired`.red); server.close(); return process.exit(0);});}; return ART_EXPRESS_SERVER_MAX_SIZE_MB ? (ART_EXPRESS_SERVER_MAX_SIZE_MB = ART_EXPRESS_SERVER_MAX_SIZE_MB | 0, this.log(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> shut down when MemoryUsage(${Caf.toString(process.memoryUsage().rss / (1024 * 1024) | 0)}MB) > ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}MB (check every: ${Caf.toString(memoryCheckCycleMs / 1000 | 0)}s)`.green), timeout(memoryCheckCycleMs, checkMemory = () => {let rssMegabytes; if (ART_EXPRESS_SERVER_MAX_SIZE_MB < (rssMegabytes = process.memoryUsage().rss / (1024 * 1024) | 0)) {this.log(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> shutting down: MemoryUsage(${Caf.toString(rssMegabytes)}MB) > ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}. (uptime: ${Caf.toString(this.uptimeString)}, ${Caf.toString(this.requestCount)} requests)`.red); server.close(); process.exit(0);} else {this.logVerbose(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> tested OK! MemoryUsage(${Caf.toString(rssMegabytes)}MB) <= ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}MB (uptime: ${Caf.toString(this.uptimeString)}, ${Caf.toString(this.requestCount)} requests)`.green);}; return timeout(memoryCheckCycleMs, checkMemory);})) : undefined;}; this.prototype._startOneServer = function(workerId) {let staticOptions, initWorker, port, posthandlers, handlers, postmiddleware, middleware, commonResponseHeaders, temp; this.workerId = workerId; temp = this.options; staticOptions = temp.static; initWorker = temp.initWorker; port = temp.port; posthandlers = temp.posthandlers; handlers = temp.handlers; postmiddleware = temp.postmiddleware; middleware = temp.middleware; commonResponseHeaders = temp.commonResponseHeaders; this._startTime = currentSecond(); this._requestCount = 0; this._app = require('express')(); Caf.isF(initWorker) && initWorker(this); if (commonResponseHeaders && objectHasKeys(commonResponseHeaders)) {this.app.use((request, response, next) => {Caf.each2(commonResponseHeaders, (v, k) => response.setHeader(k, v)); return next();});}; this.app.use((_a, _b, next) => {this._requestCount++; return next();}); this.app.use(require('compression')()); if (Caf.is(middleware, Object)) {Caf.each2(compactFlatten([middleware]), (callback, path) => this.app.use(path, callback));} else {if (middleware != null) {Caf.each2(compactFlatten([middleware]), (mw) => this.app.use(mw));};}; Caf.each2(compactFlatten([handlers]), (handler) => this.app.use(handler.getMiddleware(this.options))); if (staticOptions) {this.app.use(require('express').static(staticOptions.root, merge({maxAge: 3600 * 24 * 7, setHeaders: (response, path) => {switch (require('path').extname(path).toLowerCase()) {case ".js": response.setHeader("Content-Type", "application/javascript; charset=UTF-8");}; return Caf.each2(staticOptions.headers, (v, k) => response.setHeader(k, v));}}, staticOptions)));}; Caf.each2(compactFlatten([posthandlers]), (handler) => this.app.use(handler.getMiddleware(this.options))); Caf.each2(compactFlatten([postmiddleware]), (mw) => this.app.use(mw)); this._server = this.app.listen(port != null ? port : 0, () => this.log(`listening on: http://${Caf.toString(this.hostAndPort)}`)); return this._initMonitors(this._server);};});});});
//# sourceMappingURL=Server.js.map
