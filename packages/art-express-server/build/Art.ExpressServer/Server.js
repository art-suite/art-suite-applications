"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["getEnv", "merge", "fastBind", "process", "Neptune", "compactFlatten", "Math", "timeout", "currentSecond", "objectHasKeys", "Object"], [global, require('art-standard-lib'), require('art-communication-status')], (getEnv, merge, fastBind, process, Neptune, compactFlatten, Math, timeout, currentSecond, objectHasKeys, Object) => {let memoryCheckCycleMs, Server; require('colors'); memoryCheckCycleMs = 10000; return Server = Caf.defClass(class Server extends require('./LoggingMixin')(require('art-class-system').BaseClass) {}, function(Server, classSuper, instanceSuper) {let timeAgeString; this.defaults = {port: 8085, server: "http://localhost"}; this.start = function(...manyOptions) {return (new Server).start(...manyOptions);}; this.prototype.start = function(...manyOptions) {let WEB_CONCURRENCY, PORT, ART_EXPRESS_SERVER_VERBOSE, numWorkers; ({WEB_CONCURRENCY, PORT, ART_EXPRESS_SERVER_VERBOSE} = getEnv()); if (ART_EXPRESS_SERVER_VERBOSE != null) {this.verbose = true;}; ({numWorkers} = this.options = this._allowAllCors(merge(Server.defaults, {numWorkers: WEB_CONCURRENCY || 1, port: PORT}, ...manyOptions))); if (numWorkers != null) {numWorkers = numWorkers | 0;}; return (numWorkers > 1) ? require('throng')({workers: numWorkers, master: () => {this.logEnvironment(); return this.log({start: {throng: {workers: numWorkers}}});}, start: fastBind(this._startOneServer, this)}) : (this.logEnvironment(), this._startOneServer());}; this.prototype.logEnvironment = function() {return this.logVerbose({start: {options: this.options, verbose: this.verbose, env: merge(Caf.object(process.env, null, (v, k) => k.match(/^art/)), {WEB_CONCURRENCY: getEnv().WEB_CONCURRENCY, WEB_MEMORY: getEnv().WEB_MEMORY, MEMORY_AVAILABLE: getEnv().MEMORY_AVAILABLE, PORT: getEnv().PORT, ART_EXPRESS_SERVER_MAX_AGE_SECONDS: getEnv().ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB: getEnv().ART_EXPRESS_SERVER_MAX_SIZE_MB, ART_EXPRESS_SERVER_VERBOSE: getEnv().ART_EXPRESS_SERVER_VERBOSE}), Neptune: Neptune.getVersions()}});}; this.prototype._allowAllCors = function(options) {return options.allowAllCors ? merge(options, {commonResponseHeaders: merge(require('./AllowAllCorsHandler').commonResponseHeaders, options.commonResponseHeaders), handlers: compactFlatten([require('./AllowAllCorsHandler'), options.handlers])}) : options;}; timeAgeString = function(actualAge, testAge) {testAge != null ? testAge : testAge = actualAge; return (testAge <= 60) ? `${Caf.toString(actualAge.toFixed(2))}s` : (testAge <= 60 * 60) ? `${Caf.toString((actualAge / 60).toFixed(2))}m` : `${Caf.toString((actualAge / (60 * 60)).toFixed(2))}h`;}; this.prototype._initMonitors = function(server) {let ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB, maxAgeMs, maxAgeTimeString, checkMemory; ({ART_EXPRESS_SERVER_MAX_AGE_SECONDS, ART_EXPRESS_SERVER_MAX_SIZE_MB} = getEnv()); if (ART_EXPRESS_SERVER_MAX_AGE_SECONDS) {ART_EXPRESS_SERVER_MAX_AGE_SECONDS = ART_EXPRESS_SERVER_MAX_AGE_SECONDS | 0; maxAgeMs = 1000 * ART_EXPRESS_SERVER_MAX_AGE_SECONDS * (.9 + Math.random() * .2) | 0; maxAgeTimeString = timeAgeString(maxAgeMs / 1000, ART_EXPRESS_SERVER_MAX_AGE_SECONDS); this.log(`ART_EXPRESS_SERVER_MAX_AGE_SECONDS=${Caf.toString(ART_EXPRESS_SERVER_MAX_AGE_SECONDS)} -> shut down after ${Caf.toString(maxAgeTimeString)} (+/- 10% randomly)`.green); timeout(maxAgeMs).then(() => {this.log(`ART_EXPRESS_SERVER_MAX_AGE_SECONDS=${Caf.toString(ART_EXPRESS_SERVER_MAX_AGE_SECONDS)} -> shutting down: ${Caf.toString(maxAgeTimeString)} expired`.red); server.close(); return process.exit(0);});}; return ART_EXPRESS_SERVER_MAX_SIZE_MB ? (ART_EXPRESS_SERVER_MAX_SIZE_MB = ART_EXPRESS_SERVER_MAX_SIZE_MB | 0, this.log(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> shut down when MemoryUsage(${Caf.toString(process.memoryUsage().rss / (1024 * 1024) | 0)}MB) > ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}MB (check every: ${Caf.toString(memoryCheckCycleMs / 1000 | 0)}s)`.green), timeout(memoryCheckCycleMs, checkMemory = () => {let rssMegabytes; if (ART_EXPRESS_SERVER_MAX_SIZE_MB < (rssMegabytes = process.memoryUsage().rss / (1024 * 1024) | 0)) {this.log(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> shutting down: MemoryUsage(${Caf.toString(rssMegabytes)}MB) > ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}. (uptime: ${Caf.toString(this.uptimeString)}, ${Caf.toString(this.requestCount)} requests)`.red); server.close(); process.exit(0);} else {this.logVerbose(`ART_EXPRESS_SERVER_MAX_SIZE_MB=${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)} -> tested OK! MemoryUsage(${Caf.toString(rssMegabytes)}MB) <= ${Caf.toString(ART_EXPRESS_SERVER_MAX_SIZE_MB)}MB (uptime: ${Caf.toString(this.uptimeString)}, ${Caf.toString(this.requestCount)} requests)`.green);}; return timeout(memoryCheckCycleMs, checkMemory);})) : undefined;}; this.getter({uptime: function() {return currentSecond() - this.startTime;}, uptimeString: function() {return timeAgeString(this.uptime);}}); this.prototype._startOneServer = function(workerId) {let staticOptions, initWorker, port, posthandlers, handlers, postmiddleware, middleware, commonResponseHeaders, server; this.workerId = workerId; this.startTime = currentSecond(); ({static: staticOptions, initWorker, port, posthandlers, handlers, postmiddleware, middleware, commonResponseHeaders} = this.options); this.app = require('express')(); Caf.isF(initWorker) && initWorker(this); this.requestCount = 0; if (commonResponseHeaders && objectHasKeys(commonResponseHeaders)) {this.app.use((request, response, next) => {Caf.each2(commonResponseHeaders, (v, k) => response.setHeader(k, v)); return next();});}; this.app.use((_a, _b, next) => {this.requestCount++; return next();}); this.app.use(require('compression')()); if (Caf.is(middleware, Object)) {Caf.each2(compactFlatten([middleware]), (callback, path) => this.app.use(path, callback));} else {if (middleware != null) {Caf.each2(compactFlatten([middleware]), (mw) => this.app.use(mw));};}; Caf.each2(compactFlatten([handlers]), (handler) => this.app.use(handler.getMiddleware(this.options))); if (staticOptions) {this.app.use(require('express').static(staticOptions.root, merge({maxAge: 3600 * 24 * 7, setHeaders: (response, path) => {switch (require('path').extname(path).toLowerCase()) {case ".js": response.setHeader("Content-Type", "application/javascript; charset=UTF-8");}; return Caf.each2(staticOptions.headers, (v, k) => response.setHeader(k, v));}}, staticOptions)));}; Caf.each2(compactFlatten([posthandlers]), (handler) => this.app.use(handler.getMiddleware(this.options))); Caf.each2(compactFlatten([postmiddleware]), (mw) => this.app.use(mw)); server = this.app.listen(port | 0, () => this.log(`listening on: http://localhost:${Caf.toString(port)}`)); return this._initMonitors(server);};});});});
//# sourceMappingURL=Server.js.map
