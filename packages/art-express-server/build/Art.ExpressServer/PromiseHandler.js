"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "Promise", "serverFailure", "Error", "formattedInspect", "encodeHttpStatus", "JSON", "isString", "findUrlRegexp", "lowerCase", "merge", "missing", "isPlainObject"], [global, require('art-standard-lib'), require('art-communication-status'), require('art-class-system')], (BaseClass, Promise, serverFailure, Error, formattedInspect, encodeHttpStatus, JSON, isString, findUrlRegexp, lowerCase, merge, missing, isPlainObject) => {let querystring, PromiseHandler; querystring = require('querystring'); return PromiseHandler = Caf.defClass(class PromiseHandler extends require('./LoggingMixin')(BaseClass) {constructor(options = {}) {super(...arguments); this.options = options; this.logVerbose("initialized", {"#": {options: this.options}}); this._commonResponseHeaders = this.options.commonResponseHeaders;};}, function(PromiseHandler, classSuper, instanceSuper) {this.getMiddleware = function(options) {return (new this(options)).middleware;}; this.extendableProperty({handleUrlRegex: null}); this.prototype.canHandleRequest = function(request) {return this.handleUrlRegex ? this.handleUrlRegex.test(request.url) : true;}; this.prototype.handleApiRequest = null; this.prototype.handleHtmlRequest = null; this.prototype.handleRequest = function(request, requestData) {return Promise.then(() => (() => {switch (false) {case !this.handleApiRequest: return this._handleApiRequestWrapper(request, requestData); case !this.handleHtmlRequest: return this._handleHtmlRequestWrapper(request, requestData); default: return null;};})());}; this.prototype.handleRawRequest = function(request, response, next) {let dataChunks, requestData; dataChunks = []; requestData = null; request.on("data", (chunk) => dataChunks.push(chunk)); return request.on("end", () => Promise.then(() => this.handleRequest(request, requestData = dataChunks.join(""))).catch((error) => {this.logError({internalError: {request, error}}); return {status: serverFailure};}).then((plainResponse) => {let headers, data, status, statusCode, responseData; if (plainResponse) {({headers, data, status, statusCode} = plainResponse); if (!(data != null || status != null || statusCode != null)) {throw new Error(`expected data, status or statusCode in response: ${Caf.toString(formattedInspect(plainResponse))}`);};}; responseData = data; response.statusCode = statusCode || ((status && (statusCode = encodeHttpStatus(status))) ? statusCode : statusCode = data ? 200 : 404); if ((statusCode / 100 | 0) === 5) {this.logError({url: request.url, requestData: (() => {try {return JSON.parse(requestData);} catch (error) {};})() || requestData, responseData: (() => {try {return JSON.parse(responseData);} catch (error1) {};})() || responseData});}; return ((statusCode / 100 | 0) === 3) ? response.redirect(statusCode, data) : this._encodeOutput(request, response, headers, responseData);}));}; this.getter({middleware: function() {return (request, response, next) => this.canHandleRequest(request) ? (this.logVerbose({start: {method: request.method, url: request.url}}), this.handleRawRequest(request, response, next)) : next();}}); this.prototype._encodeJson = function(responseHeaders, responseData) {responseHeaders["content-type"] = "application/json; charset=UTF-8"; return JSON.stringify(responseData);}; this.prototype._encodeHtml = function(responseHeaders, responseData) {responseHeaders["content-type"] = "text/html; charset=UTF-8"; return isString(responseData) ? responseData : `<html><body style='font-family:Monaco,courier;font-size:10pt'>\n${Caf.toString(formattedInspect(responseData).replace(/\n/g, "<br>\n").replace(/\ /g, "&nbsp;").replace(RegExp(`(${Caf.toString(findUrlRegexp.source)})`, 'g'), "<a href='$1'>$1</a>"))}\n</body></html>`;}; this.prototype._encodePlain = function(responseHeaders, responseData) {let temp; responseHeaders = Caf.object(responseHeaders, null, null, null, (v, k) => lowerCase(k)); ((temp = responseHeaders["content-type"]) != null ? temp : responseHeaders["content-type"] = "text/plain; charset=UTF-8"); return isString(responseData) ? responseData : formattedInspect(responseData);}; this.prototype._encodeOutput = function(request, response, responseHeaders = {}, responseData) {let accept, encodedData, headers; ({accept = "text/html"} = request.headers); encodedData = responseData && (() => {switch (false) {case !/json/.test(accept): return this._encodeJson(responseHeaders, responseData); case !/html/.test(accept): return this._encodeHtml(responseHeaders, responseData); default: return this._encodePlain(responseHeaders, responseData);};})(); Caf.each2(headers = merge(this._commonResponseHeaders, responseHeaders), (v, k) => response.setHeader(k, v)); this.logVerbose({done: {method: request.method, url: request.url, accept, responseData, headers, encodedData}}); return response.end(encodedData);}; this.prototype._handleHtmlRequestWrapper = function(request, requestData) {return Promise.then(() => this.handleHtmlRequest(request, requestData)).then((data) => (() => {switch (false) {case !(!(data != null)): return {status: missing}; case !isPlainObject(data): return data; case !(isString(data) || (data = Caf.isF(data.toString) && data.toString())): return {data}; default: return (() => {throw new Error("ArtExpressServer.PromiseHandler#_handleHtmlRequestWrapper - expected string, plainObject, object with toString() or null response");})();};})());}; this.prototype._handleApiRequestWrapper = function(request, requestData) {return Promise.then(() => JSON.parse(requestData || "{}")).catch(() => (() => {throw new Error(`requested data was not valid JSON: ${Caf.toString(requestData)}`);})()).then((parsedData) => {let url, __, query; ({url} = request); ([__, query] = url.split("?")); return merge(parsedData, query && Caf.object(querystring.parse(query), (v) => (() => {try {return JSON.parse(v);} catch (error) {return v;};})()));}).then((parsedData) => this.handleApiRequest(request, parsedData)).then((data) => data ? {data} : {status: missing});};});});});
//# sourceMappingURL=PromiseHandler.js.map
