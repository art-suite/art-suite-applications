"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["log", "String", "formatDate", "compactFlatten", "pad"], [global, require('art-standard-lib')], (log, String, formatDate, compactFlatten, pad) => {return function(superClass) {let LoggingMixin; return LoggingMixin = Caf.defClass(class LoggingMixin extends superClass {}, function(LoggingMixin, classSuper, instanceSuper) {this.prototype._log = function(...args) {return !this.quiet ? log(...args) : undefined;}; this.prototype._logError = function(...args) {return !this.quiet ? log.error(...args) : undefined;}; this.prototype._logWithOptions = function(...args) {return !this.quiet ? log.withOptions(...args) : undefined;}; this.prototype.log = function(toLog) {return (Caf.is(toLog, String)) ? this._log(`${Caf.toString(this.logHeader)}: ${Caf.toString(toLog)}`) : this._logWithOptions({color: true}, this.preprocessLog(toLog));}; this.prototype.logError = function(toLog) {return this._logError(this.preprocessLog(toLog));}; this.prototype.logVerbose = function(toLog) {return this.verbose ? this.log(toLog) : undefined;}; this.prototype.preprocessLog = function(toLog) {return {[`${Caf.toString(this.logHeader)}`]: toLog};}; this.setter("verbose", "quiet"); this.getter({verbose: function() {let base; return this._verbose || Caf.exists(base = this.options) && base.verbose;}, quiet: function() {let base; return this._quiet || Caf.exists(base = this.options) && base.quiet;}, logTime: function() {return formatDate("UTC:yyyy-mm-dd_HH-MM-ss");}, logHeader: function() {return compactFlatten([this.logTime, this.workerId && `worker${Caf.toString(pad(this.workerId, 4, "0", true))}`, this.class.getName()]).join(" ");}});});};});});
//# sourceMappingURL=LoggingMixin.js.map
