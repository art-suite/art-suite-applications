"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["String", "log", "dateFormat", "compactFlatten", "pad"], [global, require('art-standard-lib')], (String, log, dateFormat, compactFlatten, pad) => {return function(superClass) {let LoggingMixin; return LoggingMixin = Caf.defClass(class LoggingMixin extends superClass {}, function(LoggingMixin, classSuper, instanceSuper) {this.prototype.log = function(toLog) {return (Caf.is(toLog, String)) ? log(`${Caf.toString(this.logHeader)}: ${Caf.toString(toLog)}`) : log.withOptions({color: true}, this.preprocessLog(toLog));}; this.prototype.logError = function(toLog) {return log.error(this.preprocessLog(toLog));}; this.prototype.logVerbose = function(toLog) {return this.verbose ? this.log(toLog) : undefined;}; this.prototype.preprocessLog = function(toLog) {return {[`${Caf.toString(this.logHeader)}`]: toLog};}; this.setter("verbose"); this.getter({logTime: function() {return dateFormat("UTC:yyyy-mm-dd_HH-MM-ss");}, verbose: function() {let base; return this._verbose || Caf.exists(base = this.options) && base.verbose;}, logHeader: function() {return compactFlatten([this.logTime, this.workerId && `worker${Caf.toString(pad(this.workerId, 4, "0", true))}`, this.class.getName()]).join(" ");}});});};});});
//# sourceMappingURL=LoggingMixin.js.map
