// Generated by CoffeeScript 1.12.7
(function() {
  var Aws4RestClient, BaseClass, Config, Elasticsearch, Promise, RestClient, clone, compactFlatten, config, defineModule, log, merge, mergeInto, object, parseUrl, peek, present, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RestClient = require('art-rest-client');

  ref = require('art-standard-lib'), compactFlatten = ref.compactFlatten, mergeInto = ref.mergeInto, clone = ref.clone, object = ref.object, log = ref.log, present = ref.present, defineModule = ref.defineModule, parseUrl = ref.parseUrl, peek = ref.peek, Promise = ref.Promise, merge = ref.merge;

  config = (Config = require("./Config")).config;

  Aws4RestClient = require('./Aws4RestClient');

  BaseClass = require('art-class-system').BaseClass;

  defineModule(module, Elasticsearch = (function(superClass) {
    extend(Elasticsearch, superClass);

    function Elasticsearch(options) {
      var ref1;
      Elasticsearch.__super__.constructor.apply(this, arguments);
      ref1 = this.options = merge(config.elasticsearch, options), this.host = ref1.host, this.index = ref1.index, this.type = ref1.type, this.parentField = ref1.parentField, this.routingField = ref1.routingField;
    }

    Elasticsearch.prototype.get = function(options) {
      return this.aws4RestClient.getJson(this.getEntryUrl(this.normalizeEntryRequestParams(options)));
    };

    Elasticsearch.getter({
      aws4RestClient: function() {
        return this._aws4RestClient || (this._aws4RestClient = new Aws4RestClient(merge({
          service: 'es'
        }, config.elasticsearch)));
      }
    });

    Elasticsearch.prototype.indicesGet = function(params) {};

    Elasticsearch.property("elasticsearchType elasticsearchIndex");

    Elasticsearch.prototype.getIndexUrl = function(options) {
      return this.host + "/" + options.index;
    };

    Elasticsearch.prototype.getIndexTypeUrl = function(options) {
      return (this.getIndexUrl(options)) + "/" + options.type;
    };

    Elasticsearch.prototype.getSearchUrl = function(options) {
      return (this.getIndexTypeUrl(options)) + "/_search";
    };

    Elasticsearch.prototype.getEntryBaseUrl = function(options) {
      return (this.getIndexUrl(options)) + "/" + options.type + "/" + options.id;
    };

    Elasticsearch.prototype.getEntryUrl = function(options) {
      return "" + (this.getEntryBaseUrl(options)) + (this.getEntryUrlParams(options));
    };

    Elasticsearch.prototype.getUpdateUrl = function(options) {
      return (this.getEntryBaseUrl(options)) + "/_update" + (this.getEntryUrlParams(options));
    };


    /*
    IN: options:
      data:         (object) field data
      routingField: (string) field-name to use for routing
      parentField:  (string) field-name for parent
     */

    Elasticsearch.prototype.getEntryUrlParams = function(options) {
      var data, params, parent, routing;
      data = options.data, routing = options.routing, parent = options.parent;
      params = compactFlatten([present(routing) ? "routing=" + (encodeURIComponent(present)) : void 0, present(parent) ? "parent=" + (encodeURIComponent(parent)) : void 0]);
      return "?" + (params.join("&"));
    };

    Elasticsearch.prototype.normalizeEntryRequestParams = function(params) {
      var data, out, parentValue, routingValue;
      data = params.data;
      out = clone(params);
      if (this.routingField) {
        if (!present(routingValue = data != null ? data[this.routingField] : void 0)) {
          throw new Error("routing field '" + this.routingField + "' is not present in data: " + (formattedInspect(data)));
        }
        out.routing = data[this.routingField];
      }
      if (this.parentField) {
        if (!present(parentValue = data != null ? data[this.parentField] : void 0)) {
          throw new Error("parent field '" + this.parentField + "' is not present in data: " + (formattedInspect(data)));
        }
        out.parent = data[this.parentField];
      }
      out.index = this.index;
      out.type = this.type;
      return out;
    };

    return Elasticsearch;

  })(BaseClass));

}).call(this);

//# sourceMappingURL=Elasticsearch.js.map
