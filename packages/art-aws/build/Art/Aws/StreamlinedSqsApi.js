// Generated by CoffeeScript 1.12.7
(function() {
  var StreamlinedSqsApi, config, findUrlRegExp, log, merge, object, present, ref, urlJoin;

  ref = require('art-standard-lib'), log = ref.log, findUrlRegExp = ref.findUrlRegExp, object = ref.object, present = ref.present, urlJoin = ref.urlJoin, merge = ref.merge;

  config = require('./Config').config;

  module.exports = StreamlinedSqsApi = (function() {
    var doesntStartLowercase, normalizeQueueUrl, removeLowerCaseParams;

    function StreamlinedSqsApi() {}

    StreamlinedSqsApi.normalizeQueueUrl = normalizeQueueUrl = function(queue, options) {
      var queueUrlPrefix, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
      queue || (queue = (ref1 = (ref2 = (ref3 = options != null ? options.queue : void 0) != null ? ref3 : options != null ? options.queueUrl : void 0) != null ? ref2 : config != null ? (ref4 = config.sqs) != null ? ref4.queue : void 0 : void 0) != null ? ref1 : config != null ? (ref5 = config.sqs) != null ? ref5.queueUrl : void 0 : void 0);
      if (queue && findUrlRegExp.test(queue)) {
        return queue;
      } else {
        queueUrlPrefix = (ref6 = options != null ? options.queueUrlPrefix : void 0) != null ? ref6 : config != null ? (ref7 = config.sqs) != null ? ref7.queueUrlPrefix : void 0 : void 0;
        if (!(present(queueUrlPrefix) && present(queue))) {
          throw new Error("queueUrlPrefix && queue OR queueUrl required");
        }
        return urlJoin(queueUrlPrefix, queue.replace(/[^-_a-zA-Z0-9]/g, '-'));
      }
    };

    doesntStartLowercase = /^[^a-z]/;

    removeLowerCaseParams = function(params) {
      return object(params, {
        when: function(v, k) {
          return doesntStartLowercase.test(k);
        }
      });
    };

    StreamlinedSqsApi.sqsCommands = {
      createQueue: {
        preprocess: function(params, options) {
          var name, visibilityTimeout;
          name = params.name, visibilityTimeout = params.visibilityTimeout;
          return merge(removeLowerCaseParams(params), {
            QueueName: name,
            Attributes: merge(params.Attributes, {
              VisibilityTimeout: visibilityTimeout
            })
          });
        },
        postprocess: function(arg) {
          var QueueUrl;
          QueueUrl = arg.QueueUrl;
          return QueueUrl;
        }
      },
      sendMessage: {
        preprocess: function(params, options) {
          var body, deduplicationId, delaySeconds, groupId, queue;
          body = params.body, queue = params.queue, delaySeconds = params.delaySeconds, deduplicationId = params.deduplicationId, groupId = params.groupId;
          return merge(removeLowerCaseParams(params), {
            QueueUrl: normalizeQueueUrl(queue, options),
            MessageBody: JSON.stringify(body),
            DelaySeconds: delaySeconds,
            MessageDeduplicationId: deduplicationId,
            MessageGroupId: groupId
          });
        },
        postprocess: function(data) {
          var MessageId;
          MessageId = data.MessageId;
          return merge(data, {
            id: MessageId
          });
        }
      },
      receiveMessage: {
        preprocess: function(params, options) {
          var limit, queue, visibilityTimeout, wait;
          queue = params.queue, visibilityTimeout = params.visibilityTimeout, wait = params.wait, limit = params.limit;
          return merge(removeLowerCaseParams(params), {
            QueueUrl: normalizeQueueUrl(queue, options),
            MaxNumberOfMessages: limit,
            VisibilityTimeout: visibilityTimeout,
            WaitTimeSeconds: wait != null ? wait : 5
          });
        },
        postprocess: function(data) {
          var Body, MessageId, Messages, ReceiptHandle, body, i, len, message, ref1, results;
          Messages = data.Messages;
          ref1 = Messages || [];
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            message = ref1[i];
            MessageId = message.MessageId, Body = message.Body, ReceiptHandle = message.ReceiptHandle;
            body = (function() {
              try {
                return JSON.parse(Body);
              } catch (error) {
                return Body;
              }
            })();
            results.push(merge(message, {
              id: MessageId,
              body: body,
              receiptHandle: ReceiptHandle
            }));
          }
          return results;
        }
      },
      deleteMessage: {
        preprocess: function(params, options) {
          var queue, receiptHandle;
          receiptHandle = params.receiptHandle, queue = params.queue;
          return merge(removeLowerCaseParams(params), {
            QueueUrl: normalizeQueueUrl(queue, options),
            ReceiptHandle: receiptHandle
          });
        }
      },
      listQueues: {
        preprocess: function(params, options) {
          var QueueNamePrefix;
          QueueNamePrefix = params.QueueNamePrefix;
          return merge(removeLowerCaseParams(params), {
            prefix: QueueNamePrefix
          });
        },
        postprocess: function(arg) {
          var QueueUrls;
          QueueUrls = arg.QueueUrls;
          return QueueUrls;
        }
      },
      purgeQueue: {
        preprocess: function(params, options) {
          return merge(removeLowerCaseParams(params), {
            QueueUrl: normalizeQueueUrl(params.queue, options)
          });
        }
      }
    };

    return StreamlinedSqsApi;

  })();

}).call(this);

//# sourceMappingURL=StreamlinedSqsApi.js.map
