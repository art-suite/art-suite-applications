"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "Error", "compactFlatten"], [global, require('../StandardImport')], (merge, Error, compactFlatten) => {let UpdateItem; return UpdateItem = Caf.defClass(class UpdateItem extends require('./TableApiBaseClass') {}, function(UpdateItem, classSuper, instanceSuper) {this.prototype._translateParams = function(params) {this._translateKey(params); this._translateUpdateExpression(params); this._translateOptionalParams(params); return this._target;}; this.prototype._translateUpdateExpression = function({item, set, data, add, remove, setDefault, defaults}) {let actions, setDefaultActions, addActions, removeAttributes, setExpression, addExpression, removeExpression, updateExpression; item = merge(item, set, data); defaults = merge(setDefault, defaults); actions = Caf.array(item, (attributeValue, attributeName) => {let uniqueId, attributeAlias, valueAlias; uniqueId = this._getNextUniqueExpressionAttributeId(this._target); attributeAlias = `#attr${Caf.toString(uniqueId)}`; valueAlias = `:val${Caf.toString(uniqueId)}`; this._addExpressionAttributeName(attributeAlias, attributeName); this._addExpressionAttributeValue(valueAlias, attributeValue); return `${Caf.toString(attributeAlias)} = ${Caf.toString(valueAlias)}`;}, (attributeValue, attributeName) => attributeValue !== undefined); setDefaultActions = Caf.array(defaults, (attributeValue, attributeName) => {let uniqueId, attributeAlias, valueAlias; uniqueId = this._getNextUniqueExpressionAttributeId(this._target); attributeAlias = `#attr${Caf.toString(uniqueId)}`; valueAlias = `:val${Caf.toString(uniqueId)}`; this._addExpressionAttributeName(attributeAlias, attributeName); this._addExpressionAttributeValue(valueAlias, attributeValue); return `${Caf.toString(attributeAlias)} = if_not_exists(${Caf.toString(attributeAlias)}, ${Caf.toString(valueAlias)})`;}, (attributeValue, attributeName) => attributeValue !== undefined); addActions = Caf.array(add, (attributeValue, attributeName) => {let uniqueId, attributeAlias, valueAlias; uniqueId = this._getNextUniqueExpressionAttributeId(this._target); attributeAlias = `#attr${Caf.toString(uniqueId)}`; valueAlias = `:val${Caf.toString(uniqueId)}`; this._addExpressionAttributeName(attributeAlias, attributeName); this._addExpressionAttributeValue(valueAlias, attributeValue); return `${Caf.toString(attributeAlias)} ${Caf.toString(valueAlias)}`;}, (attributeValue, attributeName) => attributeValue !== undefined); removeAttributes = Caf.array(remove, (attributeName) => {let uniqueId, attributeAlias; uniqueId = this._getNextUniqueExpressionAttributeId(this._target); attributeAlias = `#attr${Caf.toString(uniqueId)}`; this._addExpressionAttributeName(attributeAlias, attributeName); return attributeAlias;}); if (!(actions.length + setDefaultActions.length + addActions.length > 0)) {throw new Error("at least one 'item/set/data', 'add' or 'defaults/setDefault' entry required");}; if (actions.length + setDefaultActions.length > 0) {setExpression = `SET ${Caf.toString(compactFlatten([actions, setDefaultActions]).join(", "))}`;}; if (addActions.length > 0) {addExpression = `ADD ${Caf.toString(addActions.join(", "))}`;}; if (removeAttributes.length > 0) {removeExpression = `REMOVE ${Caf.toString(removeAttributes.join(", "))}`;}; updateExpression = compactFlatten([setExpression, addExpression, removeExpression]).join(" "); this._target.UpdateExpression = updateExpression; return this._target;}; this.prototype._translateOptionalParams = function(params) {this._translateConditionExpressionParam(params); this._translateConstantParam(params, "returnConsumedCapacity"); this._translateConstantParam(params, "returnItemCollectionMetrics"); return this._translateConstantParam(params, "returnValues", "updatedNew");};});});});
//# sourceMappingURL=UpdateItem.js.map
