"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["urlRegexp", "Error", "formattedInspect", "merge", "select", "objectWithout", "isString"], [global, require('art-standard-lib')], (urlRegexp, Error, formattedInspect, merge, select, objectWithout, isString) => {let getAwsServiceConfig, getAwsCredentials, Config, aws4, Aws4RestClient; ({getAwsServiceConfig, getAwsCredentials} = Config = require('./Config')); aws4 = require('aws4'); return Aws4RestClient = Caf.defClass(class Aws4RestClient extends require('art-rest-client').RestClientClass {constructor(options) {let base; super(...arguments); if (!isString(Caf.exists(options) && options.service)) {throw new Error("service required");}; this.service = options.service; this.nedpoint = options.endpoint; this.credentials = options.credentials; this.credentials || (this.credentials = getAwsCredentials(this.service)); this.endpoint || (this.endpoint = Caf.exists(base = getAwsServiceConfig(this.service)) && base.endpoint);};}, function(Aws4RestClient, classSuper, instanceSuper) {let pathJoin; this.singletonClass(); pathJoin = function(base, path) {path = path ? path.replace(/^\//, "") : ""; base = base ? base.replace(/\/$/, "") : ""; return `${Caf.toString(base)}/${Caf.toString(path)}`;}; this.prototype.sign = function(options) {let url, headers, body, method, __, protocol, host, port, path, query, matched; ({url, headers, body, method} = options); if (!urlRegexp.test(url)) {if (!this.endpoint) {throw new Error(`url does not have a host and no endpoint specified for service. ${Caf.toString(formattedInspect({service: this.service, url}))}`);}; url = pathJoin(this.endpoint, url);}; ([__, protocol, __, host, __, port, path = "/", __, query] = matched = url.match(urlRegexp)); if (!host) {throw new Error(`unvalid url: ${Caf.toString(formattedInspect({url}))}`);}; if (port != null) {host = `${Caf.toString(host)}:${Caf.toString(port)}`;}; if (query) {path = `${Caf.toString(path)}?${Caf.toString(query)}`;}; return merge(options, {url, headers: this._getSignatureHeaders({method, host, service: this.service, path, headers: select(headers, "content-type", "Content-Type"), body})});}; this.prototype._getSignatureHeaders = function(signOptions) {return objectWithout(aws4.sign(signOptions, this.credentials).headers, "Host", "Content-Length");}; this.prototype._normalizedRestRequest = function(options) {return instanceSuper._normalizedRestRequest.call(this, this.sign(options));};});});});
//# sourceMappingURL=Aws4RestClient.js.map
