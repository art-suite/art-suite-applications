// Generated by CoffeeScript 1.12.7
(function() {
  var BaseClass, Config, Promise, QuertyString, RestClient, S3, config, defineModule, isArray, isPlainObject, isString, log, lowerCamelCase, merge, object, parseUrl, peek, present, ref, upperCamelCase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RestClient = require('art-rest-client');

  ref = require('art-standard-lib'), isArray = ref.isArray, isPlainObject = ref.isPlainObject, upperCamelCase = ref.upperCamelCase, lowerCamelCase = ref.lowerCamelCase, object = ref.object, isString = ref.isString, log = ref.log, present = ref.present, defineModule = ref.defineModule, parseUrl = ref.parseUrl, peek = ref.peek, Promise = ref.Promise, merge = ref.merge;

  QuertyString = require('querystring');

  QuertyString.escape || (QuertyString.escape = encodeURIComponent);

  QuertyString.unescape || (QuertyString.unescape = decodeURIComponent);

  config = (Config = require("./Config")).config;

  BaseClass = require('art-class-system').BaseClass;

  defineModule(module, S3 = (function(superClass) {
    var _normalizeBucket, getBucketAndKey, lowerCamelCaseProps, renameProps, upperCamelCaseProps;

    extend(S3, superClass);

    function S3() {
      return S3.__super__.constructor.apply(this, arguments);
    }


    /*
    OUT: Promise -> {location, response}
    REJECTED: Promise -> {event, request}
     */

    S3.put = function(arg) {
      var bucket, data, headers, host, mimeType, objectName, onProgress, path, ref1, url;
      bucket = arg.bucket, objectName = arg.objectName, data = arg.data, onProgress = arg.onProgress, mimeType = arg.mimeType, headers = (ref1 = arg.headers) != null ? ref1 : {};
      bucket = S3._normalizeBucket(bucket);
      if (!bucket) {
        throw new Error("no bucket!");
      }
      host = bucket + ".s3.amazonaws.com";
      path = "/" + objectName;
      url = "https://" + host + path;
      if (present(mimeType)) {
        headers["Content-Type"] = mimeType;
      }
      return RestClient.put(url, data, {
        headers: headers,
        onProgress: onProgress
      }).then(function(response) {
        return {
          location: url,
          response: response
        };
      });
    };

    getBucketAndKey = function(urlOrBucketKey) {
      var bucket, key, ref1;
      ref1 = isString(urlOrBucketKey) ? S3.parseS3Url(urlOrBucketKey) : urlOrBucketKey, bucket = ref1.bucket, key = ref1.key;
      return {
        Bucket: S3._normalizeBucket(bucket),
        Key: key
      };
    };


    /*
    OUT: (NodeJs)
      acceptRanges:  "bytes"
      restore:       'ongoing-request="false", expiry-date="Fri, 08 Jun 2018 00:00:00 GMT"'
      lastModified:  2015-10-17 21:05:44 UTC
      contentLength: 1037232
      eTag:          '"6c1e52458eaeaaf5f1cd361dda121d5a"'
      contentType:   ""
      metadata:      {}
      storageClass:  "GLACIER"
      body:          {Buffer length: 1037232}
     */

    S3.get = function(urlOrBucketKey) {
      log({
        get: urlOrBucketKey
      });
      return Promise.withCallback(function(callback) {
        return S3.getS3().getObject(getBucketAndKey(urlOrBucketKey), callback);
      }).then(lowerCamelCaseProps);
    };

    S3["delete"] = function(urlOrBucketKey) {
      return Promise.withCallback(function(callback) {
        return S3.getS3().deleteObject(getBucketAndKey(urlOrBucketKey), callback);
      });
    };

    S3._normalizeBucket = _normalizeBucket = function(bucket) {
      return config.s3Buckets[bucket] || bucket;
    };

    S3._denormalizeBucket = function(bucket) {
      var k, ref1, v;
      ref1 = config.s3Buckets;
      for (k in ref1) {
        v = ref1[k];
        if (bucket === v) {
          return k;
        }
      }
      return bucket;
    };

    S3.classGetter({
      s3: function() {
        return this._s3 || (this._s3 = new AWS.S3(Config.getNormalizedConfig("S3")));
      }
    });

    S3.parseS3Url = function(url) {
      var host, pathName, ref1;
      ref1 = parseUrl(url), host = ref1.host, pathName = ref1.pathName;
      return {
        key: peek(pathName.split("/")),
        bucket: S3._denormalizeBucket(host.split(".s3.amazonaws")[0])
      };
    };

    S3.putSdk = function(arg) {
      var body, bucket, key;
      bucket = arg.bucket, key = arg.key, body = arg.body;
      return Promise.withCallback((function(_this) {
        return function(callback) {
          return _this.getS3().putObject({
            Bucket: _this._normalizeBucket(bucket),
            Key: key,
            Body: body
          }, callback);
        };
      })(this));
    };

    S3.copy = function(arg) {
      var fromBucket, key, params, toBucket;
      key = arg.key, toBucket = arg.toBucket, fromBucket = arg.fromBucket, params = arg.params;
      toBucket = this._normalizeBucket(toBucket);
      fromBucket = this._normalizeBucket(fromBucket);
      return Promise.withCallback((function(_this) {
        return function(callback) {
          return _this.getS3().copyObject(merge(params, {
            CopySource: fromBucket + "/" + key,
            Bucket: toBucket,
            Key: key,
            MetadataDirective: "COPY"
          }), callback);
        };
      })(this)).then(function(res) {
        return {
          copyObjectResult: res,
          url: "https://" + toBucket + ".s3.amazonaws.com/" + key
        };
      });
    };

    renameProps = function(obj, renameAction) {
      var i, len, results, v;
      if (isPlainObject(obj)) {
        return object(obj, {
          key: function(v, k) {
            return renameAction(k);
          },
          "with": function(v) {
            return renameProps(v, renameAction);
          }
        });
      } else if (isArray(obj)) {
        results = [];
        for (i = 0, len = obj.length; i < len; i++) {
          v = obj[i];
          results.push(renameProps(v, renameAction));
        }
        return results;
      } else {
        return obj;
      }
    };

    upperCamelCaseProps = function(obj) {
      return renameProps(obj, upperCamelCase);
    };

    lowerCamelCaseProps = function(obj) {
      return renameProps(obj, lowerCamelCase);
    };

    S3.list = function(params) {
      return Promise.withCallback((function(_this) {
        return function(callback) {
          return _this.getS3().listObjectsV2(upperCamelCaseProps(params), callback);
        };
      })(this)).then(function(res) {
        var item;
        res = lowerCamelCaseProps(res);
        res.contents = (function() {
          var i, len, ref1, results;
          ref1 = res.contents;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            results.push(lowerCamelCaseProps(item));
          }
          return results;
        })();
        return res;
      });
    };


    /*
    2018-04-26
                pricing     ETA/ETC
    bulk:       $.0025/gb   5-12 hours
    standard:   $.01/gb     3-5 hours
    expedited:  $.03/gb     1-5 minutes
     */

    S3.restore = function(params) {
      return Promise.withCallback((function(_this) {
        return function(callback) {
          return _this.getS3().restoreObject(upperCamelCaseProps(params), callback);
        };
      })(this)).then(lowerCamelCaseProps);
    };

    return S3;

  })(BaseClass));

}).call(this);

//# sourceMappingURL=S3.js.map
