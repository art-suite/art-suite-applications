import &StandardImport, &ArtAws

myAppMessage = MyAppMessage = null
setupPromise = null

setupWithMyTable = ->
  deleteTestTables()
  .then ->
    Neptune.Art.Ery.PipelineRegistry._reset()
    {myAppMessage} = class MyAppMessage extends DynamoDbPipeline
      @publicRequestTypes :get :create :update :delete :byUserIdEventAt :byUserIdEventAtDesc

      @addDatabaseFilters
        fields:
          userId:     :id
          eventAt:    :required :secondsTimestamp
          text:       :required :trimmedString

      @globalIndexes
        byUserIdEventAt: :userId/eventAt
        # example with DynamoDb index creation props:
        # eventLogsByEventCreatedAt:          projection: :keysOnly key: :event/createdAt

    myAppMessage._vivifyTable()

aliceId = randomString()
billId = randomString()

suite:

  basic: ->
    chainedTest setupWithMyTable

    .thenTest "fields are required", ->
      assert.clientFailure myAppMessage.create
        data:
          userId:   aliceId
          text:     "hi"
      .then (rejectsWith) -> assert.match rejectsWith.message, /missing.*eventAt|eventAt.*missing/


    .thenTest "create then get", ->
      Promise.all []
        myAppMessage.create
          data:
            userId:   aliceId
            text:     "message at 1"
            eventAt:  1

        myAppMessage.create
          data:
            userId:   aliceId
            text:     "message at 2"
            eventAt:  2

        myAppMessage.create
          data:
            userId:   aliceId
            text:     "message at 3"
            eventAt:  3

    .tapTest :byUserIdEventAt ->
      myAppMessage.byUserIdEventAt aliceId
      .then (messages) ->
        assert.eq
          1 2 3
          array {eventAt} in messages with eventAt


    .tapTest "byUserIdEventAt key: null -> clientFailure" ->
      assert.clientFailure myAppMessage.byUserIdEventAt null

    .tapTest "byUserIdEventAt with key but where: gt: null -> clientFailure" ->
      assert.clientFailure myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: gt: null

    .tapTest "byUserIdEventAt with key but where: null -> clientFailure" ->
      assert.clientFailure myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: null

    .tapTest "byUserIdEventAt limit: 1" ->
      myAppMessage.byUserIdEventAt aliceId, props: limit: 1
      .then (messages) ->
        assert.eq messages.length, 1

    .tapTest :byUserIdEventAtDesc ->
      myAppMessage.byUserIdEventAtDesc aliceId
      .then (messages) ->
        assert.eq
          3 2 1
          array {eventAt} in messages with eventAt
          {} messages

    .tapTest "where: eventAt: gt: 2" ->
      myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: gt: 2
      .then (messages) ->
        assert.eq
          [] 3
          array {eventAt} in messages with eventAt

    .tapTest "where: eventAt: gte: 2" ->
      myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: gte: 2
      .then (messages) ->
        assert.eq
          2 3
          array {eventAt} in messages with eventAt


    .tapTest "where: eventAt: between: 1 2" ->
      myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: between: 1 2
      .then (messages) ->
        assert.eq
          1 2
          array {eventAt} in messages with eventAt

    .tapTest "where: eventAt: 2" ->
      myAppMessage.byUserIdEventAt aliceId, props: where: eventAt: 2
      .then (messages) ->
        assert.eq
          [] 2
          array {eventAt} in messages with eventAt

    .tapTest "select: :eventAt" ->
      myAppMessage.byUserIdEventAt aliceId, props: select: :eventAt
      .then (messages) ->
        assert.eq
          []
            {} eventAt: 1
            {} eventAt: 2
            {} eventAt: 3
          messages


    .tapTest "select: :eventAt :userId" ->
      myAppMessage.byUserIdEventAt aliceId, props: select: :eventAt :userId
      .then (messages) ->
        assert.eq
          []
            {} eventAt: 1, userId: aliceId
            {} eventAt: 2, userId: aliceId
            {} eventAt: 3, userId: aliceId
          messages

    .tapTest "select: 'eventAt userId'" ->
      myAppMessage.byUserIdEventAt aliceId, props: select: "" eventAt userId
      .then (messages) ->
        assert.eq
          []
            {} eventAt: 1, userId: aliceId
            {} eventAt: 2, userId: aliceId
            {} eventAt: 3, userId: aliceId
          messages
