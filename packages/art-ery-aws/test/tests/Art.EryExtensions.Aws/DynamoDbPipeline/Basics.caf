import &StandardImport

myTable = MyTable = null
deleteTestTablesPromise =
registry = null
pipelines = null
setupWithMyTable = ->
  deleteTestTables()
  .then ->
    {pipelines} = registry = new PipelineRegistry
    {myTable} = class MyTable extends DynamoDbPipeline
      @registry registry
      @publicRequestTypes :get :create :update :delete :getAll :batchGet
      @addDatabaseFilters
        linkFilterVersion: 2
        fields:
          name:       "required string"
          email:      "required email"
          rank:       :number
          attributes: :array

      @publicHandlers
        throwServiceUnavailable: (request)->
          {numFailures} = request.props
          attemptCount = 0
          @_artEryToDynamoDbRequest
            request
            then: (params) =>
              attemptCount++
              if numFailures >= attemptCount
                # 4 means it'll fail all retries on the first call, but
                # will succeed in the second
                throw new Error "Service Unavailable"
              successfulOnAttempt: attemptCount

    {myCompoundKeyTable} = class MyCompoundKeyTable extends DynamoDbPipeline
      @registry registry
      @keyFields "userId/postId"
      @addDatabaseFilters
        linkFilterVersion: 2
        fields:
          user:   "link"
          post:   "link"

    Promise.all []
      myCompoundKeyTable._vivifyTable()
      myTable._vivifyTable()

suite:

  basic: ->
    setup setupWithMyTable

    test "create then get", ->
      myTable.create
        data:
          name: "John"
          email: "foo@bar.com"

      .then (data) ->
        assert.isString data.id
        assert.isNumber data.createdAt
        assert.isNumber data.updatedAt
        myTable.get key: data
        .then (getData) ->
          assert.eq getData, data

    test "number type can create and update factional valuyes" ->
      myTable.create
        data:
          name: "John"
          email: "foo@bar.com"
          rank: .25
      .then (record) ->
        assert.eq record.rank, .25  "" create
        myTable.get record.id

      .then (record) ->
        assert.eq record.rank, .25  "" create-get
        myTable.update key: record.id, data: rank: .75

      .then (record) ->
        assert.eq record.rank, .75  "" update
        myTable.get record.id

      .then (record) ->
        assert.eq record.rank, .75  "" update-get

    test "delete", ->
      createData = null

      myTable.create
        data:
          name: "John"
          email: "foo@bar.com"
          rank: 123
          attributes: ["adventurous", "charming"]

      .then (_createData) ->
        createData = _createData
        myTable.delete key: createData.id

      .then ->
        assert.rejects myTable.get key: createData.id

      .then (expectedError)->
        {response} = expectedError.info
        assert.eq response.status, missing
        "triggered catch"

    test "describeTable", ->
      myTable.dynamoDb.describeTable TableName: myTable.tableName
      .then ({Table}) ->
        assert.eq Table.AttributeDefinitions, [
          AttributeName: "id"
          AttributeType: "S"
        ]

  scanAndBatchGet: ->
    chainedTest ->
      setupWithMyTable()
      .then ->
        # delete all
        myTable.getAll()
        .then (users) ->
          each user in users
            myTable.delete user.id

    .thenTest "createX2 then scan" ->
      Promise.all []
        myTable.create data: name: :Alice email: :alice@gmail.com
        myTable.create data: name: :Bill  email: :bill@gmail.com
      .then -> myTable.getAll()
      .tap (users)->
        assert.eq 2 users.length
        assert.eq
          :Alice :Bill
          array user from users with user.name
          .sort()

    .thenTest "batchGet 2 records" (users) ->
      myTable.batchGet props: keys: array {id} in users with id
      .then (users2) ->
        assert.eq
          users.sort  (a, b) -> a.id.localeCompare b.id
          users2.sort (a, b) -> a.id.localeCompare b.id

  scan: ->
    setup ->
      setupWithMyTable()
      .then ->
        # delete all
        myTable.getAll()
        .then (users) ->
          each user in users
            myTable.delete user.id

    test "multiple pages" ->
      Promise.all []
        myTable.create data: name: :Alice email: :alice@gmail.com
        myTable.create data: name: :Bill  email: :bill@gmail.com
      .then -> myTable.getAll returnResponse: true props: limit: 1
      .then ({props:{lastEvaluatedKey},data: users})->
        assert.eq 1 users.length
        # log {lastEvaluatedKey, users}
        assert.isObject lastEvaluatedKey
        myTable.getAll returnResponse: true props: {} lastEvaluatedKey, limit: 1
        .then ({props:{lastEvaluatedKey2},data: users2})->
          # log {lastEvaluatedKey2, users2}
          assert.doesNotExist lastEvaluatedKey2
          assert.eq
            :Alice :Bill
            array user from compactFlatten [users, users2] with user.name
            .sort()



    # test "createX3 then scan all pages" ->
    #   Promise.all []
    #     myTable.create data: name: :Alice email: :alice@gmail.com
    #     myTable.create data: name: :Bill  email: :bill@gmail.com
    #     myTable.create data: name: :Craig email: :craig@gmail.com
    #   .then -> myTable.getAll returnResponse: true props: limit: 1
    #   .then (users)->
    #     assert.eq 1 users.length

  update: ->
    setup setupWithMyTable

    test "using keys", ->

      createData = null

      myTable.create
        data:
          name: "John"
          email: "foo@bar.com"
          rank: 123
          attributes: ["adventurous", "charming"]

      .then (createData) ->
        myTable.update
          key: createData.id
          data: rank: 456

        .then (updatedData)->
          myTable.get key: createData.id
          .then (data)->
            assert.eq data, merge createData, updatedData

    test "non-existant record fails with status: missing", ->
      assert.rejects myTable.update
        key: randomString()
        data: rank: 123

      .then (rejectsWith) ->
        assert.eq rejectsWith.info.response.status, missing

    test "with createOk rejected without originatedOnServer", ->
      assert.clientFailureNotAuthorized myTable.update
        props:
          createOk: true
          key: randomString()
          data: rank: 123

    test "non-existant record works with createOk and originatedOnServer", ->
      pipelines.myCompoundKeyTable.update
        returnResponseObject: true
        originatedOnServer: true
        props:
          createOk: true
          key: userId: :123 postId: :abc

      .then (response) ->
        assert.eq response.status, success

  primaryKey: ->
    test "no primaryKey defines no queries" ->
      {thing} = class Thing extends DynamoDbPipeline
        @registry registry
      assert.eq {}, thing.queries

    test "primaryKey :userId defines no queries" ->
      {thing} = class Thing extends DynamoDbPipeline
        @registry registry
        @primaryKey :userId
      assert.eq {}, thing.queries

    test "primaryKey :userId/postId defines correct queries" ->
      {thing} = class Thing extends DynamoDbPipeline
        @registry registry
        @primaryKey :userId/postId
      assert.eq
        :byUserId, :byUserIdDesc
        Object.keys thing.queries
        .sort()

  "compound primaryKey": ->
    myManyToManyTable = null
    chainedTest ->
      {myManyToManyTable} = class MyManyToManyTable extends DynamoDbPipeline
        @registry registry
        @primaryKey :userId/postId
        @publicRequestTypes :create :get :update :getAll :byUserId
        @addDatabaseFilters
          linkFilterVersion: 2
          fields:
            user: "required link"
            post: "required link"
            rank: :number

      myManyToManyTable._vivifyTable()

    .softTapTest
      "primaryKey defines the correct queries" ->
        assert.eq
          Object.keys myManyToManyTable.queries
          .sort()
          :byUserId :byUserIdDesc

      "primaryKey queries have correct keyFields" ->
        each query, queryName in myManyToManyTable.queries
          assert.eq
            query.options.keyFields
            [] :userId
            conext: {} queryName, query

    .thenTest
      "create", ->
        myManyToManyTable.create
          data:
            rank: 123
            userId: randomString()
            postId: randomString()

    .tapTest
      :get (data) ->
        assert.doesNotExist data.id
        myManyToManyTable.get key: data
        .then ({rank}) -> assert.eq rank, 123

      :update (data) ->
        myManyToManyTable.update key: data, data: merge data, rank: 456

      :getAfterUpdate (data) ->
        myManyToManyTable.get key: data
        .then ({rank}) -> assert.eq rank, 456

      :byUserId (data) ->
        myManyToManyTable.byUserId key: data.userId
        .then ([{rank}]) -> assert.eq rank, 456

    .thenTest "create fails with missing required field", ->

      assert.rejects myManyToManyTable.create
        data:
          rank:   123
          userId: randomString()

      .then (expectedError) ->
        assert.eq expectedError.info.response.status, clientFailure

  errors: ->
    setup setupWithMyTable
    test "Service Unavailable errors return valid response with status networkFailure" ->
      assert.rejects myTable.throwServiceUnavailable props: numFailures: 3
      .then ({status}) -> assert.eq status, networkFailure

    test "Service Unavailable errors are retried a limited number of times" ->
      myTable.throwServiceUnavailable props: numFailures: 2
      .then (rest) -> assert.eq rest, successfulOnAttempt: 3
