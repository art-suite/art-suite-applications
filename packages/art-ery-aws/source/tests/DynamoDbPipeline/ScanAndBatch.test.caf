import &StandardImport, &TestLib

chainedTest ->
  setupWithMyTable()
  .tap ({myTable}) ->
    # delete all
    myTable.getAll()
    .then (users) ->
      each user in users
        myTable.delete user.id

.thenTestMerged
  "createX2 then scan" ({myTable}) ->
    Promise.all []
      myTable.create data: name: :Alice email: :alice@gmail.com
      myTable.create data: name: :Bill  email: :bill@gmail.com

    .then -> myTable.getAll()
    .tap (users)->
      assert.eq 2 users.length
      assert.eq
        :Alice :Bill
        array user from users with user.name
        .sort()
    .then (users) -> {} users

  "batchGet 2 records" ({myTable, users}) ->
    myTable.batchGet props: keys: array {id} in users with id
    .then (users2) ->
      assert.eq
        users.sort  (a, b) -> a.id.localeCompare b.id
        users2.sort (a, b) -> a.id.localeCompare b.id

  "getAll with multiple pages" ({myTable}) ->
    myTable.getAll returnResponse: true props: limit: 1
    .then ({props:{lastEvaluatedKey}, data: users})->
      assert.eq 1 users.length

      assert.isObject lastEvaluatedKey
      myTable.getAll returnResponse: true props: {} lastEvaluatedKey, limit: 1
      .then ({props:{lastEvaluatedKey2}, data: users2})->
        assert.eq users2.length, 1

        assert.doesNotExist lastEvaluatedKey2
        assert.eq
          :Alice :Bill
          array user from compactFlatten [users, users2] with user.name
          .sort()
