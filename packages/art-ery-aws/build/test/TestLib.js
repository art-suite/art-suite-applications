"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Neptune", "DynamoDbPipeline", "Promise", "Error"], [global, require('art-standard-lib'), require('../..')], (Neptune, DynamoDbPipeline, Promise, Error) => {let myTable, MyTable, setupPromise, getMyTablePipeline, getMyTableClass, setupTestConfiguration, setupWithMyTable, setupWithMyTableEmptied, deleteTestTables; myTable = MyTable = null; setupPromise = null; return {getMyTablePipeline: getMyTablePipeline = function() {return myTable;}, getMyTableClass: getMyTableClass = function() {return MyTable;}, setupTestConfiguration: setupTestConfiguration = function() {return require('art-config').configure({artConfigName: "test", artConfig: {Art: {Aws: {credentials: {accessKeyId: "test-accessKeyId", secretAccessKey: "test-secretAccessKey"}, region: "us-east-1", dynamoDb: {endpoint: "http://localhost:8081"}}, Ery: {tableNamePrefix: "art-ery-aws-test."}}}});}, setupWithMyTable: setupWithMyTable = function() {setupTestConfiguration(); return setupPromise || (setupPromise = deleteTestTables().then(() => {let myCompoundKeyTable, MyCompoundKeyTable; Neptune.Art.Ery.PipelineRegistry._reset(); ({myTable} = MyTable = Caf.defClass(class MyTable extends DynamoDbPipeline {}, function(MyTable, classSuper, instanceSuper) {this.publicRequestTypes("get", "create", "update", "delete", "getAll", "batchGet"); this.addDatabaseFilters({linkFilterVersion: 2, fields: {name: "required string", email: "required email", rank: "number", attributes: "array"}}); this.publicHandlers({throwServiceUnavailable: function(request) {let numFailures, attemptCount; ({numFailures} = request.props); attemptCount = 0; return this._artEryToDynamoDbRequest(request, {then: (params) => {attemptCount++; if (numFailures >= attemptCount) {throw new Error("Service Unavailable");}; return {successfulOnAttempt: attemptCount};}});}});})); ({myCompoundKeyTable} = MyCompoundKeyTable = Caf.defClass(class MyCompoundKeyTable extends DynamoDbPipeline {}, function(MyCompoundKeyTable, classSuper, instanceSuper) {this.keyFields("userId/postId"); this.addDatabaseFilters({linkFilterVersion: 2, fields: {user: "link", post: "link"}});})); return Promise.all([myCompoundKeyTable._vivifyTable(), myTable._vivifyTable()]);}));}, setupWithMyTableEmptied: setupWithMyTableEmptied = function() {return setupWithMyTable().then(() => myTable.getAll().then((users) => Caf.each2(users, (user) => myTable.delete(user.id))));}, deleteTestTables: deleteTestTables = function() {let dynamoDb; return (dynamoDb = new (require('art-aws').DynamoDb)).listTables().then(({TableNames}) => Promise.all(Caf.array(TableNames, (table) => /art-ery-aws-test/.test(table) ? dynamoDb.deleteTable({TableName: table}) : undefined)));}};});});
//# sourceMappingURL=TestLib.js.map
