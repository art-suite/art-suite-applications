"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "DynamoDbPipeline", "assert", "Object", "chainedTest", "setupTestConfiguration", "randomString", "merge", "clientFailure"], [global, require('./StandardImport')], (describe, test, DynamoDbPipeline, assert, Object, chainedTest, setupTestConfiguration, randomString, merge, clientFailure) => {return describe({primaryKey: function() {test("no primaryKey defines no queries", () => {let thing, Thing; ({thing} = Thing = Caf.defClass(class Thing extends DynamoDbPipeline {})); return assert.eq({}, thing.queries);}); test("primaryKey :userId defines no queries", () => {let thing, Thing; ({thing} = Thing = Caf.defClass(class Thing extends DynamoDbPipeline {}, function(Thing, classSuper, instanceSuper) {this.primaryKey("userId");})); return assert.eq({}, thing.queries);}); return test("primaryKey :userId/postId defines correct queries", () => {let thing, Thing; ({thing} = Thing = Caf.defClass(class Thing extends DynamoDbPipeline {}, function(Thing, classSuper, instanceSuper) {this.primaryKey("userId/postId");})); return assert.eq(["byUserId", "byUserIdDesc"], Object.keys(thing.queries).sort());});}, "compound primaryKey": function() {let myManyToManyTable; myManyToManyTable = null; return chainedTest(() => {let MyManyToManyTable; setupTestConfiguration(); ({myManyToManyTable} = MyManyToManyTable = Caf.defClass(class MyManyToManyTable extends DynamoDbPipeline {}, function(MyManyToManyTable, classSuper, instanceSuper) {this.primaryKey("userId/postId"); this.publicRequestTypes("create", "get", "update", "getAll", "byUserId"); this.addDatabaseFilters({linkFilterVersion: 2, fields: {user: "required link", post: "required link", rank: "number"}});})); return myManyToManyTable._vivifyTable();}).softTapTest(["primaryKey defines the correct queries", () => assert.eq(Object.keys(myManyToManyTable.queries).sort(), ["byUserId", "byUserIdDesc"])], ["primaryKey queries have correct keyFields", () => Caf.each2(myManyToManyTable.queries, (query, queryName) => assert.eq(query.options.keyFields, ["userId"], {conext: {queryName, query}}))]).thenTest("create", () => myManyToManyTable.create({data: {rank: 123, userId: randomString(), postId: randomString()}})).tapTest(["get", (data) => {assert.doesNotExist(data.id); return myManyToManyTable.get({key: data}).then(({rank}) => assert.eq(rank, 123));}], ["update", (data) => myManyToManyTable.update({key: data, data: merge(data, {rank: 456})})], ["getAfterUpdate", (data) => myManyToManyTable.get({key: data}).then(({rank}) => assert.eq(rank, 456))], ["byUserId", (data) => myManyToManyTable.byUserId({key: data.userId}).then(([{rank}]) => assert.eq(rank, 456))]).thenTest("create fails with missing required field", () => assert.rejects(myManyToManyTable.create({data: {rank: 123, userId: randomString()}})).then((expectedError) => assert.eq(expectedError.info.response.status, clientFailure)));}});});});
//# sourceMappingURL=PrimaryKeyTests.js.map
