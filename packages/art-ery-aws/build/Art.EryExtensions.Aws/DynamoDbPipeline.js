"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["log", "Promise", "timeout", "intRand", "networkFailure"], [global, require('./StandardImport')], (log, Promise, timeout, intRand, networkFailure) => {let DynamoDbPipeline; return DynamoDbPipeline = Caf.defClass(class DynamoDbPipeline extends require('./DynamoDbPipelineOldCoffee') {}, function(DynamoDbPipeline, classSuper, instanceSuper) {let isServiceUnavailableError, retryIfServiceUnavailable; this.prototype._createTable = function() {return this.dynamoDb.createTable(this.streamlinedCreateTableParams).catch((e) => {log.error(`DynamoDbPipelineOldCoffee#_createTable ${Caf.toString(this.tableName)} FAILED`, e); return (() => {throw e;})();});}; isServiceUnavailableError = function(error) {return error.message.match(/Service *Unavailable/i);}; this.prototype._retryIfServiceUnavailable = retryIfServiceUnavailable = function(request, action, retriesRemaining = 2) {return Promise.then(() => action()).catch((error) => isServiceUnavailableError(error) ? (retriesRemaining > 0) ? timeout(10 + intRand(20)).then(() => retryIfServiceUnavailable(request, action, retriesRemaining - 1)) : request ? request.toResponse(networkFailure).then((response) => response.toPromise()) : (() => {throw error;})() : (() => {throw error;})());};});});});
//# sourceMappingURL=DynamoDbPipeline.js.map
