// Generated by CoffeeScript 1.12.7
(function() {
  var ArtAws, Pipeline, Promise, Sqs, SqsPipeline, defineModule, log, merge, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, Promise = ref.Promise, log = ref.log, merge = ref.merge;

  Pipeline = require('art-ery').Pipeline;

  Sqs = (ArtAws = require('art-aws')).Sqs;

  defineModule(module, SqsPipeline = (function(superClass) {
    extend(SqsPipeline, superClass);

    function SqsPipeline() {
      return SqsPipeline.__super__.constructor.apply(this, arguments);
    }

    SqsPipeline.abstractClass();

    SqsPipeline.getter({
      sqs: function() {
        return Sqs.singleton;
      }
    });

    SqsPipeline.handlers({
      sendMessage: function(arg) {
        var body;
        body = arg.body;
        return this.sqs.sendMessage({
          queue: this.tableName,
          body: JSON.stringify(body)
        });
      },
      receiveMessage: function(arg) {
        var data, visibilityTimeout, wait;
        data = arg.data;
        visibilityTimeout = data.visibilityTimeout, wait = data.wait;
        return this.sqs.receiveMessage({
          queue: this.tableName
        }, {
          limit: 1,
          visibilityTimeout: visibilityTimeout,
          wait: wait
        }).then(function(messages) {
          return messages[0];
        });
      },
      receiveMessages: function(arg) {
        var data, limit, ref1, visibilityTimeout, wait;
        data = arg.data;
        limit = (ref1 = data.limit) != null ? ref1 : 10, visibilityTimeout = data.visibilityTimeout, wait = data.wait;
        return this.sqs.receiveMessage({
          queue: this.tableName
        }, {
          limit: limit,
          visibilityTimeout: visibilityTimeout,
          wait: wait
        });
      },
      deleteMessage: function(arg) {
        var key;
        key = arg.key;
        return this.sqs.deleteMessage({
          queue: this.tableName,
          receiptHandle: key
        });
      }
    });

    return SqsPipeline;

  })(Pipeline));

}).call(this);

//# sourceMappingURL=SqsPipeline.js.map
