// Generated by CoffeeScript 1.12.7
(function() {
  var AtomicBase, Color, abs, bound, colorFloatEq, colorRegExp, float32Eq, float32Eq0, hex16ColorRegExp, hex16GreyColorRegExp, hex256ColorRegExp, hex256GreyColorRegExp, inspect, isNumber, isString, log, max, min, modulo, object, pad, parseRGBColorComponent, ref, rgbColorRegExp, rgbaColorRegExp, round,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AtomicBase = require('./Base');

  ref = require('art-standard-lib'), inspect = ref.inspect, bound = ref.bound, modulo = ref.modulo, pad = ref.pad, min = ref.min, max = ref.max, abs = ref.abs, float32Eq = ref.float32Eq, isString = ref.isString, log = ref.log, hex16ColorRegExp = ref.hex16ColorRegExp, hex256ColorRegExp = ref.hex256ColorRegExp, hex16GreyColorRegExp = ref.hex16GreyColorRegExp, hex256GreyColorRegExp = ref.hex256GreyColorRegExp, rgbColorRegExp = ref.rgbColorRegExp, rgbaColorRegExp = ref.rgbaColorRegExp, colorRegExp = ref.colorRegExp, float32Eq0 = ref.float32Eq0, object = ref.object, isNumber = ref.isNumber, round = ref.round;

  colorFloatEq = float32Eq;

  parseRGBColorComponent = function(str) {
    var percentIndex;
    if ((percentIndex = str.indexOf('%')) !== -1) {
      return (str.slice(0, percentIndex) | 0) * .01;
    } else {
      return (str | 0) * 1 / 255;
    }
  };

  module.exports = Color = (function(superClass) {
    var colorNames, colorNamesMap, defaultAlpha, hexString, hslColor, isColor, k, parseCache, rgbColor, v, withSat, zeroString;

    extend(Color, superClass);

    function Color() {
      return Color.__super__.constructor.apply(this, arguments);
    }

    Color.defineAtomicClass({
      fieldNames: "r g b a",
      constructorFunctionName: "rgbColor"
    });

    Color.isColor = isColor = function(c) {
      return !!((c != null ? c.constructor : void 0) === Color);
    };

    Color.isColorOrColorString = function(c) {
      return isColor(c) || (isString(c) && colorRegExp.test(c));
    };

    Color.colorNames = colorNames = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];

    Color.colorNamesMap = colorNamesMap = {
      transparent: "rgba(0,0,0,0)",
      aliceblue: "#f0f8ff",
      antiquewhite: "#faebd7",
      aqua: "#00ffff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000000",
      blanchedalmond: "#ffebcd",
      blue: "#0000ff",
      blueviolet: "#8a2be2",
      brown: "#a52a2a",
      burlywood: "#deb887",
      cadetblue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerblue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#00ffff",
      darkblue: "#00008b",
      darkcyan: "#008b8b",
      darkgoldenrod: "#b8860b",
      darkgrey: "#a9a9a9",
      darkgray: "#a9a9a9",
      darkgreen: "#006400",
      darkkhaki: "#bdb76b",
      darkmagenta: "#8b008b",
      darkolivegreen: "#556b2f",
      darkorange: "#ff8c00",
      darkorchid: "#9932cc",
      darkred: "#8b0000",
      darksalmon: "#e9967a",
      darkseagreen: "#8fbc8f",
      darkslateblue: "#483d8b",
      darkslategrey: "#2f4f4f",
      darkslategray: "#2f4f4f",
      darkturquoise: "#00ced1",
      darkviolet: "#9400d3",
      deeppink: "#ff1493",
      deepskyblue: "#00bfff",
      dimgrey: "#696969",
      dimgray: "#696969",
      dodgerblue: "#1e90ff",
      firebrick: "#b22222",
      floralwhite: "#fffaf0",
      forestgreen: "#228b22",
      fuchsia: "#ff00ff",
      gainsboro: "#dcdcdc",
      ghostwhite: "#f8f8ff",
      gold: "#ffd700",
      goldenrod: "#daa520",
      grey: "#808080",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#adff2f",
      honeydew: "#f0fff0",
      hotpink: "#ff69b4",
      indianred: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavender: "#e6e6fa",
      lavenderblush: "#fff0f5",
      lawngreen: "#7cfc00",
      lemonchiffon: "#fffacd",
      lightblue: "#add8e6",
      lightcoral: "#f08080",
      lightcyan: "#e0ffff",
      lightgoldenrodyellow: "#fafad2",
      lightgrey: "#d3d3d3",
      lightgray: "#d3d3d3",
      lightgreen: "#90ee90",
      lightpink: "#ffb6c1",
      lightsalmon: "#ffa07a",
      lightseagreen: "#20b2aa",
      lightskyblue: "#87cefa",
      lightslategrey: "#778899",
      lightslategray: "#778899",
      lightsteelblue: "#b0c4de",
      lightyellow: "#ffffe0",
      lime: "#00ff00",
      limegreen: "#32cd32",
      linen: "#faf0e6",
      magenta: "#ff00ff",
      maroon: "#800000",
      mediumaquamarine: "#66cdaa",
      mediumblue: "#0000cd",
      mediumorchid: "#ba55d3",
      mediumpurple: "#9370db",
      mediumseagreen: "#3cb371",
      mediumslateblue: "#7b68ee",
      mediumspringgreen: "#00fa9a",
      mediumturquoise: "#48d1cc",
      mediumvioletred: "#c71585",
      midnightblue: "#191970",
      mintcream: "#f5fffa",
      mistyrose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajowhite: "#ffdead",
      navy: "#000080",
      oldlace: "#fdf5e6",
      olive: "#808000",
      olivedrab: "#6b8e23",
      orange: "#ffa500",
      orangered: "#ff4500",
      orchid: "#da70d6",
      palegoldenrod: "#eee8aa",
      palegreen: "#98fb98",
      paleturquoise: "#afeeee",
      palevioletred: "#db7093",
      papayawhip: "#ffefd5",
      peachpuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderblue: "#b0e0e6",
      purple: "#800080",
      red: "#ff0000",
      rosybrown: "#bc8f8f",
      royalblue: "#4169e1",
      saddlebrown: "#8b4513",
      salmon: "#fa8072",
      sandybrown: "#f4a460",
      seagreen: "#2e8b57",
      seashell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      skyblue: "#87ceeb",
      slateblue: "#6a5acd",
      slategrey: "#708090",
      slategray: "#708090",
      snow: "#fffafa",
      springgreen: "#00ff7f",
      steelblue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#ffffff",
      whitesmoke: "#f5f5f5",
      yellow: "#ffff00",
      yellowgreen: "#9acd32"
    };

    Color.parseCache = parseCache = {};

    defaultAlpha = 1;

    Color.rgbColor = rgbColor = function(a, b, c, d) {
      var clr;
      if ((b == null) && isColor(a)) {
        return a;
      }
      if (isString(a) && (clr = colorNamesMap[a] || parseCache[a])) {
        return clr;
      }
      return new Color(a, b, c, d);
    };

    Color.rgb256Color = function(a, b, c, d) {
      var clr, out;
      if ((b == null) && isColor(a)) {
        return a;
      }
      if (isString(a) && (clr = colorNamesMap[a] || parseCache[a])) {
        return clr;
      }
      defaultAlpha = 255;
      out = new Color(a, b, c, d);
      defaultAlpha = 1;
      out.r /= 255;
      out.g /= 255;
      out.b /= 255;
      out.a /= 255;
      return out;
    };

    Color.newColor = rgbColor;

    Color.color = function(a, b, c, d) {
      log.error("Atomic.color DEPRICATED. Use rgbColor.");
      return rgbColor(a, b, c, d);
    };

    Color.hslColor = hslColor = function(h, s, l, a) {
      var f, p, phase, q, t;
      if (a == null) {
        a = 1;
      }
      if (isColor(h)) {
        return h;
      }
      h = modulo(h, 1);
      phase = h * 6 | 0;
      f = h * 6 - phase;
      p = l * (1 - s);
      q = l * (1 - f * s);
      t = l * (1 - (1 - f) * s);
      h = colorFloatEq(h, 1) ? 1 : h % 1;
      switch (phase % 6) {
        case 0:
          return new Color(l, t, p, a, h, s, l);
        case 1:
          return new Color(q, l, p, a, h, s, l);
        case 2:
          return new Color(p, l, t, a, h, s, l);
        case 3:
          return new Color(p, q, l, a, h, s, l);
        case 4:
          return new Color(t, p, l, a, h, s, l);
        case 5:
          return new Color(l, p, q, a, h, s, l);
      }
    };

    Color.hsl2Rgb = function(h, s, l) {
      var f, p, phase, q, t;
      h = modulo(h, 1);
      phase = h * 6 | 0;
      f = h * 6 - phase;
      p = l * (1 - s);
      q = l * (1 - f * s);
      t = l * (1 - (1 - f) * s);
      h = colorFloatEq(h, 1) ? 1 : h % 1;
      switch (phase % 6) {
        case 0:
          return [l, t, p];
        case 1:
          return [q, l, p];
        case 2:
          return [p, l, t];
        case 3:
          return [p, q, l];
        case 4:
          return [t, p, l];
        case 5:
          return [l, p, q];
      }
    };

    Color.parse = function(string, existing) {
      if (existing == null) {
        existing = null;
      }
      if (existing) {
        throw new Error("existing feature is no longer supported");
      }
      return new Artomic.Color(string);
    };

    Color.prototype._initFromString = function(string) {
      var a, b, clr, elements, g, lcString, match, r, x;
      this.initProperties();
      parseCache[string] = this;
      if (match = hex16ColorRegExp.exec(string)) {
        x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
        if (!a) {
          this._htmlColorString = string;
        }
        a || (a = "f");
        this.r = parseInt(r, 16) / 15;
        this.g = parseInt(g, 16) / 15;
        this.b = parseInt(b, 16) / 15;
        return this.a = parseInt(a, 16) / 15;
      } else if (match = hex16GreyColorRegExp.exec(string)) {
        this.r = this.g = this.b = parseInt(match[1], 16) / 15;
        return this.a = 1;
      } else if (match = hex256GreyColorRegExp.exec(string)) {
        this.r = this.g = this.b = parseInt(match[1], 16) / 255;
        return this.a = 1;
      } else if (match = hex256ColorRegExp.exec(string)) {
        x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
        if (!a) {
          this._htmlColorString = string;
        }
        a || (a = "ff");
        this.r = parseInt(r, 16) / 255;
        this.g = parseInt(g, 16) / 255;
        this.b = parseInt(b, 16) / 255;
        return this.a = parseInt(a, 16) / 255;
      } else if (elements = rgbColorRegExp.exec(string)) {
        this._htmlColorString = string;
        this.a = 1;
        this.r = parseRGBColorComponent(elements[1]);
        this.g = parseRGBColorComponent(elements[2]);
        return this.b = parseRGBColorComponent(elements[3]);
      } else if (elements = rgbaColorRegExp.exec(string)) {
        this._htmlColorString = string;
        this.r = parseRGBColorComponent(elements[1]);
        this.g = parseRGBColorComponent(elements[2]);
        this.b = parseRGBColorComponent(elements[3]);
        return this.a = elements[4] - 0;
      } else if (/^[a-z]+$/i.test(lcString = string.toLowerCase())) {
        if (!(clr = colorNamesMap[lcString])) {
          return log.warn(this.parseError = "WARNING: Color.parse failure. Unknown rgbColor name: " + (inspect(string)));
        }
        this._htmlColorString = clr._htmlColorString;
        this.r = clr.r;
        this.g = clr.g;
        this.b = clr.b;
        return this.a = clr.a;
      } else if (/^([a-f0-9]{3,4}|[a-f0-9]{6}|[a-f0-9]{8})$/i.test(string)) {
        return this._initFromString("#" + string);
      } else {
        return log.warn(this.parseError = "WARNING: Color.parse failure for " + (inspect(string)));
      }
    };

    Color.prototype.initProperties = function() {
      this.r = this.g = this.b = 0;
      this.a = defaultAlpha;
      this._hue = this._saturation = this._lightness = null;
      this.parseError = null;
      return this._htmlColorString = null;
    };

    Color.prototype._init = function(a, b, c, d, h, s, l) {
      this.initProperties();
      if (h != null) {
        this._hue = h - 0;
      }
      if (s != null) {
        this._saturation = s - 0;
      }
      if (l != null) {
        this._lightness = l - 0;
      }
      if (a == null) {
        return this.r = this.g = this.b = 0;
      } else if (b == null) {
        return this.r = this.g = this.b = a - 0;
      } else if (c != null) {
        this.r = a - 0;
        this.g = b - 0;
        this.b = c - 0;
        if (d != null) {
          return this.a = d - 0;
        }
      }
    };

    Color.prototype.eq = function(_a, _b, _c, _d) {
      var a, b, g, h, h2, l, l2, r, s, s2;
      switch (false) {
        case _a !== this:
          return true;
        case !(_a == null):
          return false;
        case !isNumber(_a):
          return (_a === this.r) && (_b === this.g) && (_c === this.b) && ((_d != null ? _d : 1) === this.a);
        case _a.constructor !== Color:
          r = _a.r, g = _a.g, b = _a.b, a = _a.a;
          h = _a._hue;
          s = _a._saturation;
          l = _a._lightness;
          h2 = this._hue;
          s2 = this._saturation;
          l2 = this._lightness;
          return (r === this.r) && (g === this.g) && (b === this.b) && (a === this.a) && ((h == null) || (h2 == null) || h === h2) && ((s == null) || (s2 == null) || s === s2) && ((l == null) || (l2 == null) || l === l2);
        default:
          return false;
      }
    };

    Color.prototype.interpolate = function(toColor, p) {
      var a, b, g, oneMinusP, r, ref1;
      ref1 = this, r = ref1.r, g = ref1.g, b = ref1.b, a = ref1.a;
      toColor = rgbColor(toColor);
      if (float32Eq0(a)) {
        r = toColor.r, g = toColor.g, b = toColor.b;
      }
      if (float32Eq0(toColor.a)) {
        toColor = this.withAlpha(0);
      }
      oneMinusP = 1 - p;
      return new Color(toColor.r * p + r * oneMinusP, toColor.g * p + g * oneMinusP, toColor.b * p + b * oneMinusP, toColor.a * p + a * oneMinusP);
    };

    Color.prototype.blend = function(color, amount) {
      var a, b, g, r, ref1;
      color = rgbColor(color);
      ref1 = this, r = ref1.r, g = ref1.g, b = ref1.b, a = ref1.a;
      switch (false) {
        case amount == null:
          return new Color((color.r - r) * amount + r, (color.g - g) * amount + g, (color.b - b) * amount + b, (color.a - a) * amount + a);
        case !colorFloatEq(color.a, 1):
          return color;
        case !colorFloatEq(color.a, 0):
          return this;
        default:
          amount = color.a;
          return new Color((color.r - r) * amount + r, (color.g - g) * amount + g, (color.b - b) * amount + b, (1 - a) * amount + a);
      }
    };

    Color.prototype.withAlpha = function(a) {
      return new Color(this.r, this.g, this.b, a);
    };

    Color.prototype.withLightness = function(v) {
      return hslColor(this.h, this.s, v, this.a);
    };

    Color.prototype.withHue = function(v) {
      return hslColor(v, this.s, this.l, this.a);
    };

    Color.prototype.withSimilarHue = function(similarToHue, hueSegments) {
      var hueOffset, hueVarianceRange, roundedTargetHue;
      if (hueSegments == null) {
        hueSegments = 3 * 2 * 2;
      }
      if (similarToHue !== Number) {
        similarToHue = rgbColor(similarToHue).h;
      }
      roundedTargetHue = round(similarToHue, hueVarianceRange = 1 / hueSegments);
      hueOffset = this.h % hueVarianceRange;
      if (hueVarianceRange / 2 < hueOffset) {
        hueOffset -= hueVarianceRange;
      }
      return hslColor(roundedTargetHue + hueOffset, this.s, this.l, this.a);
    };

    Color.prototype.withHueShift = function(amount) {
      return hslColor(this.h + amount, this.s, this.l, this.a);
    };

    Color.prototype.withSat = withSat = function(v) {
      return hslColor(this.h, v, this.l, this.a);
    };

    Color.prototype.withSaturation = withSat;

    Color.prototype.withScaledAlpha = function(s) {
      return rgbColor(this.r, this.g, this.b, this.a * s);
    };

    Color.prototype.withScaledLightness = function(s) {
      return hslColor(this.h, this.s, s * this.l, this.a);
    };

    Color.prototype.withScaledSaturation = function(s) {
      return hslColor(this.h, s * this.s, this.l, this.a);
    };

    Color.prototype.withScaledLAndS = function(l, s) {
      return hslColor(this.h, s * this.s, l * this.l, this.a);
    };

    Color.prototype.withChannel = function(c, v) {
      switch (c) {
        case "r":
        case "red":
          return new Color(v, this.g, this.b, this.a);
        case "g":
        case "green":
          return new Color(this.r, v, this.b, this.a);
        case "b":
        case "blue":
          return new Color(this.r, this.g, v, this.a);
        case "h":
        case "hue":
          return hslColor(v, this.s, this.l, this.a);
        case "s":
        case "sat":
        case "saturation":
          return hslColor(this.h, v, this.l, this.a);
        case "l":
        case "lightness":
          return this.withLightness(v);
        case "a":
        case "alpha":
          return this.withAlpha(v);
        default:
          throw new Error("invalid channel: " + (inspect(c)));
      }
    };

    Color.prototype.withChannels = function(c) {
      var a, b, g, h, l, r, s;
      if (c.h || c.s || c.l) {
        h = c.h != null ? c.h : this.h;
        s = c.s != null ? c.s : this.s;
        l = c.l != null ? c.l : this.l;
        a = c.a != null ? c.a : this.a;
        return hslColor(h, s, l, a);
      } else {
        r = c.r != null ? c.r : this.r;
        g = c.g != null ? c.g : this.g;
        b = c.b != null ? c.b : this.b;
        a = c.a != null ? c.a : this.a;
        return new Color(r, g, b, a);
      }
    };

    zeroString = "0";

    hexString = function(number, length) {
      if (length == null) {
        length = 2;
      }
      return pad(number.toString(16), length, zeroString, true);
    };

    Color.getter({
      inspectedObjects: function() {
        return this;
      },
      arrayRGB: function() {
        return [this.r, this.g, this.b];
      },
      arrayRgb: function() {
        return [this.r, this.g, this.b];
      },
      arrayHsl: function() {
        return this._computeHsl() && [this._hue, this._saturation, this._lightness];
      },
      rgbSum: function() {
        return this.r + this.g + this.b;
      },
      rgbSquaredSum: function() {
        return this.r * this.r + this.g * this.g + this.b * this.b;
      },
      clamped: function() {
        return new Color(bound(0, this.r, 1), bound(0, this.g, 1), bound(0, this.b, 1), bound(0, this.a, 1));
      },
      r256: function() {
        return bound(0, Math.round(this.r * 255), 255);
      },
      g256: function() {
        return bound(0, Math.round(this.g * 255), 255);
      },
      b256: function() {
        return bound(0, Math.round(this.b * 255), 255);
      },
      a256: function() {
        return bound(0, Math.round(this.a * 255), 255);
      },
      r16: function() {
        return bound(0, Math.round(this.r * 15), 15);
      },
      g16: function() {
        return bound(0, Math.round(this.g * 15), 15);
      },
      b16: function() {
        return bound(0, Math.round(this.b * 15), 15);
      },
      a16: function() {
        return bound(0, Math.round(this.a * 15), 15);
      },
      h256: function() {
        return bound(0, Math.round(this.h * 255), 255);
      },
      s256: function() {
        return bound(0, Math.round(this.s * 255), 255);
      },
      b256: function() {
        return bound(0, Math.round(this.b * 255), 255);
      },
      rClamped: function() {
        return bound(0, this.r, 1);
      },
      gClamped: function() {
        return bound(0, this.g, 1);
      },
      bClamped: function() {
        return bound(0, this.b, 1);
      },
      aClamped: function() {
        return bound(0, this.a, 1);
      },
      premultiplied: function() {
        return new Color(this.r * this.a, this.g * this.a, this.b * this.a, this.a);
      },
      demultiplied: function() {
        return new Color(this.r / this.a, this.g / this.a, this.b / this.a, this.a);
      },
      cssString: function() {
        var a;
        a = this.aClamped;
        return "rgba(" + [this.r256, this.g256, this.b256, a.toFixed(3).replace(/\.?0+$/, '')].join(', ') + ")";
      },
      rgbaString: function() {
        return "rgbColor(" + [this.r256, this.g256, this.b256, this.a256].join('/255, ') + "/255)";
      },
      hexString: function() {
        return "#" + this.rawHexString;
      },
      rgbaHexString: function() {
        return "#" + this.getRawRgbaHexString();
      },
      hex16String: function() {
        return "#" + hexString(this.r16, 1) + hexString(this.g16, 1) + hexString(this.b16, 1);
      },
      rgbaHex16String: function() {
        return this.hex16String + hexString(this.a16, 1);
      },
      hslHexString: function() {
        return "#" + hexString(this.h256) + hexString(this.s256) + hexString(this.b256);
      },
      autoRgbaHexString: function() {
        if (colorFloatEq(1, this.a)) {
          return this.getHexString();
        } else {
          return this.rgbaHexString;
        }
      },
      rawHexString: function() {
        return hexString(this.r256) + hexString(this.g256) + hexString(this.b256);
      },
      rawRgbaHexString: function() {
        return this.rawHexString + hexString(this.a256);
      }
    });

    Color.prototype.inspect = function() {
      var a;
      a = colorFloatEq(1, this.a) ? this.hexString : this.rgbaHexString;
      return "rgbColor('" + a + "')";
    };

    Color.prototype.toString = function() {
      return this._htmlColorString || (this._htmlColorString = colorFloatEq(1, this.a) ? this.getHexString() : this.getCssString());
    };

    Color.prototype.getHueDelta = function(c) {
      var d;
      d = this.hue - c.hue;
      if (d < -.5) {
        return d + 1;
      } else if (d > .5) {
        return d - 1;
      } else {
        return d;
      }
    };

    Color.prototype.getHueDifference = function(c) {
      return Math.abs(this.getHueDelta(c));
    };

    Color.getter({
      plainObjects: function() {
        if (this.a < 1) {
          return this.rgbaHexString;
        } else {
          return this.hexString;
        }
      },
      inspectedObjectInitializer: function() {
        return "'" + this.autoRgbaHexString + "'";
      }
    });

    Color.getter({
      h: function() {
        return this._hue != null ? this._hue : this._hue = this._computeHsl() && this._hue;
      },
      s: function() {
        return this._saturation != null ? this._saturation : this._saturation = this._computeHsl() && this._saturation;
      },
      l: function() {
        return this._lightness != null ? this._lightness : this._lightness = this._computeHsl() && this._lightness;
      },
      inverseL: function() {
        return 1 - this.l;
      },
      inverseS: function() {
        return 1 - this.s;
      },
      inverseH: function() {
        return 1 - this.h;
      },
      hue: function() {
        return this._hue != null ? this._hue : this._hue = this._computeHsl() && this._hue;
      },
      sat: function() {
        return this._saturation != null ? this._saturation : this._saturation = this._computeHsl() && this._saturation;
      },
      lit: function() {
        return this._lightness != null ? this._lightness : this._lightness = this._computeHsl() && this._lightness;
      },
      saturation: function() {
        return this._saturation != null ? this._saturation : this._saturation = this._computeHsl() && this._saturation;
      },
      lightness: function() {
        return this._lightness != null ? this._lightness : this._lightness = this._computeHsl() && this._lightness;
      },
      perceptualLightness: function() {
        var b, bWeight, bWeighted, g, gWeight, gWeighted, r, rWeight, rWeighted, ref1;
        ref1 = this, r = ref1.r, g = ref1.g, b = ref1.b;
        rWeighted = r * (rWeight = .7);
        gWeighted = g * (gWeight = .8);
        bWeighted = b * (bWeight = .3);
        if (gWeighted >= rWeighted && gWeighted >= bWeighted) {
          return gWeighted + (r + b) * .5 * (1 - gWeight);
        } else if (bWeighted >= rWeighted && bWeighted >= gWeighted) {
          return bWeighted + (r + g) * .5 * (1 - bWeight);
        } else {
          return rWeighted + (g + b) * .5 * (1 - rWeight);
        }
      },
      perceptualSaturation: function() {
        return Math.pow(this.perceptualLightness, 1 / 3) * this.saturation;
      },
      satLightness: function() {
        return (2 - this._saturation) * this._lightness * .5;
      }
    });

    Color.prototype._computeHsl = function() {
      var b, delta, g, maxRgb, minRgb, r, ref1;
      if (this._hue != null) {
        return true;
      }
      ref1 = this, r = ref1.r, g = ref1.g, b = ref1.b;
      maxRgb = this._lightness = max(r, g, b);
      minRgb = min(r, g, b);
      this._hue = (function() {
        if (maxRgb === minRgb) {
          return this._saturation = 0;
        } else {
          this._saturation = 1 - (minRgb / maxRgb);
          delta = maxRgb - minRgb;
          switch (maxRgb) {
            case r:
              return (g - b) / delta + (g >= b ? 0 : 6);
            case g:
              return (b - r) / delta + 2;
            case b:
              return (r - g) / delta + 4;
          }
        }
      }).call(this);
      this._hue /= 6;
      return true;
    };

    for (k in colorNamesMap) {
      v = colorNamesMap[k];
      colorNamesMap[k] = rgbColor(v);
    }

    Color.namedValues = colorNamesMap;

    return Color;

  })(AtomicBase);

}).call(this);

//# sourceMappingURL=Color.js.map
