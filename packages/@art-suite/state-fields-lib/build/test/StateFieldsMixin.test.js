"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "StateFieldsMixin", "BaseClass", "assert", "chainedTest"], [global, require('./StandardImport')], (describe, test, StateFieldsMixin, BaseClass, assert, chainedTest) => {return describe({StateFieldsMixin: function() {test("basic mixin", () => {let MyClass; return MyClass = Caf.defClass(class MyClass extends StateFieldsMixin(BaseClass) {});}); return test("stateFields", () => {let MyClass; MyClass = Caf.defClass(class MyClass extends StateFieldsMixin(BaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.stateFields({name: "aliceDefault"});}); return assert.eq(MyClass.getStateFields(), {name: "aliceDefault"});});}, actions: function() {return chainedTest("createInstance", () => {let MyClass; return new (MyClass = Caf.defClass(class MyClass extends StateFieldsMixin(BaseClass) {constructor() {super(...arguments); this._state = Caf.object(this.getStateFields(), (v, k) => v);};}, function(MyClass, classSuper, instanceSuper) {this.stateFields({name: "aliceDefault", loggedIn: false}); this.getter("state"); this.prototype.setState = function(fieldName, value) {return this._state[fieldName] = value;};}));}).tapTest("defaults", (myClass) => assert.eq(myClass.state, {name: "aliceDefault", loggedIn: false})).tapTest("getter", (myClass) => assert.eq(myClass.name, "aliceDefault")).tapTest("setter", (myClass) => {let newName; myClass.name = newName = "bob"; return assert.eq(myClass.name, newName);}).tapTest("reset", (myClass) => {myClass.resetName(); return assert.eq(myClass.name, "aliceDefault");}).tapTest("clear", (myClass) => {myClass.clearName(); return assert.eq(myClass.name, null);}).tapTest("trigger", (myClass) => {myClass.triggerLoggedIn(); return assert.eq(myClass.state.loggedIn, true);}).tapTest("toggle", (myClass) => {myClass.toggleLoggedIn(); return assert.eq(myClass.state.loggedIn, false);});}});});});
//# sourceMappingURL=StateFieldsMixin.test.js.map
