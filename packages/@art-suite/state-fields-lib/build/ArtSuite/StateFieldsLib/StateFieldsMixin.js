"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["lowerCamelCase"], [global, require('art-standard-lib')], (lowerCamelCase) => {return function(superClass) {let StateFieldsMixinCaf; return StateFieldsMixinCaf = Caf.defClass(class StateFieldsMixinCaf extends superClass {}, function(StateFieldsMixinCaf, classSuper, instanceSuper) {let sf; this.extendableProperty({stateFields: {}}); this.stateFields = sf = function(fields) {this.extendStateFields(fields); return Caf.each2(fields, (initialValue, field) => {let defaultSetValue, clearValue; defaultSetValue = initialValue; clearValue = null; this.addGetter(field, function() {return this.state[field];}); this.prototype[lowerCamelCase(`reset ${Caf.toString(field)}`)] = function() {return this.setState(field, defaultSetValue);}; if (initialValue === true || initialValue === false) {clearValue = false; defaultSetValue = true; this.addSetter(field, function(v) {return this.setState(field, !!v);}); this.prototype[lowerCamelCase(`trigger ${Caf.toString(field)}`)] = function() {return this.setState(field, true);}; this.prototype[lowerCamelCase(`toggle ${Caf.toString(field)}`)] = function() {return this.setState(field, !this.state[field]);};} else {this.addSetter(field, function(v) {return this.setState(field, v);});}; return this.prototype[lowerCamelCase(`clear ${Caf.toString(field)}`)] = function() {return this.setState(field, clearValue);};});}; this.stateField = sf;});};});});
//# sourceMappingURL=StateFieldsMixin.js.map
