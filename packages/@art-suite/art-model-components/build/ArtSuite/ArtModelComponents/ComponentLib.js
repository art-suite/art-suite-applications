"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Validator", "Function", "String", "compactFlatten", "ErrorWithInfo", "isPlainObject", "isString", "Object"], [global, require('art-standard-lib'), require('art-validation')], (Validator, Function, String, compactFlatten, ErrorWithInfo, isPlainObject, isString, Object) => {let subscriptionFormPatterns, subscriptionValidator; subscriptionFormPatterns = {global: /[_a-z][._a-z0-9]*/gi, modelKey: /^([_a-z0-9]+)\.([_a-z0-9]+)/i}; subscriptionValidator = new Validator({stateField: ["present", "string"], key: {}}, {model: "required", validate: function(v) {return Caf.is(v, Function) || Caf.is(v, String);}}); return {parseSubscriptions: function(subscriptions) {let out, add; out = {}; add = ({stateField, model, key}) => {if (out[stateField]) {throw new ErrorWithInfo(`duplicate subscription declaration for: ${Caf.toString(stateField)}`, {stateField, "first-subscription-options": out[stateField], "duplicate-subscription-options": {stateField, model, key}, subscriptions});}; return subscriptionValidator.validate(out[stateField] = {stateField, model, key});}; return Caf.each2(compactFlatten(subscriptions), (subscriptionDeclaration) => (() => {switch (false) {case !isPlainObject(subscriptionDeclaration): return Caf.each2(subscriptionDeclaration, (subscriptionOptions, stateField) => {let model, key; return (() => {switch (false) {case !(Caf.is(subscriptionOptions, Function)): return add({stateField, model: stateField, key: subscriptionOptions}); case !(Caf.is(subscriptionOptions, String)): return add({stateField, model: stateField, key: subscriptionOptions}); case !(Caf.is(subscriptionOptions, Object)): model = subscriptionOptions.model; key = subscriptionOptions.key; return add({stateField, model: model != null ? model : stateField, key: (Caf.is(key, Function)) ? key : key}); default: return (() => {throw new ErrorWithInfo("invalid value for subscription. Expecting key-function or object", {stateField, subscriptionOptions});})();};})();}); case !isString(subscriptionDeclaration): return Caf.each2(subscriptionDeclaration.match(subscriptionFormPatterns.global), (subscriptionName) => {let matches, _, modelName, stateField; return (matches = subscriptionName.match(subscriptionFormPatterns.modelKey)) ? (([_, modelName, stateField] = matches), add({stateField, model: modelName, key: stateField})) : add({stateField: subscriptionName, model: subscriptionName});}); default: return (() => {throw new ErrorWithInfo("unsupported subscription declaration. Expecting string or object.", {"invalid-subscription-delcaration": subscriptionDeclaration, subscriptions});})();};})(), null, out);}};});});
//# sourceMappingURL=ComponentLib.js.map
