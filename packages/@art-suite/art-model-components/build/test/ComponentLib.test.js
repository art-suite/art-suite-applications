"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "formattedInspect", "assert", "parseSubscriptions", "Function"], [global, require('./StandardImport'), require('../../build/ArtSuite/ArtModelComponents/ComponentLib')], (describe, test, formattedInspect, assert, parseSubscriptions, Function) => {let testDeclaration; testDeclaration = function(declaration, expected) {return test(`'${Caf.toString(formattedInspect(declaration))}'`, () => {let parsed; return assert.eq(parsed = parseSubscriptions([declaration]), (Caf.is(expected, Function)) ? expected(parsed) : expected);});}; return describe({strings: function() {testDeclaration("post", (parsed) => {return {post: {stateField: "post", model: "post", key: undefined}};}); return testDeclaration("viewState.gridSize", (parsed) => {return {gridSize: {stateField: "gridSize", model: "viewState", key: "gridSize"}};});}, options: function() {let key, options; testDeclaration({post: key = ({nextPostId}) => nextPostId}, {post: {stateField: "post", model: "post", key}}); testDeclaration({post: "aPost"}, {post: {stateField: "post", model: "post", key: "aPost"}}); testDeclaration({aPost: {model: "post"}}, (parsed) => {[{key}, Caf.find(parsed)]; return {aPost: {stateField: "aPost", model: "post", key: undefined}};}); testDeclaration({aPost: {stateField: "myStateField", model: "myModel", key: "myKey"}}, (parsed) => {[{key}, Caf.find(parsed)]; return {aPost: {stateField: "aPost", model: "myModel", key: "myKey"}};}); return testDeclaration({post: options = {key: ({nextPostId}) => nextPostId, model: ({dynamicModelName}) => dynamicModelName}}, {post: {stateField: "post", model: options.model, key: options.key}});}, "multiple-declarations": function() {let nextPostKey; testDeclaration("myModel.myField myModel.myField2", {myField: {stateField: "myField", model: "myModel", key: "myField"}, myField2: {stateField: "myField2", model: "myModel", key: "myField2"}}); testDeclaration(["myModel.myField", "myModel.myField2"], {myField: {stateField: "myField", model: "myModel", key: "myField"}, myField2: {stateField: "myField2", model: "myModel", key: "myField2"}}); return testDeclaration(["post", {nextPost: {model: "post", key: nextPostKey = ({nextPostId}) => nextPostId}}], (parsed) => {return {post: {stateField: "post", model: "post", key: parsed.post.key}, nextPost: {stateField: "nextPost", model: "post", key: nextPostKey}};});}});});});
//# sourceMappingURL=ComponentLib.test.js.map
