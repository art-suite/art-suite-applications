"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "Flux", "createWithPostCreate", "ApplicationState", "setup", "teardown", "test", "fluxStore", "Promise", "FluxComponent", "models", "Element", "eq", "FluxModel", "success"], [global, require('./StandardImport')], (describe, Flux, createWithPostCreate, ApplicationState, setup, teardown, test, fluxStore, Promise, FluxComponent, models, Element, eq, FluxModel, success) => {let resetAll, myModelSetup; resetAll = function() {return Flux._reset();}; myModelSetup = function() {return resetAll().then(() => {let MyModel; return createWithPostCreate(MyModel = Caf.defClass(class MyModel extends ApplicationState {}, function(MyModel, classSuper, instanceSuper) {this.stateFields({myField: {}, myField2: {}});}));});}; return describe({misc: function() {setup(myModelSetup); teardown(() => fluxStore.onNextReady()); test("manual subscriptions", () => new Promise((resolve) => {let MyComponent; MyComponent = createWithPostCreate(MyComponent = Caf.defClass(class MyComponent extends FluxComponent {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.getInitialState = function() {return {user: this.subscribe("mySubscriptionKey", "myModel", "myField", {stateField: "myCustomStateField"})};}; this.prototype.render = function() {if (this.state.myCustomStateField === "sally") {resolve();}; return Element();};})); MyComponent()._instantiate(); return models.myModel.myField = "sally";})); test("changing subscription key updates subscription", () => new Promise((resolve) => {let renderLog, MyComponent, MyWrapperComponent, myWrapperComponent; renderLog = []; MyComponent = createWithPostCreate(MyComponent = Caf.defClass(class MyComponent extends FluxComponent {}, function(MyComponent, classSuper, instanceSuper) {this.subscriptions({myModel: function({myModelId}) {return myModelId;}}); this.prototype.render = function() {renderLog.push(this.state.myModel); if (eq(renderLog, ["george", "sally"])) {resolve();}; return Element({});};})); MyWrapperComponent = createWithPostCreate(MyWrapperComponent = Caf.defClass(class MyWrapperComponent extends FluxComponent {}, function(MyWrapperComponent, classSuper, instanceSuper) {this.prototype.getInitialState = function() {return {myModelId: "myField"};}; this.prototype.render = function() {return MyComponent(this.state);};})); models.myModel.myField2 = "sally"; models.myModel.myField = "george"; (myWrapperComponent = MyWrapperComponent())._instantiate(); return myWrapperComponent.onNextReady(() => myWrapperComponent.setState({myModelId: "myField2"}));})); test("subscriptions with structured keys", () => new Promise((resolve) => {let MyStructuredKeyModel, MyComponent; MyStructuredKeyModel = Caf.defClass(class MyStructuredKeyModel extends FluxModel {}, function(MyStructuredKeyModel, classSuper, instanceSuper) {this.register(); this.prototype.toKeyString = function(key) {return `${Caf.toString(key.foo)}:${Caf.toString(key.bar)}`;}; this.prototype.load = function(key) {return {data: key, status: success};};}); MyComponent = createWithPostCreate(MyComponent = Caf.defClass(class MyComponent extends FluxComponent {}, function(MyComponent, classSuper, instanceSuper) {this.subscriptions({myStructuredKeyModel: function() {return {foo: 123, bar: 456};}}); this.prototype.render = function() {if (this.myStructuredKeyModel === "123:456") {resolve();}; return Element();};})); return MyComponent()._instantiate();})); return test("props value for subscription shows up for first render", () => new Promise((resolve, reject) => {let Post, MyComponent; Post = Caf.defClass(class Post extends FluxModel {}, function(Post, classSuper, instanceSuper) {this.register(); this.prototype.load = function(key) {return {data: key, status: success};};}); MyComponent = createWithPostCreate(MyComponent = Caf.defClass(class MyComponent extends FluxComponent {}, function(MyComponent, classSuper, instanceSuper) {this.subscriptions("post"); this.prototype.render = function() {let base; if ((Caf.exists(base = this.post) && base.foo) === "bar") {resolve();} else {reject();}; return Element();};})); return MyComponent({post: {foo: "bar"}})._instantiate();}));}});});});
//# sourceMappingURL=ModelComponent.test2disabled.js.map
