"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Validator", "log", "Object", "Boolean", "Error", "objectWithout", "compactFlatten", "hasProperties", "LinkFieldsFilter2", "LinkFieldsFilter2LegacyApiEncode", "LinkFieldsFilter2Transition2BFilter", "PrefetchedRecordsFilter", "LinkFieldsFilter", "formattedInspect", "ValidationFilter", "AfterEventsFilter", "DataUpdatesFilter", "present", "UniqueIdFilter", "TimestampFilter", "UserOwnedFilter"], [global, require('./StandardImport'), require('./Filters'), {AfterEventsFilter: require('./AfterEventsFilter'), DataUpdatesFilter: require('./DataUpdatesFilter'), LinkFieldsFilter: require('./LinkFieldsFilter'), LinkFieldsFilter2: require('./LinkFieldsFilter2'), LinkFieldsFilter2LegacyApiEncode: require('./LinkFieldsFilter2LegacyApiEncode'), LinkFieldsFilter2Transition2BFilter: require('./LinkFieldsFilter2Transition2BFilter'), PrefetchedRecordsFilter: require('./PrefetchedRecordsFilter'), TimestampFilter: require('./TimestampFilter'), UniqueIdFilter: require('./UniqueIdFilter'), UserOwnedFilter: require('./UserOwnedFilter'), ValidationFilter: require('./ValidationFilter')}], (Validator, log, Object, Boolean, Error, objectWithout, compactFlatten, hasProperties, LinkFieldsFilter2, LinkFieldsFilter2LegacyApiEncode, LinkFieldsFilter2Transition2BFilter, PrefetchedRecordsFilter, LinkFieldsFilter, formattedInspect, ValidationFilter, AfterEventsFilter, DataUpdatesFilter, present, UniqueIdFilter, TimestampFilter, UserOwnedFilter) => {let normalizeFieldProps, DatabaseFilters; normalizeFieldProps = Validator.normalizeFieldProps; return DatabaseFilters = Caf.defClass(class DatabaseFilters extends Object {}, function(DatabaseFilters, classSuper, instanceSuper) {this.createDatabaseFilters = function(options = {}, PipelineClass) {let fields, id, userOwned, linkFilterVersion, uniqueIdProps, linkFields, otherFields, addValidationFilter, temp; if (Caf.exists(options) && options.fields) {fields = options.fields; id = fields.id; userOwned = options.userOwned; linkFilterVersion = options.linkFilterVersion;} else {log.warn(`DEPRICATED: (Pipeline: ${Caf.toString(Caf.exists(PipelineClass) && PipelineClass.name)}) you should now specify fields as: createDatabaseFilters fields: {}`); if (Caf.exists(temp = fields = options)) {id = temp.id; userOwned = temp.userOwned;};}; if (userOwned) {if (!(Caf.is(userOwned, Object) || Caf.is(userOwned, Boolean))) {throw new Error("expecting object or boolean");}; fields.user = "required link"; fields = objectWithout(fields, "userOwned");}; if (id) {uniqueIdProps = id; fields = objectWithout(fields, "id");}; linkFields = {}; otherFields = {}; addValidationFilter = false; otherFields = Caf.object(fields, (v, k) => {let link; return (link = (v = normalizeFieldProps(v)).link) ? (linkFields[k] = v, "object") : (addValidationFilter = true, v);}); return compactFlatten([hasProperties(linkFields) ? (() => {switch (linkFilterVersion) {case "transition2A": log.warn(`TRANSITIONAL: using LinkFieldsFilter v2 + transition2A for ${Caf.toString(Caf.exists(PipelineClass) && PipelineClass.name)} (YOU SHOULD: finish the transition and switch fully to createDatabaseFilters linkFilterVersion: 2)`); return [new LinkFieldsFilter2({fields: linkFields}), new LinkFieldsFilter2LegacyApiEncode]; case "transition2B": log.warn(`TRANSITIONAL: using LinkFieldsFilter v2 + transition2B for ${Caf.toString(Caf.exists(PipelineClass) && PipelineClass.name)} (YOU SHOULD: finish the transition and switch fully to createDatabaseFilters linkFilterVersion: 2)`); return [new LinkFieldsFilter2({fields: linkFields}), new LinkFieldsFilter2LegacyApiEncode, new LinkFieldsFilter2Transition2BFilter, new PrefetchedRecordsFilter]; case 2: return [new LinkFieldsFilter2({fields: linkFields}), new PrefetchedRecordsFilter]; case 1: return new LinkFieldsFilter({fields: linkFields}); case null: case undefined: log.warn(`DEPRICATED: defaulting to LinkFieldsFilter v1 for ${Caf.toString(Caf.exists(PipelineClass) && PipelineClass.name)}. This will NOT be the default in future versions. USE: createDatabaseFilters linkFilterVersion: 1`); return new LinkFieldsFilter({fields: linkFields}); default: return (() => {throw new Error(`invalid linkFilterVersion: ${Caf.toString(formattedInspect(linkFilterVersion))}`);})();};})() : undefined, addValidationFilter ? new ValidationFilter({fields: otherFields, exclusive: true}) : undefined, new AfterEventsFilter, new DataUpdatesFilter, !(present(Caf.exists(PipelineClass) && PipelineClass._keyFieldsString) && PipelineClass._keyFieldsString !== "id") ? new UniqueIdFilter(uniqueIdProps) : undefined, new TimestampFilter, userOwned ? new UserOwnedFilter(userOwned) : undefined]);};});});});
//# sourceMappingURL=DatabaseFilters.js.map
