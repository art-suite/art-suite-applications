"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["lowerCamelCase", "log"], [global, require('art-standard-lib')], (lowerCamelCase, log) => {return function(superClass) {let StateFieldsMixin; return StateFieldsMixin = Caf.defClass(class StateFieldsMixin extends superClass {}, function(StateFieldsMixin, classSuper, instanceSuper) {let sf; this.extendableProperty({stateFields: {}}); this.stateFields = sf = function(fields) {this.extendStateFields(fields); return Caf.each2(fields, (initialValue, field) => {let defaultSetValue, clearValue; defaultSetValue = initialValue; clearValue = null; this.addGetter(field, () => this.state[field]); if (initialValue === true || initialValue === false) {clearValue = false; defaultSetValue = true; this.addSetter(field, (v) => this.setState(field, !!v)); this.prototype[lowerCamelCase(`set is ${Caf.toString(field)}`)] = () => {log.warn(`StateFieldsMixin ${Caf.toString(lowerCamelCase(`set is ${Caf.toString(field)}`))} is DEPRICATED. Use: ${Caf.toString(lowerCamelCase(`trigger ${Caf.toString(field)}`))}.`); return this.setState(field, true);}; this.prototype[lowerCamelCase(`trigger ${Caf.toString(field)}`)] = () => this.setState(field, true); this.prototype[lowerCamelCase(`toggle ${Caf.toString(field)}`)] = () => this.setState(field, !this.state[field]);} else {this.addSetter(field, (v) => this.setState(field, (v === undefined) ? defaultSetValue : v));}; return this.prototype[lowerCamelCase(`clear ${Caf.toString(field)}`)] = () => this.setState(field, clearValue);});}; this.stateField = sf;});};});});
//# sourceMappingURL=StateFieldsMixin.js.map
