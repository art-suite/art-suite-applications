import &StandardImport
models = fluxStore = FluxModel = null
reset = ->
  {models} = modelRegistry = new ModelRegistry
  FluxModel = class FluxModel extends &build.FluxModel
    @modelRegistry modelRegistry

  fluxStore = modelRegistry.modelStore

describe
  load: ->
    beforeEach reset

    test "model with async load", ->
      new Promise (resolve) ->
        class MyBasicModel extends FluxModel
          load: (key) ->
            fluxStore.onNextReady -> @updateModelRecord key, status: missing
            null

        res = fluxStore.subscribe "myBasicModel", "123", (fluxRecord) ->
          return unless fluxRecord.status != pending
          assert.selectedEq
            status: missing, key: "123", modelName: "myBasicModel"
            fluxRecord
          resolve()

        assert.selectedEq
          status: pending, key: "123", modelName: "myBasicModel"
          res

    test "model with @loadModelRecord", ->
      new Promise (resolve) ->
        class MyBasicModel extends FluxModel

          loadModelRecord: (key) ->
            timeout(20).then -> status: missing

        res = fluxStore.subscribe "myBasicModel", "123", (fluxRecord) ->
          return unless fluxRecord.status != pending
          assert.selectedEq
            status: missing, key: "123", modelName: "myBasicModel"
            fluxRecord
          resolve()
        assert.selectedEq
          status: pending, key: "123", modelName: "myBasicModel"
          res

    test "model with custom load - delayed", ->
      class MyBasicModel extends FluxModel

        load: (key, callback) ->
          @updateModelRecord key, -> status: success, data: theKeyIs:key
          null

      new Promise (resolve) ->
        res = fluxStore.subscribe "myBasicModel", "123", (fluxRecord) ->
          assert.selectedEq
            status: success, key: "123", modelName: "myBasicModel", data: theKeyIs:"123"
            fluxRecord
          resolve()
        assert.selectedEq
          status: pending, key: "123", modelName: "myBasicModel"
          res

      .then ->
        new Promise (resolve) ->
          fluxStore.subscribe "myBasicModel", "456", (fluxRecord) ->
            assert.selectedEq
              status: success, key: "456", modelName: "myBasicModel", data: theKeyIs:"456"
              fluxRecord
            resolve()

    test "model with custom load - immediate", ->
      class MyBasicModel extends FluxModel

        load: (key, callback) ->
          @updateModelRecord key, status: success, data: theKeyIs:key

      new Promise (resolve, reject) ->
        res = fluxStore.subscribe "myBasicModel", "123", (fluxRecord) ->
          log.error "THIS SHOULDN'T HAPPEN!"
          reject()
        assert.selectedEq
          status: success, key: "123", modelName: "myBasicModel", data: theKeyIs:"123"
          res
        fluxStore.onNextReady -> resolve()

  loadData: ->
    beforeEach reset

    test "basic loadData returning promise", ->
      class MyBasicModel extends FluxModel
        loadData: (key) -> Promise.resolve theKeyIs:key

      new Promise (resolve) ->
        fluxStore.subscribe :myBasicModel :123 (fluxRecord) ->
          assert.selectedEq
            status: success, key: :123 modelName: :myBasicModel data: theKeyIs: :123
            fluxRecord
          resolve()
      .then ->
        new Promise (resolve) ->
          fluxStore.subscribe :myBasicModel :456 (fluxRecord) ->
            assert.selectedEq
              status: success, key: :456 modelName: :myBasicModel data: theKeyIs: :456
              fluxRecord
            resolve()

    test "basic loadData returning value directly", ->
      class MyBasicModel extends FluxModel
        loadData: (key) -> theKeyIs: key

      new Promise (resolve) ->
        fluxStore.subscribe :myBasicModel :123 (fluxRecord) ->
          assert.selectedEq
            status: success, key: :123 modelName: :myBasicModel data: theKeyIs: :123
            fluxRecord
          resolve()

      .then ->
        new Promise (resolve) ->
          fluxStore.subscribe :myBasicModel :456 (fluxRecord) ->
            assert.selectedEq
              status: success, key: :456 modelName: :myBasicModel data: theKeyIs: :456
              fluxRecord
            resolve()

    test "When there are multiple loadPromises with the same key, loadData is only called once per unique key", ->
      loadCount = 0
      class User extends FluxModel
        loadData: (key) ->
          timeout 10
          .then ->
            loadCount++
            id: key
            userName: :fred

      p1 = models.user.loadPromise :abc
      p2 = models.user.loadPromise :abc
      p3 = models.user.loadPromise :def
      Promise.all [p1, p2, p3]
      .then ->
        assert.eq loadCount, 2
        assert.eq p1, p2
        assert.neq p1, p3

  functionsBoundToInstances: ->
    beforeEach reset
    test "member functions declared in Concrete models can be used without 'this'", ->
      class User extends FluxModel
        foo: -> @_foo = (@_foo || 0) + 1

      User extract user extract foo
      foo()
      assert.eq user._foo, 1
      foo()
      assert.eq user._foo, 2

  aliases: ->
    beforeEach reset
    test "@aliases adds aliases to the model registry", ->
      class User extends FluxModel
        @aliases :owner :sister

      assert.eq models.user.class, User
      assert.eq models.user, models.owner
      assert.eq models.user, models.sister

  simultanious: ->
    beforeEach reset

    test "two simultantious FluxModel requests on the same key only triggers one store request", ->
      counts =
        load: 0
        sub1: 0
        sub2: 0

      class MyBasicModel extends FluxModel
        load: (key, callback) ->
          counts.load++
          @updateModelRecord key, status: success, data: theKeyIs:key

      fluxStore.subscribe :myBasicModel :123 (fluxRecord) -> assert.eq(fluxRecord.count, 2); counts.sub1++
      fluxStore.subscribe :myBasicModel :123 (fluxRecord) -> assert.eq(fluxRecord.count, 2); counts.sub2++
      fluxStore.update    :myBasicModel :123 (fluxRecord) -> count: (fluxRecord.count || 0)+ 1
      fluxStore.update    :myBasicModel :123 (fluxRecord) -> count: (fluxRecord.count || 0)+ 1

      fluxStore.onNextReady -> assert.eq counts, load: 1 sub1: 1 sub2: 1

    test "two simultantious FluxModel requests on the different keys triggers two store requests", ->
      counts =
        load: 0
        sub1: 0
        sub2: 0

      class MyBasicModel extends FluxModel
        load: (key, callback) ->
          counts.load++
          @updateModelRecord key, status: success, data: theKeyIs:key

      fluxStore.subscribe :myBasicModel :123 (fluxRecord) -> assert.eq(fluxRecord.count, 1); counts.sub1++
      fluxStore.subscribe :myBasicModel :456 (fluxRecord) -> assert.eq(fluxRecord.count, 1); counts.sub2++
      fluxStore.update    :myBasicModel :123 (fluxRecord) -> count: (fluxRecord.count || 0)+ 1
      fluxStore.update    :myBasicModel :456 (fluxRecord) -> count: (fluxRecord.count || 0)+ 1

      fluxStore.onNextReady -> assert.eq counts, load: 2 sub1: 1 sub2: 1
