import &StandardImport

&ArtConfig.configure()

{session, pipelines} = pipelineRegistry = new PipelineRegistry location: :client
class SimplePipeline extends Pipeline
  @registry pipelineRegistry
  @filter &RestClientSimulatedTransportFilter
  @publicHandler
    get: (request) ->
      testHandlerRemoteRequest:   request.remoteRequest
      testHandlerRequestProps:    request.props
      testHandlerRequestSession:  request.session

    login: (request) -> request.respondWithSession user: :alice

chainedTest "simplePipeline.get without session", ->
  pipelines.simplePipeline.get returnResponseObject: true
  .then (response) ->
    assert.eq
      response.data
      testHandlerRequestProps:   {}
      testHandlerRequestSession: {}
      testHandlerRemoteRequest:  url: :/api/simplePipeline, method: :get, data: null

    assert.eq
      response.remoteResponse
      data: response.data

.thenTest "simplePipeline.get with session", ->
  assert.notPresent signatureBefore = session.data.signature
  pipelines.simplePipeline.login returnResponseObject: true
  .then (result) ->
    assert.eq
      result.remoteResponse
      session: {}
        user: :alice
        session.data.signature

    assert.present session.data.signature
    assert.neq signatureBefore, session.data.signature
