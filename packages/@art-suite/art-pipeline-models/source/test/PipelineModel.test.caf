import &StandardImport, {} &SimplePipeline


orderLog = []
User = user = MySubscriber = registry = null

{pipelineRegistry, modelRegistry, defineModelsForAllPipelines} = newRegistries()

class MySubscriber extends ArtModelSubscriptionsMixin BaseObject
  @modelRegistry modelRegistry

class User extends SimplePipeline
  @registry pipelineRegistry

{user} = defineModelsForAllPipelines()

test "model.propsToKey" ->
  assert.eq :user1    user.propsToKey user: id: :user1
  assert.eq :user2    user.propsToKey userId: :user2
  assert.eq :user3    user.propsToKey(user: {id: :user3}, userId: :user4), "" whole object has precidence
  assert.eq undefined user.propsToKey {}

test "user instanceof ArtModel", ->
  assert.instanceOf user, ArtModel

test "myModel.create", ->
  user.create data: username: "Shane", message: "Hi"

test "create with missing required field", ->
  user.create data: username: "Shane", message: ""

test "subscribe when state is success", ->
  user.pipeline.reset data: 123: name: "alice"
  .then ->
    mySubscriber = new MySubscriber
    new Promise (resolve) ->
      mySubscriber.subscribe
        modelName:  "user"
        key:        "123"
        callback:   (artModelRecord) ->
          resolve() if artModelRecord.status == success

test "subscribe when state is missing", ->
  user.pipeline.reset data: 123: name: "alice"
  .then ->
    mySubscriber = new MySubscriber
    new Promise (resolve) ->
      mySubscriber.subscribe
        modelName:  "user"
        key:        "456"
        callback:   (artModelRecord) ->
          resolve() if artModelRecord.status == missing

