"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "beforeEach", "test", "_resetArtSuiteModels", "ArtModelSubscriptionsMixin", "BaseObject", "SimplePipeline", "defineModelsForAllPipelines", "models", "UniqueIdFilter", "TimestampFilter", "ValidationFilter", "assert", "ArtModel", "Promise", "success", "missing"], [global, require('./StandardImport'), {SimplePipeline: require('./SimplePipeline')}], (describe, beforeEach, test, _resetArtSuiteModels, ArtModelSubscriptionsMixin, BaseObject, SimplePipeline, defineModelsForAllPipelines, models, UniqueIdFilter, TimestampFilter, ValidationFilter, assert, ArtModel, Promise, success, missing) => {return describe({PipelineMode: function() {let orderLog, User, user, MySubscriber; orderLog = []; User = null; user = null; MySubscriber = null; beforeEach(() => {_resetArtSuiteModels(); MySubscriber = Caf.defClass(class MySubscriber extends ArtModelSubscriptionsMixin(BaseObject) {}); User = Caf.defClass(class User extends SimplePipeline {}, function(User, classSuper, instanceSuper) {this.filter(new UniqueIdFilter); this.filter(new TimestampFilter); this.filter(new ValidationFilter({username: "trimmedString", message: "trimmedString"}));}); defineModelsForAllPipelines(); return ({user} = models, {user});}); test("model.propsToKey", () => {assert.eq("user1", user.propsToKey({user: {id: "user1"}})); assert.eq("user2", user.propsToKey({userId: "user2"})); assert.eq("user3", user.propsToKey({user: {id: "user3"}, userId: "user4"}), "whole object has precidence"); return assert.eq(undefined, user.propsToKey({}));}); test("user instanceof ArtModel", () => {assert.eq(models.user, user); return assert.instanceOf(models.user, ArtModel);}); test("myModel.create", () => user.create({data: {username: "Shane", message: "Hi"}})); test("create with missing required field", () => user.create({data: {username: "Shane", message: ""}})); test("subscribe when state is success", () => user.pipeline.reset({data: {123: {name: "alice"}}}).then(() => {let mySubscriber; mySubscriber = new MySubscriber; return new Promise((resolve) => mySubscriber.subscribe({modelName: "user", key: "123", callback: (artModelRecord) => (artModelRecord.status === success) ? resolve() : undefined}));})); return test("subscribe when state is missing", () => user.pipeline.reset({data: {123: {name: "alice"}}}).then(() => {let mySubscriber; mySubscriber = new MySubscriber; return new Promise((resolve) => mySubscriber.subscribe({modelName: "user", key: "456", callback: (artModelRecord) => (artModelRecord.status === missing) ? resolve() : undefined}));}));}});});});
//# sourceMappingURL=PipelineModel.test.js.map
