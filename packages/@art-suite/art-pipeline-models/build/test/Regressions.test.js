"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["chainedTest", "PipelineRegistry", "Filter", "Pipeline", "defineModelsForAllPipelines", "ArtModelSubscriptionsMixin", "BaseObject", "Promise", "mergeInto", "assert", "missing", "success"], [global, require('./StandardImport')], (chainedTest, PipelineRegistry, Filter, Pipeline, defineModelsForAllPipelines, ArtModelSubscriptionsMixin, BaseObject, Promise, mergeInto, assert, missing, success) => {let resolver, user, preparedKey, preparedData; resolver = null; user = null; preparedKey = "abc"; preparedData = {name: "alice"}; return chainedTest("from ArtEryReactJs spike", function() {let pipelineRegistry, DataUpdatesFilter, User, subscriptionObject, SubscriptionObject; pipelineRegistry = new PipelineRegistry({location: "client"}); DataUpdatesFilter = Caf.defClass(class DataUpdatesFilter extends Filter {}, function(DataUpdatesFilter, classSuper, instanceSuper) {this.after({all: function(response) {return response.tap(({pipeline, key, data, isUpdateRequest, isDeleteRequest}) => {if (isUpdateRequest) {pipeline.dataUpdated(key || pipeline.toKeyString(data), data);}; return isDeleteRequest ? pipeline.dataDeleted(key || pipeline.toKeyString(data), data) : undefined;});}});}); ({user} = User = Caf.defClass(class User extends Pipeline {}, function(User, classSuper, instanceSuper) {this.registry(pipelineRegistry); this.getter({records: function() {let temp; return ((temp = this._records) != null ? temp : this._records = {});}}); this.filter(DataUpdatesFilter); this.publicHandlers({get: function(request) {return request.pipeline.records[request.key];}, create: function(request) {return request.pipeline.records[request.key] = request.data;}, update: function(request) {return mergeInto(request.pipeline.records[request.key], request.data);}});})); defineModelsForAllPipelines(pipelineRegistry); subscriptionObject = new (SubscriptionObject = Caf.defClass(class SubscriptionObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this._state = {};};}, function(SubscriptionObject, classSuper, instanceSuper) {this.prototype.setState = function(key, value) {return this._state[key] = value;};})); return new Promise((resolve) => {resolver = resolve; return subscriptionObject.subscribe({key: preparedKey, stateField: "user", modelName: "user", updatesCallback: (modelRecord) => resolver(modelRecord)});});}).thenTest("should be missing at first", function(modelRecord) {return assert.eq(modelRecord.status, missing);}).thenTest("now create the record", function() {user.create(preparedKey, {data: preparedData}); return new Promise((resolve) => resolver = resolve);}).thenTest("should resolve success", function(modelRecord) {return assert.eq(modelRecord.status, success);});});});
//# sourceMappingURL=Regressions.test.js.map
