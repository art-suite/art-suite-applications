"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "assert", "beforeEach", "Pipeline", "defineModelsForAllPipelines", "merge", "models", "PipelineQueryModel", "formattedInspect", "Object", "_resetArtSuiteModels"], [global, require('./StandardImport')], (describe, test, assert, beforeEach, Pipeline, defineModelsForAllPipelines, merge, models, PipelineQueryModel, formattedInspect, Object, _resetArtSuiteModels) => {return describe({noop: function() {return test("noop", () => assert.eq(1, 1));}, pre2020Style: function() {beforeEach(() => {let Post; Post = Caf.defClass(class Post extends Pipeline {}, function(Post, classSuper, instanceSuper) {this.query({postsByUserId: function(request) {return [{userId: request.key, message: "Hi!"}, {userId: request.key, message: "Really?"}];}}); this.publicRequestTypes("postsByUserId"); this.filter({after: {all: function(response) {return response.withData(Caf.array(response.data, (record) => merge(record, {message: `${Caf.toString(record.message)} :)`})));}}});}); return defineModelsForAllPipelines();}); test("query model defined", () => assert.instanceOf(models.postsByUserId, PipelineQueryModel, formattedInspect({definedModels: Object.keys(models), lookingForModel: "postsByUserId"}))); return test("query loadData goes through pipeline", () => models.postsByUserId.loadData("abc123").then((res) => assert.eq(res, [{userId: "abc123", message: "Hi! :)"}, {userId: "abc123", message: "Really? :)"}])));}, "2020Style": {basic: function() {let messagesByUserId; messagesByUserId = null; beforeEach(() => {let Message; Message = Caf.defClass(class Message extends Pipeline {}, function(Message, classSuper, instanceSuper) {this.query({byUserId: {query: function(request) {return [{userId: request.key, message: "Hi!"}, {userId: request.key, message: "Really?"}];}, keyFields: ["userId"]}}); this.publicRequestTypes("byUserId"); this.filter({after: {all: function(response) {return response.withData(Caf.array(response.data, (record) => merge(record, {message: `${Caf.toString(record.message)} :)`})));}}});}); return ({messagesByUserId} = defineModelsForAllPipelines(), {messagesByUserId});}); test("query model defined", () => assert.instanceOf(messagesByUserId, PipelineQueryModel)); test("query loadData goes through pipeline", () => messagesByUserId.loadData("abc123").then((res) => assert.eq(res, [{userId: "abc123", message: "Hi! :)"}, {userId: "abc123", message: "Really? :)"}]))); return test("queryModel.propsToKey", () => assert.eq("user1", messagesByUserId.propsToKey({user: {id: "user1"}})));}, codeReuse: function() {beforeEach(() => _resetArtSuiteModels().then(() => {let UserOwned, Email, Photo; UserOwned = Caf.defClass(class UserOwned extends Pipeline {}, function(UserOwned, classSuper, instanceSuper) {this.query({byUserId: function(request) {return [{userId: request.key, message: "Hi!"}, {userId: request.key, message: "Really?"}];}}); this.publicRequestTypes("byUserId"); this.filter({after: {all: function(response) {return response.withData(Caf.array(response.data, (record) => merge(record, {message: `${Caf.toString(response.pipeline.name)}: ${Caf.toString(record.message)} :)`})));}}});}); Email = Caf.defClass(class Email extends UserOwned {}); Photo = Caf.defClass(class Photo extends UserOwned {}); return defineModelsForAllPipelines();})); test("query model defined", () => {assert.instanceOf(models.emailsByUserId, PipelineQueryModel); return assert.instanceOf(models.photosByUserId, PipelineQueryModel);}); return test("query loadData goes through pipeline", () => models.emailsByUserId.loadData("abc123").then((res) => assert.eq(res, [{userId: "abc123", message: "email: Hi! :)"}, {userId: "abc123", message: "email: Really? :)"}])));}}});});});
//# sourceMappingURL=PipelineQueryModel.test.js.map
