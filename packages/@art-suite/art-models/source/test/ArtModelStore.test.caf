import &StandardImport

reset = ->
  _resetArtSuiteModels()
  .then ->
    class MyModel extends ArtModel
    assert.eq true, !!models.myModel,{models}

describe basic: ->
  test "artModelStore.reset & length", -> reset().then ->
    assert.eq artModelStore.length, 0

  chainedTest "artModelStore.update basic", -> reset().then ->
    artModelStore.subscribe "myModel", "myKey", -> # required to make the record persist
    artModelStore.update "myModel", "myKey", bar:1

    artModelStore.onNextReady ->
      assert.eq artModelStore.length, 1
      assert.selectedEq
        entryCount:       1
        entrySubscribers: 1
        modelCount:       1
        artModelStore.status

      assert.selectedEq
        status: pending, bar: 1 key: :myKey modelName: :myModel
        modelRecord = artModelStore.get :myModel :myKey

      assert.isNumber modelRecord.updatedAt
      assert.isNumber modelRecord.createdAt
      assert.lt modelRecord.createdAt, modelRecord.updatedAt

  .tapTest
    "modelStoreEntry._getAndLogErrorMessage" ->
      logged = []
      myLog = (a) -> logged.push a
      error = {}
      message = artModelStore._entriesByModelName.myModel.myKey._getAndLogErrorMessage error, :giggle myLog
      assert.isString message
      assert.true :giggle in message
      assert.eq logged.length, 1

    "artModelStore.inspectedObjects" ->
      artModelStore extract inspectedObjects extract myModel.myKey extract createdAt, updatedAt
      assert.isNumber createdAt
      assert.isNumber updatedAt
      assert.eq
        inspectedObjects
        myModel:
          myKey: {}
            modelName: :myModel
            key:       :myKey
            status:    :pending
            createdAt
            updatedAt
            subscriberCount: 1

  test "artModelStore.update with no subscriber is noop", -> reset().then ->
    artModelStore.update "myModel", "myKey", bar:1

    artModelStore.onNextReady ->
      assert.eq artModelStore.length, 0
      assert.eq !!artModelStore._getEntry("myModel", "myKey"), false

  test "artModelStore.update twice replaces old value", -> reset().then ->
    artModelStore.subscribe "myModel", "myKey", -> # required to make the record persist
    artModelStore.update "myModel", "myKey", bar:1
    artModelStore.update "myModel", "myKey", baz:2

    artModelStore.onNextReady ->
      assert.eq artModelStore.length, 1
      assert.selectedEq
        status: pending, baz: 2, key: "myKey", modelName: "myModel"
        artModelStore.get "myModel", "myKey"

  # test "artModelStore.getHasSubscribers", ->
  #   reset()
  #   artModelStore.subscribe "myModel", "myKey", -> # required to make the record persist
  #   assert.eq false, artModelStore.getHasSubscribers "myModel", "myKey"
  #   assert.eq false, artModelStore.getHasSubscribers "myModel", "myKey"

  #   artModelStore.onNextReady ->
  #     assert.eq true, artModelStore.getHasSubscribers "myModel", "myKey"

  test "artModelStore.update with update function can merge", -> reset().then ->
    artModelStore.subscribe "myModel", "myKey", -> # required to make the record persist
    artModelStore.update "myModel", "myKey", bar:1
    artModelStore.update "myModel", "myKey", (old) -> merge old, baz:2

    artModelStore.onNextReady ->
      assert.eq artModelStore.length, 1
      assert.selectedEq
        status: pending, bar:1, baz: 2, key: "myKey", modelName: "myModel"
        artModelStore.get "myModel", "myKey"

  test "artModelStore.update cant set key", -> reset().then ->
    artModelStore.subscribe :myModel :myKey -> # required to make the record persist
    artModelStore.update    :myModel :myKey bar: 1 key: :boggle

    artModelStore.onNextReady ->
      assert.doesNotExist artModelStore.get :myModel :boggle
      assert.selectedEq
        status: pending, bar: 1 key: :myKey modelName: :myModel
        artModelStore.get :myModel :myKey

  test "artModelStore.update cant update key", -> reset().then ->
    artModelStore.subscribe "myModel", "myKey", -> # required to make the record persist
    artModelStore.update "myModel", "myKey", bar:1

    artModelStore.onNextReady ->
      artModelStore.update "myModel", "myKey", bar:1, key: "boggle2"

      artModelStore.onNextReady ->
        assert.selectedEq
          status: pending, bar: 1, key: "myKey", modelName: "myModel"
          artModelStore.get "myModel", "myKey"

  test "artModelStore.subscribe basic", -> reset().then ->
    new Promise (resolve) ->
      artModelStore.subscribe "myModel", "myKey", (modelRecord, previousModelRecord) ->
        assert.selectedEq
          status: missing, key: "myKey", modelName: "myModel"
          previousModelRecord

        assert.selectedEq
          status: pending, bar: 1, key: "myKey", modelName: "myModel"
          modelRecord
        resolve()

      artModelStore.update "myModel", "myKey", bar: 1

  test "artModelStore.unsubscribe", -> reset().then ->
    count1 = 0
    count2 = 0
    subscriber1 = (modelRecord) -> count1++
    subscriber2 = (modelRecord) -> count2++

    artModelStore.subscribe "myModel", "myKey", subscriber1
    artModelStore.subscribe "myModel", "myKey", subscriber2
    artModelStore.update "myModel", "myKey", bar: 1
    artModelStore.onNextReady ->
      assert.eq count1, 1
      assert.eq count2, 1
      artModelStore.unsubscribe "myModel", "myKey", subscriber2
      artModelStore.update "myModel", "myKey", bar: 2
      artModelStore.onNextReady ->
        assert.eq count1, 2
        assert.eq count2, 1


  test "artModelStore model callbacks: modelStoreEntryUpdated, modelStoreEntryAdded, modelStoreEntryRemoved", ->
    new Promise (resolve) -> reset().then ->
      updateCount = addedCount = removedCount = 0
      class MyModel2 extends ArtModel
        modelStoreEntryUpdated:  (entry) -> updateCount++
        modelStoreEntryAdded:    (entry) -> addedCount++
        modelStoreEntryRemoved:  (entry) ->
          assert.eq 2, updateCount
          assert.eq 1, addedCount
          assert.eq 1, ++removedCount
          resolve()

      artModelStore.subscribe "myModel2", "myKey", mySubscription = -> 123
      artModelStore.onNextReady ->
        artModelStore.unsubscribe "myModel2", "myKey", mySubscription

  test "subscribe triggers load on model", -> reset().then ->
    new Promise (resolve) ->
      class MyBasicModel extends ArtModel
        load: resolve

      artModelStore.subscribe :myBasicModel :123 (modelRecord) -> null

  test "subscribe with initial value does not trigger load on model nor subscription callback", -> reset().then ->
    class MyBasicModel extends ArtModel
      load: (key) -> assert.fail()

    artModelStore.subscribe
      :myBasicModel
      :123
      (modelRecord) -> assert.fail()
      data: foo: 1 bar: 2

    artModelStore.onNextReady ->
