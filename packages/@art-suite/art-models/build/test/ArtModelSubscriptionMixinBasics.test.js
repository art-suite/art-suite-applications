"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "ArtModelRegistry", "ApplicationState", "test", "Promise", "ArtModelSubscriptionsMixin", "BaseObject", "assert", "timeout", "log"], [global, require('./StandardImport'), {ApplicationState: require('./ApplicationState')}], (describe, ArtModelRegistry, ApplicationState, test, Promise, ArtModelSubscriptionsMixin, BaseObject, assert, timeout, log) => {let newRegistry; newRegistry = function() {let modelRegistry, MyModel; modelRegistry = new ArtModelRegistry; MyModel = Caf.defClass(class MyModel extends ApplicationState {}, function(MyModel, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);}); return modelRegistry;}; return describe({subscribe: function() {test("with modelName and stateField", () => new Promise((resolve, reject) => {let models, modelRegistry, myObject, MyObject; ({models} = modelRegistry = newRegistry()); myObject = new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.modelRegistry(modelRegistry); this.prototype.setState = function(key, value) {return (key === "myStateField" && value === "hi") ? resolve() : undefined;};})); assert.hasKeys(myObject.subscriptions); return timeout().then(() => models.myModel.setState("myModelKey", "hi"));})); return test("with modelKey = null means dont subscribe", () => {let MyModel, myObject, MyObject; MyModel = Caf.defClass(class MyModel extends ApplicationState {}); myObject = new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", null, {stateField: "myStateField"});};})); return assert.hasNoKeys(myObject.subscriptions);});}, change: function() {return test("change subscription", () => new Promise((resolve, reject) => {let models, modelRegistry, myObject, MyObject; ({models} = modelRegistry = newRegistry()); myObject = new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.modelRegistry(modelRegistry); this.prototype.setState = function(key, value) {return (key === "myStateField" && value) ? (value === "hi") ? resolve() : reject({wrongSetState: {key, value}}) : undefined;};})); return timeout().then(() => myObject.subscribe("mySubscriptionKey", "myModel", "myModelKey2", {stateField: "myStateField"})).then(() => {models.myModel.setState("myModelKey", "oops, still listening to old key"); return models.myModel.setState("myModelKey2", "hi");});}));}, unsubscribe: function() {test("unsubscribe", () => new Promise((resolve, reject) => {let models, modelRegistry, myObject, MyObject; ({models} = modelRegistry = newRegistry()); myObject = new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.prototype.setState = function(key, value) {return (key === "myStateField" && value) ? (value === "hi") ? resolve() : (log("reject"), reject({wrongSetState: {key, value}})) : undefined;};})); return timeout().then(() => {myObject.unsubscribe("mySubscriptionKey"); models.myModel.setState("myModelKey", "oops, still listening to old key"); return timeout(10);}).then(resolve);})); return test("unsubscribeAll", () => new Promise((resolve, reject) => {let models, modelRegistry, myObject, MyObject; ({models} = modelRegistry = newRegistry()); myObject = new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.prototype.setState = function(key, value) {return (key === "myStateField" && value) ? (value === "hi") ? resolve() : (log("reject"), reject({wrongSetState: {key, value}})) : undefined;};})); return timeout().then(() => {myObject.unsubscribeAll(); models.myModel.setState("myModelKey", "oops, still listening to old key"); return timeout(10);}).then(resolve);}));}});});});
//# sourceMappingURL=ArtModelSubscriptionMixinBasics.test.js.map
