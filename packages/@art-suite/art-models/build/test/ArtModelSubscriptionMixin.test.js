"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "beforeEach", "_resetArtSuiteModels", "afterEach", "test", "artModelStore", "Promise", "ArtModel", "ArtModelSubscriptionsMixin", "chainedTest", "ApplicationState", "BaseObject", "assert", "pending", "missing"], [global, require('./StandardImport'), {ApplicationState: require('./ApplicationState')}], (describe, beforeEach, _resetArtSuiteModels, afterEach, test, artModelStore, Promise, ArtModel, ArtModelSubscriptionsMixin, chainedTest, ApplicationState, BaseObject, assert, pending, missing) => {return describe({subscribeOnModelRegistered: function() {beforeEach(_resetArtSuiteModels); afterEach(() => artModelStore.onNextReady()); return test("subscribeOnModelRegistered", () => new Promise((resolve, reject) => {let MyModelB, MyModelA; MyModelB = Caf.defClass(class MyModelB extends ArtModel {}); return MyModelA = Caf.defClass(class MyModelA extends ArtModelSubscriptionsMixin(ArtModel) {constructor() {super(...arguments); this.subscribeOnModelRegistered("mySubscriptionKey", "myModelB", "myModelKey", {updatesCallback: () => {}}).then(resolve, reject);};});}));}, "subscribe and initialModelRecord": function() {chainedTest("with stateField and initialModelRecord", () => _resetArtSuiteModels().then(() => {let MyModel, MyObject; MyModel = Caf.defClass(class MyModel extends ApplicationState {}); new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {initialModelRecord: {data: "myInitialData"}, stateField: "myStateField"});};})); assert.selectedEq({status: pending, data: "myInitialData", key: "myModelKey", modelName: "myModel"}, artModelStore.get("myModel", "myModelKey")); return artModelStore.onNextReady();})); return test("with stateField and no initialModelRecord", () => _resetArtSuiteModels().then(() => {let MyModel, MyObject; MyModel = Caf.defClass(class MyModel extends ApplicationState {}); new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};})); return assert.selectedEq({status: missing, key: "myModelKey", modelName: "myModel"}, artModelStore.get("myModel", "myModelKey"));}));}});});});
//# sourceMappingURL=ArtModelSubscriptionMixin.test.js.map
