"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "ModelRegistry", "ApplicationState", "test", "Promise", "ArtModel", "ArtModelSubscriptionsMixin", "BaseObject", "assert", "pending", "missing"], [global, require('./StandardImport'), {ApplicationState: require('./ApplicationState')}], (describe, ModelRegistry, ApplicationState, test, Promise, ArtModel, ArtModelSubscriptionsMixin, BaseObject, assert, pending, missing) => {let newRegistry; newRegistry = function() {let modelRegistry, MyModel; modelRegistry = new ModelRegistry; MyModel = Caf.defClass(class MyModel extends ApplicationState {}, function(MyModel, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);}); return modelRegistry;}; return describe({subscribeOnModelRegistered: function() {return test("subscribeOnModelRegistered", () => new Promise((resolve, reject) => {let models, modelRegistry, MyModelB, MyModelA; ({models} = modelRegistry = newRegistry()); MyModelB = Caf.defClass(class MyModelB extends ArtModel {}, function(MyModelB, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);}); return MyModelA = Caf.defClass(class MyModelA extends ArtModelSubscriptionsMixin(ArtModel) {constructor() {super(...arguments); this.subscribeOnModelRegistered("mySubscriptionKey", "myModelB", "myModelKey", {updatesCallback: () => {}}).then(resolve, reject);};}, function(MyModelA, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);});}));}, "subscribe and initialModelRecord": function() {test("with stateField and initialModelRecord", () => {let models, modelStore, modelRegistry, MyObject; ({models, modelStore} = modelRegistry = newRegistry()); new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {initialModelRecord: {data: "myInitialData"}, stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);})); assert.selectedEq({status: pending, data: "myInitialData", key: "myModelKey", modelName: "myModel"}, modelStore.get("myModel", "myModelKey")); return modelStore.onNextReady();}); return test("with stateField and no initialModelRecord", () => {let models, modelStore, modelRegistry, MyObject; ({models, modelStore} = modelRegistry = newRegistry()); new (MyObject = Caf.defClass(class MyObject extends ArtModelSubscriptionsMixin(BaseObject) {constructor() {super(...arguments); this.subscribe("mySubscriptionKey", "myModel", "myModelKey", {stateField: "myStateField"});};}, function(MyObject, classSuper, instanceSuper) {this.modelRegistry(modelRegistry);})); return assert.selectedEq({status: missing, key: "myModelKey", modelName: "myModel"}, modelStore.get("myModel", "myModelKey"));});}});});});
//# sourceMappingURL=ArtModelSubscriptionMixin.test.js.map
