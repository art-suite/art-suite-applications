"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "Promise", "Error", "formattedInspect", "Object"], [global, require('art-standard-lib'), require('art-class-system')], (BaseObject, Promise, Error, formattedInspect, Object) => {let ModelRegistry; return ModelRegistry = Caf.defClass(class ModelRegistry extends BaseObject {constructor() {super(...arguments); this._models = {}; this._modelRegistrationPromiseResolvers = {}; this._modelRegistrationPromises = {}; this._modelStore = new (require('./ModelStore'))(this);};}, function(ModelRegistry, classSuper, instanceSuper) {this.singletonClass(); this.getter("models", "modelStore"); this.prototype.register = function({singleton: model}) {this._registerAliases(model); this._registerModel(model.modelName, model); return this._modelRegistered(model);}; this.prototype.onModelRegistered = function(modelName) {let temp, base; return ((temp = (base = this._modelRegistrationPromises)[modelName]) != null ? temp : base[modelName] = Promise.then(() => {let temp1; return ((temp1 = this.models[modelName]) != null ? temp1 : new Promise((resolve) => this._modelRegistrationPromiseResolvers[modelName] = resolve));}));}; this.prototype._registerModel = function(name, model) {if (this.models[name]) {throw new Error(`${Caf.toString(ModelRegistry.namespacePath)}: model already registered with same name\n${Caf.toString(formattedInspect({name, model, previouslyRegisteredModel: this.models[name]}))}`);}; this.models[name] = model; model.modelRegistered(); return model;}; this.prototype._registerAliases = function(model) {return Caf.each2(model.class._aliases, (alias) => this._registerModel(alias, model));}; this.prototype._modelRegistered = function(model) {let base; Caf.isF((base = this._modelRegistrationPromiseResolvers)[model.modelName]) && base[model.modelName](model); return model;}; this.prototype._reset = function() {return Caf.each2(Object.keys(this.models), (k) => delete this.models[k]);};});});});
//# sourceMappingURL=ModelRegistry.js.map
