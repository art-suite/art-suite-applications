import &StandardImport, &PipelineWithRegistry

&ArtConfig.configure()

test "does not define fields" ->
  class MyPipeline extends Pipeline
    @filter AfterEventsFilter

  assert.eq MyPipeline.getFields(), {}

test :AfterEventsFilter.on ->
  {myPipeline} = class MyPipeline extends Pipeline
    @filter AfterEventsFilter
    @publicRequestTypes :myRequest
    @handler
      myRequest: -> "hello"

  new Promise (resolve) ->
    AfterEventsRouter.getAfterEventsRouter pipelineRegistry
    .on :myPipeline :myRequest (response) ->
      assert.eq response.data, :hello
      resolve()

    myPipeline.myRequest {}

test :AfterEventsFilter.registerPipelineListener ->
  new Promise (resolve) ->
    {myPipeline} = class MyPipeline extends Pipeline
      @filter AfterEventsFilter
      @publicHandler myRequest: -> :hello

      handleRequestAfterEvent: (response) ->
        assert.eq response.data, :hello
        resolve()

    AfterEventsRouter.getAfterEventsRouter pipelineRegistry
    .registerPipelineListener myPipeline, :myPipeline :myRequest

    myPipeline.myRequest {}
