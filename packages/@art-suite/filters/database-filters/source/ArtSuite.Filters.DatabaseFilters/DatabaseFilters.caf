import &ArtStandardLib, &ArtValidation,
  &@ArtSuite/LinkFieldsFilters
  &@ArtSuite/ValidationFilter
  &@ArtSuite/AfterEventsFilter
  &@ArtSuite/DataUpdatesFilter
  &@ArtSuite/TimestampFilter
  &@ArtSuite/UniqueIdFilter
  &@ArtSuite/UserOwnedFilter
  &@ArtSuite/ValidationFilter

Validator extract normalizeFieldProps

class DatabaseFilters
  ## createDatabaseFilters
    IN:
      options:
        fields: {}
        userOwned: t/f/{}
        linkFilterVersion:
          null, 2, :transition2A, :transition2B

      PipelineClass: <Pipeline> (required)
  @createDatabaseFilters: (options = {}, PipelineClass) ->
    if options?.fields
      options extract
        fields extract id
        userOwned, linkFilterVersion
    else
      log.warn "DEPRICATED: (Pipeline: #{PipelineClass?.name}) you should now specify fields as: createDatabaseFilters fields: {}"
      (fields = options) extract? id, userOwned

    if userOwned
      throw new Error "expecting object or boolean" unless userOwned is Object or userOwned is Boolean
      fields.user = "" required link
      fields = objectWithout fields, :userOwned

    if id
      uniqueIdProps = id
      fields = objectWithout fields, :id

    linkFields  = {}
    otherFields = {}
    addValidationFilter = false
    otherFields = object v, k in fields
      if (v = normalizeFieldProps v) extract link
        linkFields[k]       = v
        :object

      else
        addValidationFilter = true
        v

    compactFlatten []
      getLinkFieldFilters linkFields, linkFilterVersion
      new ValidationFilter fields: otherFields, exclusive: true if addValidationFilter
      new AfterEventsFilter
      new DataUpdatesFilter
      new UniqueIdFilter uniqueIdProps unless present(PipelineClass?._keyFieldsString) && PipelineClass._keyFieldsString != "id"
      new TimestampFilter
      new UserOwnedFilter userOwned if userOwned
