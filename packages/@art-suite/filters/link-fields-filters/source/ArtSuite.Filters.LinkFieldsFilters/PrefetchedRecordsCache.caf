import &artClassSystem, &ArtStandardLib

class PrefetchedRecordsCache extends BaseClass

  @_prefetchedRecordsCaches = {}

  @getPrefetchedRecordsCacheForPipeline = (pipeline) =>
    @_prefetchedRecordsCaches[pipeline.registry.uniqueName] ?= new PrefetchedRecordsCache

  @getPrefetchedRecord = (pipeline, key) =>
    @getPrefetchedRecordsCacheForPipeline pipeline
    .get pipeline.name, key

  @addPrefetchedRecords = (pipeline, recordsByPipelineNameAndKey, expirationSeconds) =>
    @getPrefetchedRecordsCacheForPipeline pipeline
    .addPrefetchedRecords recordsByPipelineNameAndKey, expirationSeconds

  constructor: ->
    @_repository = []

  get: (pipelineName, key) ->
    find r in @_repository with r[pipelineName]?[key]

  addPrefetchedRecords: (recordsByPipelineNameAndKey, expirationSeconds = 1) ->
    throw new Error "expecting Object" unless recordsByPipelineNameAndKey is Object
    @_repository.push recordsByPipelineNameAndKey
    timeout expirationSeconds * 1000, ->
      @_repository = array r in @_repository when r != recordsByPipelineNameAndKey
