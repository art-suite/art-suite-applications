import &StandardImport, &Config, &ArtEvents
&@art-suite/art-foundation extract JsonStore.jsonStore

class Session extends EventedMixinCaf BaseObject
  @getter
    :registry
    pipelines: -> @registry.pipelines

  constructor: (data, @_jsonStoreKey, @_registry) ->
    @_data = data ? {}
    @_startPollingSession() if isBrowser
    throw new Error "registry required" unless @registry

  _startPollingSession: ->
    interval 5000 -> @reloadSession()

  reloadSession: ->
    @_sessionLoadPromise = null
    @loadSession()

  loadSession: ->
    @_sessionLoadPromise ?= if config.saveSessions
      Promise.then -> jsonStore.getItem @jsonStoreKey
      .then (data) -> @data = data unless eq data, @data

    else
      Promise.then -> @data

  @getter
    :sessionLoadPromise
    :data
    :updatedAt
    jsonStoreKey: -> @_jsonStoreKey ? "Art.Ery.Session"

    loadedDataPromise: -> @loadSession().then => @data

    sessionSignature: -> @_data?.signature

    inspectedObjects: -> @_data

  @setter
    data: (data) ->
      # _updatedAt is set before the if-block so that we can
      # validate when updates are attempted in the tests.
      @_updatedAt = toMilliseconds()
      if isPlainObject(data) && !plainObjectsDeepEq data, @_data
        @queueEvent :change {} data
        jsonStore.setItem @jsonStoreKey, data if config.saveSessions
        @_data = data

  reset: -> @data = {}

  # @singleton.loadSession() if isBrowser