import &ArtStandardLib

removeFromCleanStackTraceRegExp =
  ///
    ^\s+at\_
    processImmediate
    | Art.Ery/(Pipeline|Request|Filter\b)
    | ArtSuite/ArtPipelines/(Pipeline|Request|Filter\b)
    | node_modules/.*(
      mocha
      | bluebird
      | jest
      | art-testbench
      | @art-suite/chained-test
      | @art-suite/assert
      | caffeine-script-runtime
    )

repathStackTrace = if isNode
  path = eval("require") "path"
  cwd = global.process.cwd()
  (line) ->
    if getEnv().ART_PIPELINES_REPATH_STACK_TRACE
      line.replace /([^ (]+)(?=:\d+)/, (filePath) ->
        path.relative cwd, filePath
    else line
else
  (line) -> line

{}
  getCleanStackTraceWarning = ->
    unless getEnv().ART_PIPELINES_CLEAN_STACK_TRACE == false || getEnv().ART_PIPELINES_CLEAN_STACK_TRACE == :false
      "" NOTE: cleanStackTrace applied. Disable with: getEnv().ART_PIPELINES_CLEAN_STACK_TRACE=false

    else ''

  cleanStackTrace = (stack, keepFirstLine, quiet) ->
    return stack if getEnv().ART_PIPELINES_CLEAN_STACK_TRACE == false || getEnv().ART_PIPELINES_CLEAN_STACK_TRACE == :false
    if (error = stack) instanceof Error
      error.stack = cleanStackTrace error.stack, keepFirstLine, quiet
      error

    else if stack is String
      outLines = array line, i in stack.split "\n" when (keepFirstLine || i > 0) && !removeFromCleanStackTraceRegExp.test line
        repathStackTrace line

      out = if outLines.length == 0
        stack
      else outLines.join "\n"
      if quiet then out
      else
        out
        + if /\n\s*$/.test out then '' else :\n
        + getCleanStackTraceWarning()

    else stack