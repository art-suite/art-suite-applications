import &StandardImport, {} &Session

class PipelineRegistry extends BaseObject
  @singletonClass()

  @pipelineRegistries: pipelineRegistries = []

  constructor: (options = {})->
    unless isPlainObject options
      throw new Error "Expecting options object"
    {name, session, location = getDefaultLocation()} = options

    @_name = name ? @class.name
    @_pipelines = {}
    @_registryRegistry()
    @_location = validateLocation location

    if session || @location == :client
      throw new Error "session option must only be the session data" if session && !isPlainObject session
      @_session = new Session session, "ArtPipelines-#{@name}-Session", @

  _registryRegistry: ->
    registryNumber = pipelineRegistries.length
    @_uniqueName = "#{@name}#{registryNumber}"
    pipelineRegistries[registryNumber] = @

  @getter :name :pipelines :uniqueName :location :session
  @getter
    pipelineRegistry: -> @
    inspectedObjects: -> {}
      @name
      @uniqueName
      @pipelines

  # returns the Pipeline's singleton
  register: ({singleton, _aliases, name}) ->

    each _, alias in _aliases
      if @pipelines[alias]
        throw new Error "Error registrying alias #{formattedInspect alias} for Pipeline '#{name}' - already exists: #{formattedInspect @pipelines[alias]}"
      @pipelines[alias] = singleton

    @pipelines[singleton extract name] = singleton
    singleton
