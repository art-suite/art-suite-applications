import &StandardImport

Pipeline.registry new PipelineRegistry session: {}

&ArtConfig.configure()
describe
  afterFilterFailures: ->
    test "internal error", ->
      filterLog = []
      class MyPipeline extends Pipeline
        @publicHandlers create: (request) -> foo: 1, bar: 2
        @filter name: :myFilter1 after: create: (response) -> filterLog.push :myFilter1; response
        @filter name: :myFilter2 after: create: (response) -> filterLog.push :myFilter2; throw new Error "internal oops"
        @filter name: :myFilter3 after: create: (response) -> filterLog.push :myFilter3; response

      p = new MyPipeline
      assert.rejects p.create()
      .then (error) ->
        {response} = error.props
        assert.present response.errorProps.failedIn, :failedIn
        assert.eq filterLog, ["myFilter1", "myFilter2"]
        assert.match error.message, "internal oops"
        assert.eq response.errorProps.source.this.name, "myFilter2"

    test "clientFailure", ->
      class MyPipeline extends Pipeline
        @publicHandlers create: (request) -> foo: 1, bar: 2
        @filter name: :myFilter1 after: create: (response) -> response
        @filter name: :myFilter2 after: create: (response) -> response.clientFailure "you lose!"
        @filter name: :myFilter3 after: create: (response) -> response

      p = new MyPipeline
      assert.rejects p.create()
      .then (error) ->
        {response} = error.props
        assert.present response.errorProps.failedIn
        assert.eq simplifyFilterLog(response.beforeFilterLog), []
          :server-pending-created
          :server-success-handler-myPipeline

        assert.eq simplifyFilterLog(response.afterFilterLog),  []
          :server-success-afterFilter-myFilter1
          :server-clientFailure-afterFilter-myFilter2
          :server-clientFailure-completed

        assert.match response.data.message, "you lose!"
        assert.doesNotExist error.props.response.errorProps.source

  beforeFilterFailures: ->
    test "clientFailure", ->
      class MyPipeline extends Pipeline
        @publicHandlers create: (request) -> foo: 1, bar: 2
        @filter name: :myFilter1 before: create: (response) -> response
        @filter name: :myFilter2 before: create: (response) -> response.failure "you lose!"
        @filter name: :myFilter3 before: create: (response) -> response

      p = new MyPipeline
      assert.rejects p.create()
      .then (error) ->
        {response} = error.props
        assert.present response.errorProps.failedIn
        assert.eq
          simplifyFilterLog response.beforeFilterLog
          []
            :server-pending-created
            :server-pending-beforeFilter-myFilter3
            :server-serverFailure-beforeFilter-myFilter2

        assert.eq
          simplifyFilterLog response.afterFilterLog
          [] :server-serverFailure-completed

        assert.doesNotExist response.handledBy
        assert.eq response.failedIn.name, :myFilter2
        assert.eq response.data.message, "you lose!"

    test "internal error", ->
      filterLog = []
      class MyPipeline extends Pipeline
        @publicHandlers create: (request) -> foo: 1, bar: 2
        @filter name: "myFilter1", before: create: (response) -> filterLog.push "myFilter1"; response
        @filter name: "myFilter2", before: create: (response) -> filterLog.push "myFilter2"; throw new Error "internal oops"
        @filter name: "myFilter3", before: create: (response) -> filterLog.push "myFilter3"; response

      p = new MyPipeline
      assert.rejects p.create()
      .then (error) ->
        {response} = error.props
        assert.present response.errorProps.failedIn
        assert.eq filterLog, ["myFilter3", "myFilter2"]
        assert.match error.message, "internal oops"
        assert.eq response.errorProps.source.this.name, "myFilter2"

  handlerFailures: ->
    test "internal error", ->
      filterLog = []
      class MyPipeline extends Pipeline
        @publicHandlers create: (request) -> throw new Error "internal oops"
        @filter name: "myFilter1", before:  create: (response) -> filterLog.push "myFilter1"; response
        @filter name: "myFilter2", after:   create: (response) -> filterLog.push "myFilter2"; response

      p = new MyPipeline
      assert.rejects p.create()
      .then (error) ->
        if !error.props
          log WTF: error
        {response} = error.props
        assert.present response.errorProps.failedIn
        assert.eq filterLog, ["myFilter1"]
        assert.match error.message, "internal oops"
        assert.eq error.props.response.errorProps.source.this.name, "myPipeline"
