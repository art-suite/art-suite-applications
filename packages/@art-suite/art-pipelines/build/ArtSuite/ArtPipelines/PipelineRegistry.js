"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "Error", "formattedInspect", "isPlainObject", "getDefaultLocation", "validateLocation", "Session"], [global, require('./StandardImport'), {Session: require('./Session')}], (BaseObject, Error, formattedInspect, isPlainObject, getDefaultLocation, validateLocation, Session) => {let PipelineRegistry; return PipelineRegistry = Caf.defClass(class PipelineRegistry extends BaseObject {constructor(options = {}) {let name, session, location; super(...arguments); if (!isPlainObject(options)) {throw new Error("Expecting options object");}; ({name, session, location = getDefaultLocation()} = options); this._name = name != null ? name : this.class.name; this._pipelines = {}; this._registryRegistry(); this._location = validateLocation(location); if (session || this.location === "client") {if (session && !isPlainObject(session)) {throw new Error("session option must only be the session data");}; this._session = new Session(session, `ArtPipelines-${Caf.toString(this.name)}-Session`, this);};};}, function(PipelineRegistry, classSuper, instanceSuper) {let pipelineRegistries; this.singletonClass(); this.pipelineRegistries = pipelineRegistries = []; this.prototype._registryRegistry = function() {let registryNumber; registryNumber = pipelineRegistries.length; this._uniqueName = `${Caf.toString(this.name)}${Caf.toString(registryNumber)}`; return pipelineRegistries[registryNumber] = this;}; this.getter("name", "pipelines", "uniqueName", "location", "session"); this.getter({pipelineRegistry: function() {return this;}, inspectedObjects: function() {return {name: this.name, uniqueName: this.uniqueName, pipelines: this.pipelines};}}); this.prototype.register = function({singleton, _aliases, name}) {Caf.each2(_aliases, (_, alias) => {if (this.pipelines[alias]) {throw new Error(`Error registrying alias ${Caf.toString(formattedInspect(alias))} for Pipeline '${Caf.toString(name)}' - already exists: ${Caf.toString(formattedInspect(this.pipelines[alias]))}`);}; return this.pipelines[alias] = singleton;}); this.pipelines[name = singleton.name] = singleton; return singleton;};});});});
//# sourceMappingURL=PipelineRegistry.js.map
