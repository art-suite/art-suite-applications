"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["isNode", "getEnv", "Error", "String"], [global, require('art-standard-lib')], (isNode, getEnv, Error, String) => {let removeFromCleanStackTraceRegExp, repathStackTrace, path, cwd, getCleanStackTraceWarning, cleanStackTrace; removeFromCleanStackTraceRegExp = /processImmediate|Art.Ery\/(Pipeline|Request|Filter\b)|ArtSuite\/ArtPipelines\/(Pipeline|Request|Filter\b)|node_modules\/.*(mocha|bluebird|jest|art-testbench|@art-suite\/chained-test|@art-suite\/assert|caffeine-script-runtime)/; repathStackTrace = isNode ? (path = eval("require")("path"), cwd = global.process.cwd(), function(line) {return line.replace(/([^ (]+)(?=:\d+)/, (filePath) => path.relative(cwd, filePath));}) : function(line) {return line;}; return {getCleanStackTraceWarning: getCleanStackTraceWarning = function() {return !(getEnv().ART_PIPELINES_CLEAN_STACK_TRACE === false || getEnv().ART_PIPELINES_CLEAN_STACK_TRACE === "false") ? "NOTE: cleanStackTrace applied. Disable with: getEnv().ART_PIPELINES_CLEAN_STACK_TRACE=false" : "";}, cleanStackTrace: cleanStackTrace = function(stack, keepFirstLine, quiet) {let error, outLines, out; if (getEnv().ART_PIPELINES_CLEAN_STACK_TRACE === false || getEnv().ART_PIPELINES_CLEAN_STACK_TRACE === "false") {return stack;}; return ((error = stack) instanceof Error) ? (error.stack = cleanStackTrace(error.stack, keepFirstLine, quiet), error) : (Caf.is(stack, String)) ? (outLines = Caf.array(stack.split("\n"), (line, i) => repathStackTrace(line), (line, i) => (keepFirstLine || i > 0) && !removeFromCleanStackTraceRegExp.test(line)), out = (outLines.length === 0) ? stack : outLines.join("\n"), quiet ? out : out + (/\n\s*$/.test(out) ? "" : "\n") + getCleanStackTraceWarning()) : stack;}};});});
//# sourceMappingURL=Stack.js.map
