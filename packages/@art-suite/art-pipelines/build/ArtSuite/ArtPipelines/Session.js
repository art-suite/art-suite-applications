"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["EventedMixinCaf", "BaseObject", "isBrowser", "interval", "config", "Promise", "eq", "Error", "toMilliseconds", "isPlainObject", "plainObjectsDeepEq"], [global, require('./StandardImport'), require('./Config'), require('art-events')], (EventedMixinCaf, BaseObject, isBrowser, interval, config, Promise, eq, Error, toMilliseconds, isPlainObject, plainObjectsDeepEq) => {let jsonStore, Session; jsonStore = require('@art-suite/art-foundation').JsonStore.jsonStore; return Session = Caf.defClass(class Session extends EventedMixinCaf(BaseObject) {constructor(data, _jsonStoreKey, _registry) {super(...arguments); this._jsonStoreKey = _jsonStoreKey; this._registry = _registry; this._data = data != null ? data : {}; if (isBrowser) {this._startPollingSession();}; if (!this.registry) {throw new Error("registry required");};};}, function(Session, classSuper, instanceSuper) {this.getter("registry", {pipelines: function() {return this.registry.pipelines;}}); this.prototype._startPollingSession = function() {return interval(5000, () => this.reloadSession());}; this.prototype.reloadSession = function() {this._sessionLoadPromise = null; return this.loadSession();}; this.prototype.loadSession = function() {let temp; return ((temp = this._sessionLoadPromise) != null ? temp : this._sessionLoadPromise = config.saveSessions ? Promise.then(() => jsonStore.getItem(this.jsonStoreKey)).then((data) => !eq(data, this.data) ? this.data = data : undefined) : Promise.then(() => this.data));}; this.getter("sessionLoadPromise", "data", "updatedAt", {jsonStoreKey: function() {let temp; return ((temp = this._jsonStoreKey) != null ? temp : "Art.Ery.Session");}, loadedDataPromise: function() {if (config.location === "server") {throw new Error("INTERNAL ERROR: Attempted to access the global session serverside. HINT: Use 'session: {}' for no-session requests.");}; return this.loadSession().then(() => this.data);}, sessionSignature: function() {let base; return Caf.exists(base = this._data) && base.signature;}, inspectedObjects: function() {return this._data;}}); this.setter({data: function(data) {this._updatedAt = toMilliseconds(); return (isPlainObject(data) && !plainObjectsDeepEq(data, this._data)) ? (this.queueEvent("change", {data}), config.saveSessions ? jsonStore.setItem(this.jsonStoreKey, data) : undefined, this._data = data) : undefined;}}); this.prototype.reset = function() {return this.data = {};}; if (isBrowser) {this.singleton.loadSession();};});});});
//# sourceMappingURL=Session.js.map
