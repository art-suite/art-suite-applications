"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "PrefetchedRecordsCache", "assert", "timeout"], [global, require('../StandardImport')], (test, PrefetchedRecordsCache, assert, timeout) => {test("addPrefetchedRecords, get", function() {let dataUpdates, myObject; dataUpdates = new PrefetchedRecordsCache; dataUpdates.addPrefetchedRecords({myPipeline: {myKey: myObject = "anyObjectWillDo"}}, .1); return assert.eq(myObject, dataUpdates.get("myPipeline", "myKey"));}); test("addPrefetchedRecords, addPrefetchedRecords, get", function() {let dataUpdates, myObject, myOtherObject; dataUpdates = new PrefetchedRecordsCache; dataUpdates.addPrefetchedRecords({myPipeline: {myKey: myObject = "anyObjectWillDo"}}, .1); dataUpdates.addPrefetchedRecords({myOtherPipeline: {myKey: myOtherObject = "anyOtherObjectWillDo"}}, .1); assert.eq(myObject, dataUpdates.get("myPipeline", "myKey")); return assert.eq(myOtherObject, dataUpdates.get("myOtherPipeline", "myKey"));}); return test("addPrefetchedRecords, expire, get", function() {let dataUpdates, myObject; dataUpdates = new PrefetchedRecordsCache; dataUpdates.addPrefetchedRecords({myPipeline: {myKey: myObject = "anyObjectWillDo"}}, .001); return timeout(10, () => assert.doesNotExist(dataUpdates.get("myPipeline", "myKey")));});});});
//# sourceMappingURL=PrefetchedRecords.test.js.map
