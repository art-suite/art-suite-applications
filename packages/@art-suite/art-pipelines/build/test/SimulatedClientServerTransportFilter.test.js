"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Filter", "test", "Pipeline", "assert", "simplifyFilterLog"], [global, require('./StandardImport'), require('./getSimulatedTestingFromClientResources')()], (Filter, test, Pipeline, assert, simplifyFilterLog) => {let SimulatedClientServerTransportFilter; require('art-config').configure(); SimulatedClientServerTransportFilter = Caf.defClass(class SimulatedClientServerTransportFilter extends Filter {}, function(SimulatedClientServerTransportFilter, classSuper, instanceSuper) {this.location("client"); this.group("handler"); this.before({all: function(request) {return request.pipeline.processClientToServerRequest(request);}});}); return test("with SimulatedClientServerTransportFilter", function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.filter(SimulatedClientServerTransportFilter); this.publicHandler({get: function() {return "get-handler";}});})); assert.eq(myPipeline.pipelineReport, {fields: {}, requestTypes: {get: {}}, publicRequestTypes: {get: true}, processing: {client: {get: ["SimulatedClientServerTransportFilter", "[remote request]"]}, server: {get: ["[local handler]"]}}}); return myPipeline.get({returnResponse: true}).then((response) => assert.eq(simplifyFilterLog(response.filterLog), ["client-pending-created", "client-success-beforeFilter-SimulatedClientServerTransportFilter", "client-pending-continueAtServerLocation", "server-pending-created", "server-success-handler-myPipeline", "server-success-completed", "client-success-resumedAtClientLocation", "client-success-completed"]));});});});
//# sourceMappingURL=SimulatedClientServerTransportFilter.test.js.map
