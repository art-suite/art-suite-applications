"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Pipeline", "assert"], [global, require('../StandardImport')], (test, Pipeline, assert) => {return {suite: function() {test("basic", () => {let MyPipeline, p; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandlers({foo: function(request) {return {foo: 1, bar: 2};}});}); p = new MyPipeline; assert.eq(p.filters.length, 0); return p.foo().then((data) => assert.eq(data, {foo: 1, bar: 2}));}); test("return string", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandlers({foo: function(request) {return "my string";}});}); return (new MyPipeline).foo().then((data) => assert.eq(data, "my string"));}); test("return false", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandlers({foo: function() {return false;}});}); return (new MyPipeline).foo().then((data) => assert.eq(data, false));}); return test("query handlers", () => {let Post; Post = Caf.defClass(class Post extends Pipeline {}, function(Post, classSuper, instanceSuper) {this.query({postByUserId: function(request) {return [request.key, 1, 2, 3];}}); this.publicRequestTypes("postByUserId");}); assert.eq(Post.post.clientApiMethodList, ["postByUserId"]); return Post.post.postByUserId({key: "foo"}).then((results) => assert.eq(results, ["foo", 1, 2, 3]));});}};});});
//# sourceMappingURL=PipelineHandlers.js.map
