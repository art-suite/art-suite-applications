"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Pipeline", "Object", "merge"], [global, require('../StandardImport')], (Pipeline, Object, merge) => {let SimplePipeline; return SimplePipeline = Caf.defClass(class SimplePipeline extends Pipeline {constructor() {super(...arguments); this._store = {}; this._nextUniqueKey = 0;};}, function(SimplePipeline, classSuper, instanceSuper) {this.getter("store", {nextUniqueKey: function() {while (this._store[this._nextUniqueKey]) {this._nextUniqueKey++;}; return (this._nextUniqueKey++).toString();}}); this.publicRequestTypes("reset", "get", "getAll", "create", "update", "delete"); this.handlers({reset: function({data}) {this._store = data || {}; return {};}, get: function({key}) {return this._store[key];}, getAll: function() {return Caf.array(Object.keys(this._store).sort(), (k) => this.store[k]);}, create: function(request) {let data; ({data} = request); data = data.id ? data : merge(data, {id: this.nextUniqueKey}); return this._store[data.id] ? request.clientFailure(`Record already exists with id: ${Caf.toString(data.id)}`) : this._store[data.id] = data;}, update: function({key, data}) {let previousData; return (previousData = this._store[key]) ? this._store[key] = merge(previousData, data) : undefined;}, delete: function({key}) {let previousData; return (previousData = this._store[key]) ? (this._store[key] = null, previousData) : undefined;}});});});});
//# sourceMappingURL=SimplePipeline.js.map
