"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Filter", "Pipeline", "assert"], [global, require('../StandardImport'), require('../PipelineWithRegistry')], (describe, test, Filter, Pipeline, assert) => {return describe({definedInFilterClass: function() {test("filter can define request type", () => {let requestDefinedRequestType, MyFilter, myPipe, MyPipe; requestDefinedRequestType = {heartbeat: {response: {data: "string"}}}; MyFilter = Caf.defClass(class MyFilter extends Filter {}, function(MyFilter, classSuper, instanceSuper) {this.requestType(requestDefinedRequestType); this.before({heartbeat: function() {return "OK";}});}); ({myPipe} = MyPipe = Caf.defClass(class MyPipe extends Pipeline {}, function(MyPipe, classSuper, instanceSuper) {this.filter(MyFilter);})); return assert.eq(myPipe.requestTypes, requestDefinedRequestType);}); return test("all-filter does not define 'all' request type", () => {let MyFilter, myPipe, MyPipe; MyFilter = Caf.defClass(class MyFilter extends Filter {}, function(MyFilter, classSuper, instanceSuper) {this.before({all: function(request) {return request;}});}); ({myPipe} = MyPipe = Caf.defClass(class MyPipe extends Pipeline {}, function(MyPipe, classSuper, instanceSuper) {this.filter(MyFilter); this.handler({get: function() {return "OK";}});})); return assert.eq(myPipe.requestTypes, {get: {}});});}, definedInline: function() {test("filter can define request type", () => {let requestDefinedRequestType, myPipe, MyPipe; requestDefinedRequestType = {heartbeat: {response: {data: "string"}}}; ({myPipe} = MyPipe = Caf.defClass(class MyPipe extends Pipeline {}, function(MyPipe, classSuper, instanceSuper) {this.filter({requestType: requestDefinedRequestType, before: {heartbeat: function() {return "OK";}}});})); return assert.eq(myPipe.requestTypes, requestDefinedRequestType);}); return test("all-filter does not define 'all' request type", () => {let myPipe, MyPipe; ({myPipe} = MyPipe = Caf.defClass(class MyPipe extends Pipeline {}, function(MyPipe, classSuper, instanceSuper) {this.filter({all: function(request) {return request;}}); this.handler({get: function() {return "OK";}});})); return assert.eq(myPipe.requestTypes, {get: {}});});}});});});
//# sourceMappingURL=FilterDefinedRequestType.test.js.map
