"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["PipelineRegistry", "describe", "test", "assert", "chainedTest", "Session", "Promise"], [global, require('./StandardImport')], (PipelineRegistry, describe, test, assert, chainedTest, Session, Promise) => {let pipelines, pipelineRegistry; ({pipelines} = pipelineRegistry = new PipelineRegistry); return describe({locationsAndSessions: function() {test("singleton instance does not exist when location is server", () => {let session, location; ({session, location} = pipelineRegistry); assert.eq(location, "server"); return assert.doesNotExist(session);}); test("client-side gets a session automatically", () => {let session, location; ({session, location} = new PipelineRegistry({location: "client"})); assert.eq(location, "client"); return assert.exists(session);}); test("server-side with now session is the default", () => {let session, location; ({session, location} = new PipelineRegistry); assert.eq(location, "server"); return assert.doesNotExist(session);}); return test("server-side can have a session, if provided", () => {let session, location; ({session, location} = new PipelineRegistry({session: {}})); assert.eq(location, "server"); return assert.exists(session);});}, basics: function() {test("session data setter and getter", () => {let session; session = new Session({userId: "123"}, null, pipelineRegistry); session.data = {userId: "abc"}; return assert.eq(session.data, {userId: "abc"});}); test("change event", () => new Promise((done) => {let session; session = new Session({userId: "123"}, null, pipelineRegistry); session.on({change: ({props}) => {assert.eq(props, {data: {userId: "456"}}); return done();}}); return session.data = {userId: "456"};})); return chainedTest("new Session", () => (new PipelineRegistry({location: "client"})).session).tapTest("no session at start", (session) => assert.eq(session.data, {})).tapTest("session.data = userId: :123", (session) => {session.data = {userId: "123"}; return assert.eq(session.data, {userId: "123"});}).tapTest("session.data = foo: 'bar'", (session) => {session.data = {foo: "bar"}; return assert.eq(session.data, {foo: "bar"});});}});});});
//# sourceMappingURL=Session.test.js.map
