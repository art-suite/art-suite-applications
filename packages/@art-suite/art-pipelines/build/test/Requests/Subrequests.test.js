"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "beforeEach", "objectWithout", "Pipeline", "merge", "Object", "test", "assert"], [global, require('../StandardImport'), require('../getSimulatedTestingFromClientResources')()], (describe, beforeEach, objectWithout, Pipeline, merge, Object, test, assert) => {require('art-config').configure(); return describe({subrequests: function() {let subrequestPipeline, subrequestHandlers, subrequestCompatibleHandlers, key, props; subrequestPipeline = null; subrequestHandlers = {form1: (request) => subrequestPipeline.bar(request, {props: request.props}), form2: (request) => subrequestPipeline.bar(request, request.key, {props: objectWithout(request.props, "key")}), form3: (request) => request.subrequest("subrequestPipeline", "bar", {props: request.props}), form4: (request) => request.subrequest("subrequestPipeline", "bar", request.key, {props: objectWithout(request.props, "key")}), form5: (request) => subrequestPipeline.bar(request)}; subrequestCompatibleHandlers = {compatibleForm1: (request) => subrequestPipeline.bar(null, {props: request.props}), compatibleForm2: (request) => subrequestPipeline.bar(null, request.key, {props: objectWithout(request.props, "key")})}; beforeEach(() => {let SubrequestPipeline; return ({subrequestPipeline} = SubrequestPipeline = Caf.defClass(class SubrequestPipeline extends Pipeline {}, function(SubrequestPipeline, classSuper, instanceSuper) {let handlers; this.handlers(handlers = merge(subrequestHandlers, subrequestCompatibleHandlers, {bar: function(request) {return merge(request.props, {isSubrequest: !!request.parentRequest});}})); this.publicRequestTypes("HOWHOW", Object.keys(handlers));}), {subrequestPipeline});}); key = "myKey"; props = {prop1: "propValue1"}; Caf.each2(subrequestHandlers, (_, k) => test(`subrequests ${Caf.toString(k)}`, () => subrequestPipeline[k](key, {props}).then((data) => assert.eq(data, merge(props, {key, isSubrequest: true}))))); return Caf.each2(subrequestCompatibleHandlers, (_, k) => test(`subrequestCompatible ${Caf.toString(k)}`, () => subrequestPipeline[k](key, {props}).then((data) => assert.eq(data, merge(props, {key, isSubrequest: false})))));}});});});
//# sourceMappingURL=Subrequests.test.js.map
