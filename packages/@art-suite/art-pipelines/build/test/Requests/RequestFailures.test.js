"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Pipeline", "assert", "Error"], [global, require('../StandardImport'), require('../getSimulatedTestingFromClientResources')()], (describe, test, Pipeline, assert, Error) => {require('art-config').configure(); return describe({failures: function() {test("no handler", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicRequestTypes("get");})); return assert.rejects(myPipeline.get("bar")).then((rejectsWith) => assert.match(rejectsWith.stack, /myPipeline-noHandler(.|\n)+continueAtServerLocation(.|\n)+source\/test\/Requests\/RequestFailures.test.caf(.|\n)+/));}); return test("error in handler", () => {let customErrorMessage, myPipeline, MyPipeline; customErrorMessage = "My my my, this is a custom failure!"; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandler({get: function(request) {return (() => {throw new Error(customErrorMessage);})();}});})); return assert.rejects(myPipeline.get("bar")).then((rejectsWith) => assert.match(rejectsWith.stack, RegExp(`${Caf.toString(customErrorMessage)}(.|\\n)+source\\/test\\/Requests\\/RequestFailures.test.caf(.|\\n)+myPipeline-handler(.|\\n)+continueAtServerLocation(.|\\n)+source\\/test\\/Requests\\/RequestFailures.test.caf(.|\\n)+`)));});}, originatedOnServer: function() {test("baseline: originatedOnServer OK when actually from server", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandler({get: function(request) {return request.requireServerOrigin().then(() => "Yes, master!");}});})); return myPipeline.get("bar", {location: "server"});}); return test("originatedOnServer enforced", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.publicHandler({get: function(request) {return request.requireServerOrigin().then(() => "Yes, master!");}});})); return assert.rejects(myPipeline.get("bar")).then((rejectsWith) => assert.match(rejectsWith.stack, /originatedOnServer required(.|\n)+myPipeline-handler(.|\n)+continueAtServerLocation(.|\n)+source\/test\/Requests\/RequestFailures.test.caf(.|\n)+/));});}});});});
//# sourceMappingURL=RequestFailures.test.js.map
