"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Pipeline", "PipelineRegistry", "assert"], [global, require('../StandardImport')], (describe, test, Pipeline, PipelineRegistry, assert) => {require('art-config').configure(); return describe({trueDefault: function() {return test("in tests, server is the default", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.registry(new PipelineRegistry); this.publicHandler({get: function(request) {return `${Caf.toString(request.location)}-handler`;}});})); return myPipeline.get("bar", {returnResponse: true}).then(({data, location, rootRequest}) => assert.eq(data, "server-handler"));});}, defaultLocation_client: function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.registry(new PipelineRegistry({defaultLocation: "client"})); this.filter({name: "server-filter", location: "server", after: {get: function({data}) {return `${Caf.toString(data)}/server-filter`;}}}); this.filter({name: "client-filter", location: "client", after: {get: function({data}) {return `${Caf.toString(data)}/client-filter`;}}}); this.publicHandler({get: function(request) {return `${Caf.toString(request.location)}-handler`;}});})); test("client (default)", () => myPipeline.get("bar", {returnResponse: true}).then(({data, location, rootRequest, filterLog}) => assert.eq(data, "client-handler/client-filter"))); return test("server (override)", () => myPipeline.get("bar", {returnResponse: true, location: "server"}).then(({data, location, rootRequest, filterLog}) => assert.eq(data, "server-handler/server-filter")));}});});});
//# sourceMappingURL=RequestLocations.test.js.map
