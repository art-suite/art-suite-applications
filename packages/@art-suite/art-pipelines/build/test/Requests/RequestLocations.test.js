"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Pipeline", "PipelineRegistry", "assert", "Promise", "compactFlattenAll"], [global, require('../StandardImport')], (describe, test, Pipeline, PipelineRegistry, assert, Promise, compactFlattenAll) => {require('art-config').configure(); return describe({trueDefault: function() {return test("in tests, server is the default", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry); this.publicHandler({get: function(request) {return `${Caf.toString(request.location)}-handler`;}});})); return myPipeline.get("bar", {session: {}}).then((data) => assert.eq(data, "server-handler"));});}, location_client: function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry({location: "client"})); this.filter({name: "server-filter", location: "server", after: {get: function({data}) {return `${Caf.toString(data)}/server-filter`;}}}); this.filter({name: "client-filter", location: "client", after: {get: function({data}) {return `${Caf.toString(data)}/client-filter`;}}}); this.publicHandler({get: function(request) {return `${Caf.toString(request.location)}-handler`;}});})); test("client (default)", () => myPipeline.get("bar").then((data) => assert.eq(data, "server-handler/server-filter/client-filter"))); return test("server (override)", () => myPipeline.get("bar", {location: "server", session: {}}).then((data) => assert.eq(data, "server-handler/server-filter")));}, clientAndServerHandlers: function() {test("we can fake a client-side-only handler using a client-side only before-filter", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry({location: "client"})); this.filter({name: "client-filter-handler", location: "client", before: {get: function({data}) {return `${Caf.toString(data)}client-filter-handler`;}}}); this.filter({name: "server-filter", location: "server", after: {get: function({data}) {return `${Caf.toString(data)}/server-filter`;}}}); this.filter({name: "client-filter", location: "client", after: {get: function({data}) {return `${Caf.toString(data)}/client-filter`;}}}); this.publicHandler({get: function(request) {return `${Caf.toString(request.location)}-handler`;}});})); return Promise.all([myPipeline.get("bar").then((data) => assert.eq(data, "client-filter-handler/client-filter")), myPipeline.get("bar", {location: "server", session: {}}).then((data) => assert.eq(data, "server-handler/server-filter"))]);}); test("now, what if the client-side handler fires off a server-side request - faking like it's a remote request?", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry({location: "client"})); this.filter({name: "server-filter", location: "server", before: {get: function(request) {return request.withData(compactFlattenAll(request.data, "before-server-filter"));}}, after: {get: function(request) {return request.withData(compactFlattenAll(request.data, "after-server-filter"));}}}); this.filter({name: "client-filter", location: "client", before: {get: function(request) {return request.withData(compactFlattenAll(request.data, "before-client-filter"));}}, after: {get: function(request) {return request.withData(compactFlattenAll(request.data, "after-client-filter"));}}}); this.publicHandler({get: function({data, location}) {return compactFlattenAll(data, `${Caf.toString(location)}-handler`);}});})); return myPipeline.get("bar", {data: "requestData"}).then((data) => assert.eq(data, ["requestData", "before-client-filter", "before-server-filter", "server-handler", "after-server-filter", "after-client-filter"])).then(() => myPipeline.get("bar", {data: "requestData", location: "server", session: {}})).then((data) => assert.eq(data, ["requestData", "before-server-filter", "server-handler", "after-server-filter"]));}); return test("both-filter", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry({location: "client"})); this.filter({name: "both-filter", location: "both", before: {get: function(request) {return request.withData(compactFlattenAll(request.data, `before-both/${Caf.toString(request.location)}-filter`));}}, after: {get: function(request) {return request.withData(compactFlattenAll(request.data, `after-both/${Caf.toString(request.location)}-filter`));}}}); this.publicHandler({get: function({data, location}) {return compactFlattenAll(data, `${Caf.toString(location)}-handler`);}});})); return myPipeline.get("bar", {data: "requestData"}).then((data) => assert.eq(data, ["requestData", "before-both/client-filter", "before-both/server-filter", "server-handler", "after-both/server-filter", "after-both/client-filter"]));});}});});});
//# sourceMappingURL=RequestLocations.test.js.map
