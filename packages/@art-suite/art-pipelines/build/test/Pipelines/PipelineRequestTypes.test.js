"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "chainedTest", "Pipeline", "assert", "normalizeFieldProps", "test", "merge", "Filter"], [global, require('../StandardImport'), require('art-validation')], (describe, chainedTest, Pipeline, assert, normalizeFieldProps, test, merge, Filter) => {return describe({basics: function() {return chainedTest("simple", () => {let requestTypes, myPipeline, MyPipeline; requestTypes = null; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes(requestTypes = {getTime: {response: {data: {time: "number"}}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return myPipeline;}).thenTest("simple normalizedRequestTypes", (myPipeline) => assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps({fields: {time: "number"}})}}}));}, normalized: function() {test("singleton data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes({getTime: {response: {data: "number"}}});})); return assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps("number")}}});}); return test(":record data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.fields({name: "string"}); this.requestTypes({getTime: {response: {data: "record"}}});})); return assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: merge(normalizeFieldProps({fields: myPipeline.fields}), {fieldType: "record"})}}});});}, filters: function() {return test("filters can define request-types", () => {let requestTypes, CrudFilter, pipelineRequestTypes, myUser, MyUser; requestTypes = null; CrudFilter = Caf.defClass(class CrudFilter extends Filter {}, function(CrudFilter, classSuper, instanceSuper) {this.requestTypes(requestTypes = {get: {request: {key: "string"}, response: {data: "record"}}, create: {request: {data: "record"}, response: {key: "string", data: "record"}}, update: {request: {key: "string", data: "record"}, response: {data: "record"}}, delete: {request: {key: "string"}, response: {data: "record"}}});}); pipelineRequestTypes = null; ({myUser} = MyUser = Caf.defClass(class MyUser extends Pipeline {}, function(MyUser, classSuper, instanceSuper) {this.filter(CrudFilter); this.field({otherId: "string", age: "number"}); this.requestType(pipelineRequestTypes = {customRequestType: {request: {data: "string"}}, get: {request: {}, response: {data: "record"}}, userByOtherId: {request: {key: {otherId: "string"}}, response: {data: {array: "record"}}}, userByMultiSearch: {request: {keyFields: ["keyword", "age"], key: [{keyword: "string"}, "age"]}, response: {data: {array: "record"}}}});})); return assert.eq(myUser.requestTypes, merge(requestTypes, pipelineRequestTypes));});}});});});
//# sourceMappingURL=PipelineRequestTypes.test.js.map
