"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "isObject", "isArray", "isFunction", "chainedTest", "Pipeline", "assert", "normalizeFieldProps", "test", "merge", "Filter", "KeyFieldsMixin"], [global, require('../StandardImport'), require('art-validation'), require('../PipelineWithRegistry'), require('@art-suite/key-fields-mixin')], (describe, isObject, isArray, isFunction, chainedTest, Pipeline, assert, normalizeFieldProps, test, merge, Filter, KeyFieldsMixin) => {let stripFunctions; stripFunctions = function(value) {return (() => {switch (false) {case !isObject(value): return Caf.object(value, (v, k) => stripFunctions(v), (v, k) => !isFunction(v)); case !isArray(value): return Caf.array(value, (v) => stripFunctions(v), (v) => !isFunction(v)); default: return value;};})();}; return describe({basics: function() {let requestTypes; requestTypes = null; return chainedTest("simple", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes(requestTypes = {getTime: {response: {data: {time: "number"}}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return myPipeline;}).thenTest("simple normalizedRequestTypes", (myPipeline) => assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps({fields: {time: "number"}})}}}));}, autodefined: function() {test("handlers define request types", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handler({rock: function() {return "roll";}});})); return assert.eq(myPipeline.requestTypes, {rock: {}});}); return test("beforeFilters define request types and afterFilters do not", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.filter({name: "myFilter", before: {rock: function() {return "roll";}}}); this.filter({name: "myOtherFilter", after: {roll: function() {return "rap";}}});})); return assert.eq(myPipeline.requestTypes, {rock: {}});});}, normalized: function() {test("singleton data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes({getTime: {response: {data: "number"}}});})); return assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps("number")}}});}); return test(":record data", () => {let requestTypes, myPipeline, MyPipeline; requestTypes = null; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.fields({name: "string"}); this.requestTypes(requestTypes = {getTime: {response: {data: "record"}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: merge(normalizeFieldProps({fields: myPipeline.fields}), {fieldType: "record"})}}});});}, extraFields: function() {return test("singleton data", () => {let myPipeline, MyPipeline, result; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes({getTime: {summary: "My summary", description: "Even more info.", response: {data: "number"}}});})); return assert.eqAfterStringifyingFunctions(result = myPipeline.normalizedRequestTypes, {getTime: {summary: "My summary", description: "Even more info.", response: result.getTime.response}});});}, filters: function() {return test("filters can define request-types", () => {let ExampleFilter, pipelineRequestTypes, myUser, MyUser; ExampleFilter = Caf.defClass(class ExampleFilter extends Filter {}, function(ExampleFilter, classSuper, instanceSuper) {this.requestTypes({get: {request: {key: true}, response: {data: "record"}}});}); pipelineRequestTypes = null; ({myUser} = MyUser = Caf.defClass(class MyUser extends KeyFieldsMixin(Pipeline) {}, function(MyUser, classSuper, instanceSuper) {this.filter(ExampleFilter); this.fields({id: "id"}); this.requestType(pipelineRequestTypes = {get: {request: {data: "date"}}, response: {data: "record"}});})); assert.eq(myUser.normalizedFields, {id: {fieldType: "id", dataType: "string", required: true, validate: myUser.normalizedFields.id.validate}}); return assert.eq(myUser.requestTypes, pipelineRequestTypes);});}, examples: function() {test("crud", () => {let requestTypes, CrudFilter, pipelineRequestTypes, myUser, MyUser; requestTypes = null; CrudFilter = Caf.defClass(class CrudFilter extends Filter {}, function(CrudFilter, classSuper, instanceSuper) {this.requestTypes(requestTypes = {get: {request: {key: true}, response: {data: "record"}}, create: {request: {data: "record"}, response: {key: true, data: "record"}}, update: {request: {key: true, data: "record"}, response: {data: "record"}}, delete: {request: {key: true}, response: {data: "record"}}});}); pipelineRequestTypes = null; ({myUser} = MyUser = Caf.defClass(class MyUser extends KeyFieldsMixin(Pipeline) {}, function(MyUser, classSuper, instanceSuper) {this.filter(CrudFilter); this.fields({id: ["required", "string"], age: "number"});})); return assert.eq(stripFunctions(myUser.normalizedRequestTypes), {get: {request: {key: {dataType: "string", fieldType: "string", required: true}}, response: {data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}}, create: {request: {data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}, response: {key: {dataType: "string", fieldType: "string", required: true}, data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}}, update: {request: {key: {dataType: "string", fieldType: "string", required: true}, data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}, response: {data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}}, delete: {request: {key: {dataType: "string", fieldType: "string", required: true}}, response: {data: {fieldType: "record", dataType: "object", fields: {id: {dataType: "string", fieldType: "string", required: true}, age: {dataType: "number", fieldType: "number"}}}}}});}); return test("multi-field key", () => {let friend, Friend; ({friend} = Friend = Caf.defClass(class Friend extends KeyFieldsMixin(Pipeline) {}, function(Friend, classSuper, instanceSuper) {let requestTypes; this.keyFields("userAId", "userBId"); this.requestTypes(requestTypes = {get: {request: {key: true}, response: {data: "record"}}}); this.fields({userAId: "id", userBId: "id", message: "string"});})); return assert.eq(stripFunctions(friend.normalizedRequestTypes), {get: {request: {key: {dataType: "object", fieldType: "object", fields: {userAId: {required: true, fieldType: "id", dataType: "string"}, userBId: {required: true, fieldType: "id", dataType: "string"}}, order: ["userAId", "userBId"]}}, response: {data: {fieldType: "record", dataType: "object", fields: {userAId: {required: true, fieldType: "id", dataType: "string"}, userBId: {required: true, fieldType: "id", dataType: "string"}, message: {dataType: "string", fieldType: "string"}}}}}});});}});});});
//# sourceMappingURL=PipelineRequestTypes.test.js.map
