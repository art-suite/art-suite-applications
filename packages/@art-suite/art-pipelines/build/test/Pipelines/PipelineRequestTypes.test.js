"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "isObject", "isArray", "isFunction", "chainedTest", "Pipeline", "assert", "normalizeFieldProps", "test"], [global, require('../StandardImport'), require('art-validation'), require('../PipelineWithRegistry'), require('@art-suite/key-fields-mixin')], (describe, isObject, isArray, isFunction, chainedTest, Pipeline, assert, normalizeFieldProps, test) => {let stripFunctions; stripFunctions = function(value) {return (() => {switch (false) {case !isObject(value): return Caf.object(value, (v, k) => stripFunctions(v), (v, k) => !isFunction(v)); case !isArray(value): return Caf.array(value, (v) => stripFunctions(v), (v) => !isFunction(v)); default: return value;};})();}; return describe({basics: function() {let requestTypes; requestTypes = null; return chainedTest("simple", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes(requestTypes = {getTime: {response: {data: {fields: {time: "number"}}}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return myPipeline;}).thenTest("simple normalizedRequestTypes", (myPipeline) => assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: normalizeFieldProps({fields: {data: {fields: {time: "number"}}}})}}));}, autodefined: function() {test("handlers define request types", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handler({rock: function() {return "roll";}});})); return assert.eq(myPipeline.requestTypes, {rock: {}});}); return test("beforeFilters define request types and afterFilters do not", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.filter({name: "myFilter", before: {rock: function() {return "roll";}}}); this.filter({name: "myOtherFilter", after: {roll: function() {return "rap";}}});})); return assert.eq(myPipeline.requestTypes, {rock: {}});});}, normalized: function() {test("singleton data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes({getTime: {response: {data: "number"}}});})); return assert.eqAfterStringifyingFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: normalizeFieldProps({fields: {data: "number"}})}});}); return test(":record data", () => {let requestTypes, myPipeline, MyPipeline; requestTypes = null; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.fields({name: "string"}); this.requestTypes(requestTypes = {getTime: {response: {data: "record"}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return assert.eq(stripFunctions(myPipeline.normalizedRequestTypes), {getTime: {response: {fields: {data: {fields: {name: {dataType: "string", fieldType: "string"}}, dataType: "object", fieldType: "record"}}, dataType: "object", fieldType: "object"}}});});}});});});
//# sourceMappingURL=PipelineRequestTypes.test.js.map
