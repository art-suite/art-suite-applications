"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["assert", "describe", "isObject", "eq", "Object", "isArray", "isFunction", "chainedTest", "test", "Pipeline", "normalizeFieldProps"], [global, require('../StandardImport'), require('art-validation')], (assert, describe, isObject, eq, Object, isArray, isFunction, chainedTest, test, Pipeline, normalizeFieldProps) => {let eqStringifyFunctionsR; eqStringifyFunctionsR = function(a, b) {return (() => {switch (false) {case !isObject(a): return isObject(b) && eq(Object.keys(a).sort(), Object.keys(b).sort()) && !Caf.find(a, null, (v, k) => !eqStringifyFunctionsR(v, b[k])); case !isArray(a): return isArray(b) && a.length === b.length && !Caf.find(a, null, (v, i) => !eqStringifyFunctionsR(v, b[i])); case !isFunction(a): return isFunction(b) && `${Caf.toString(a)}` === `${Caf.toString(b)}`; default: return eq(a, b);};})();}; assert.eqStringifyFunctions = function(a, b, context) {let equal; return (!(equal = eqStringifyFunctionsR(a, b))) ? assert.eq(a, b) : undefined;}; return describe({basics: function() {chainedTest("simple", () => {let requestTypes, myPipeline, MyPipeline; requestTypes = null; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes(requestTypes = {getTime: {response: {data: {time: "number"}}}});})); assert.eq(myPipeline.requestTypes, requestTypes); return myPipeline;}).thenTest("simple normalizedRequestTypes", (myPipeline) => assert.eqStringifyFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps({fields: {time: "number"}})}}})); return test("CRUD request types", () => {let requestTypes, myPipeline, MyPipeline; requestTypes = null; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.fields({id: "string", name: "string", age: "number"}); this.requestTypes(requestTypes = {get: {request: {key: "record"}, response: {data: "record"}}, create: {request: {data: "record"}, response: {key: "record", data: "record"}}, update: {request: {key: "record", data: "record"}, response: {data: "record"}}, delete: {request: {key: "record"}, response: {data: "record"}}});})); return assert.eq(myPipeline.requestTypes, requestTypes);});}, normalized: function() {test("singleton data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.requestTypes({getTime: {response: {data: "number"}}});})); return assert.eqStringifyFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps("number")}}});}); return test(":record data", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.fields({name: "string"}); this.requestTypes({getTime: {response: {data: "record"}}});})); return assert.eqStringifyFunctions(myPipeline.normalizedRequestTypes, {getTime: {response: {data: normalizeFieldProps({fields: myPipeline.fields})}}});});}});});});
//# sourceMappingURL=PipelineRequestTypes.test.js.map
