"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["chainedTest", "Pipeline", "merge", "assert"], [global, require('../StandardImport'), require('../PipelineWithRegistry')], (chainedTest, Pipeline, merge, assert) => {let subscriberEvents, events, subscriber, myPipeline; require('art-config').configure(); subscriberEvents = []; events = []; subscriber = myPipeline = null; return chainedTest("setup subscriptions", function() {let MyPipeline; return ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.prototype.subscriberAdded = function(key, subscriber, queryName) {return subscriberEvents.push({added: merge({key, queryName})});}; this.prototype.subscriberRemoved = function(key, subscriber, queryName) {return subscriberEvents.push({removed: merge({key, queryName})});}; this.query({byUserId: {query: function(request) {return [{message: "hi there", userId: "user123"}];}, dataToKeyString: function({userId}) {return userId;}}});}), {myPipeline});}).tapTest("subscribe", function() {assert.eq(subscriberEvents, []); myPipeline.subscribe("foo", subscriber = (...args) => events.push(args)); return assert.eq(subscriberEvents, [{added: {key: "foo"}}]);}).tapTest("subscribe twice does nothing", function() {subscriberEvents = []; myPipeline.subscribe("foo", subscriber); return assert.eq(subscriberEvents, []);}).tapTest("_sendDataSubscriptionEvent single", function() {assert.eq(events, []); myPipeline._sendDataSubscriptionEvent("update", "foo", "someData"); return assert.eq(events, [["update", "foo", "someData"]]);}).tapTest("_sendDataSubscriptionEvent list", function() {events = []; myPipeline._sendDataSubscriptionEvent("batchUpdate", "foo", ["data1", "data2", "data3"]); return assert.eq(events, [["batchUpdate", "foo", "data1"], ["batchUpdate", "foo", "data2"], ["batchUpdate", "foo", "data3"]]);}).tapTest("unsubscribe", function() {subscriberEvents = []; myPipeline.unsubscribe("foo", subscriber); return assert.eq(subscriberEvents, [{removed: {key: "foo"}}]);}).tapTest("unsubscribe twice does nothing", function() {subscriberEvents = []; myPipeline.unsubscribe("foo", subscriber); return assert.eq(subscriberEvents, []);}).tapTest("subscribe query", function() {subscriberEvents = []; myPipeline.subscribe("user123", subscriber = (...args) => events.push(args), "byUserId"); return assert.eq(subscriberEvents, [{added: {key: "user123", queryName: "byUserId"}}]);}).tapTest("subscribe query twice does nothing", function() {subscriberEvents = []; myPipeline.subscribe("user123", subscriber, "byUserId"); return assert.eq(subscriberEvents, []);}).tapTest("_sendDataSubscriptionEvent single with query subscribers", function() {events = []; myPipeline._sendDataSubscriptionEvent("update", "abc123", {userId: "user123"}); return assert.eq(events, [["update", "abc123", {userId: "user123"}, "user123"]]);}).tapTest("unsubscribe query", function() {subscriberEvents = []; myPipeline.unsubscribe("user123", subscriber, "byUserId"); return assert.eq(subscriberEvents, [{removed: {key: "user123", queryName: "byUserId"}}]);}).tapTest("unsubscribe query does nothing", function() {subscriberEvents = []; myPipeline.unsubscribe("user123", subscriber, "byUserId"); return assert.eq(subscriberEvents, []);});});});
//# sourceMappingURL=PipelineSubscriptions.test.js.map
