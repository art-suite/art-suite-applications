"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "describe", "lowerCamelCase", "test", "KeyFieldsMixin", "assert", "formattedInspect", "Validator"], [global, require('art-standard-lib'), require('art-class-system'), require('art-testbench'), require('art-validation'), require('../../build')], (BaseClass, describe, lowerCamelCase, test, KeyFieldsMixin, assert, formattedInspect, Validator) => {let MyBaseClass; MyBaseClass = Caf.defClass(class MyBaseClass extends BaseClass {}, function(MyBaseClass, classSuper, instanceSuper) {this.classGetter({recordName: function() {let temp; return ((temp = this._recordName) != null ? temp : this._recordName = lowerCamelCase(this.name));}}); this.getter({recordName: function() {return this.class.recordName;}});}); return describe({declarationTypes: function() {test("no delcaration defaults to: 'id'", () => {let myInstance, MyClass, input; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {})); assert.eq(myInstance.toKeyObject(input = "mom"), {id: "mom"}); return assert.eq(myInstance.toKeyObject({id: "123", name: "alice"}), {id: "123"});}); test("@primaryKey string", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.primaryKey("monkeyId");})); return assert.eq(myInstance.keyFields, ["monkeyId"]);}); test("@keyFields string", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.keyFields("monkeyId");})); return assert.eq(myInstance.keyFields, ["monkeyId"]);}); test("@keyFields string/string", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.keyFields("monkeyId/owlId");})); return assert.eq(myInstance.keyFields, ["monkeyId", "owlId"]);}); test("@keyFields [string, string]", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.keyFields(["monkeyId", "owlId"]);})); return assert.eq(myInstance.keyFields, ["monkeyId", "owlId"]);}); test("@keyFields string, string", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.keyFields("monkeyId", "owlId");})); return assert.eq(myInstance.keyFields, ["monkeyId", "owlId"]);}); return test("@keyFields string/string, string/string/string", () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.keyFields("monkeyId/elephantId/bugId", "owlId/pidgeonId");})); return assert.eq(myInstance.keyFields, ["monkeyId", "elephantId", "bugId", "owlId", "pidgeonId"]);});}, basics: function() {let tests; tests = {id: ["abc123", {id: "abc123"}], myKey: ["abc123", {myKey: "abc123"}], "myKey1/myKey2": ["abc123/def456", {myKey1: "abc123", myKey2: "def456"}]}; return Caf.each2(tests, ([input, output], key) => test(`primaryKey: '${Caf.toString(input)}' >>> ${Caf.toString(formattedInspect(output))}`, () => {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.primaryKey(key);})); assert.eq(myInstance.toKeyObject(input), output); assert.eq(myInstance.dataToKeyString(myInstance.toKeyObject(input)), input); assert.false(myInstance.allKeyFieldsPresent(Caf.object(output, null, null, null, (v, k) => k + "wrong"))); return assert.true(myInstance.allKeyFieldsPresent(output));}));}, getters: function() {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.primaryKey("myKey/myDate");})); test("keyFields", () => assert.eq(myInstance.keyFields, ["myKey", "myDate"])); test("keyFieldsString", () => assert.eq(myInstance.keyFieldsString, "myKey/myDate")); return test("keyValidator", () => assert.instanceOf(myInstance.keyValidator, Validator));}, helpers: function() {let myInstance, MyClass; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.primaryKey("myKey/myDate");})); test("dataWithoutKeyFields", () => assert.eq(myInstance.dataWithoutKeyFields({myKey: "bob", myDate: "boo", somethingElse: "frank"}), {somethingElse: "frank"})); return test("isRecord", () => {assert.true(myInstance.isRecord({myKey: "bob", myDate: "boo", somethingElse: "frank"})); assert.true(myInstance.isRecord({myKey: "bob", myDate: "boo"})); return assert.false(myInstance.isRecord({myKey: "bob"}));});}, keyValidator: function() {return test("keyValidator preprocesses", () => {let myInstance, MyClass, input; myInstance = new (MyClass = Caf.defClass(class MyClass extends KeyFieldsMixin(MyBaseClass) {}, function(MyClass, classSuper, instanceSuper) {this.primaryKey("myKey/myDate"); this.classGetter({fields: function() {return {myKey: "trimmedString", myDate: {preprocess: (v) => v | 0}};}});})); assert.eq(myInstance.preprocessKey({myKey: "  mom  ", myDate: "123"}), {myKey: "mom", myDate: 123}); return assert.eq(myInstance.toKeyObject(input = "mom/123"), {myKey: "mom", myDate: 123});});}, propsToKey: function() {test("defaultKey (id)", () => {let user, User; user = new (User = Caf.defClass(class User extends KeyFieldsMixin(MyBaseClass) {})); assert.eq(user.propsToKey({user: {id: "user1"}}), "user1"); assert.eq(user.propsToKey({userId: "user2"}), "user2"); assert.eq(user.propsToKey({user: {id: "user3"}, userId: "user4"}), "user3", "whole object has precidence"); return assert.eq(user.propsToKey({}), undefined);}); test("defaultKey (id) obeys stateField override", () => {let user, User; user = new (User = Caf.defClass(class User extends KeyFieldsMixin(MyBaseClass) {})); assert.eq("user2", user.propsToKey({userId: "user2", friendId: "user3"})); return assert.eq("user3", user.propsToKey({userId: "user2", friendId: "user3"}, "friend"));}); test("custom single primaryKey", () => {let email, Email; email = new (Email = Caf.defClass(class Email extends KeyFieldsMixin(MyBaseClass) {}, function(Email, classSuper, instanceSuper) {this.primaryKey("email");})); assert.eq("def", email.propsToKey({email: "def"})); assert.eq(undefined, email.propsToKey({emailId: "def"})); assert.eq({id: "def"}, email.propsToKey({email: {id: "def"}})); return assert.eq(undefined, email.propsToKey({}));}); return test("custom primaryKey pair", () => {let myInstance, FavoritePost; myInstance = new (FavoritePost = Caf.defClass(class FavoritePost extends KeyFieldsMixin(MyBaseClass) {}, function(FavoritePost, classSuper, instanceSuper) {this.primaryKey("userId/postId");})); assert.eq({userId: undefined, postId: undefined}, myInstance.propsToKey({})); assert.eq({userId: "user1", postId: "post1"}, myInstance.propsToKey({userId: "user1", postId: "post1"})); assert.eq({userId: "user2", postId: "post2"}, myInstance.propsToKey({user: {id: "user2"}, post: {id: "post2"}})); return assert.eq({userId: "user3", postId: "post3"}, myInstance.propsToKey({user: {id: "user3"}, post: {id: "post3"}, userId: "user4", postId: "post4"}), "whole objects have precidence");});}});});});
//# sourceMappingURL=KeyFieldsMixin.test.js.map
