import &ArtStandardLib

removeFromCleanStackTraceRegExp =
  ///
    ^ \s+ at \s+ processImmediate
    | Art.Ery/(Pipeline|Request|Filter\b)
    | source/ArtSuite/ArtEryPipelines
    | <anonymous>
    | node:internal
    | node_modules/.*
      (
        mocha
        | bluebird
        | jest
        | art-testbench
        | @art-suite/
        | caffeine-script-runtime
      )


notFalseOrFalse = (v) -> v != false && v != :false

detectStackTracePathRegEx = /([^ (]+)(?=:\d+)/

{}
  shouldCleanStackTrace = notFalseOrFalse getEnv().ART_PIPELINES_CLEAN_STACK_TRACE
  shouldRepathStackTrace = notFalseOrFalse getEnv().ART_PIPELINES_REPATH_STACK_TRACE

  cleanStackTraceWarnings =
    compactFlatten []
      if shouldCleanStackTrace then "" NOTE: cleanStackTrace applied. (set ART_PIPELINES_CLEAN_STACK_TRACE=false to disable)
      if shouldRepathStackTrace then "" NOTE: repathStackTraceLine(s) applied. (set ART_PIPELINES_REPATH_STACK_TRACE=false to disable)
    .join "\n"

  repathStackTraceLine =
    if isNode && shouldRepathStackTrace
      path = eval("require") "path"
      cwd = global.process.cwd()
      replaceFunc = (filePath) -> path.relative cwd, filePath
      (line) -> line.replace detectStackTracePathRegEx, replaceFunc
    else
      (line) -> line

  cleanStackTrace = (stack, options = {}) ->
    return stack unless shouldCleanStackTrace
    options extract keepErrorLines, quiet, outputAtLeastOnePathLine
    if (error = stack) instanceof Error
      error.stack = cleanStackTrace error.stack, options
      error

    else if stack is String
      pathLineKeepCount = 0
      prePathLines = []
      firstPathLine = null
      outLines = []
      each line, i in stack.split "\n" when

        if detectStackTracePathRegEx.test line
          pathLineKeepCount++
          firstPathLine ?= line
          unless removeFromCleanStackTraceRegExp.test line
            outLines.push repathStackTraceLine line

        else if !firstPathLine
          prePathLines.push line

      if outputAtLeastOnePathLine && pathLineKeepCount == 0
        outLines = [] firstPathLine

      if keepErrorLines
        outLines = compactFlattenAll prePathLines, outLines

      out = outLines.join "\n"
      if quiet then out
      else
        out
        + if /\n\s*$/.test out then '' else :\n
        + cleanStackTraceWarnings

    else stack
