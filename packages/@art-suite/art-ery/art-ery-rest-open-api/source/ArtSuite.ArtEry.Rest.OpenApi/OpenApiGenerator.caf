import &StandardImport, &ArtValidation

stripStack = (error) ->
  error.stack =
    error.stack.replace
      ///g
        (^|\n).*
        (
        node_modules/
        )
        .*
      "\n"
  error

## TODO
  Decision: for keys
    all key-fields can be specifried as query-params
    required key-fields can be passed pathed
    One key (either are correct):
      get/abc123
      get?id:abc123

    Two required key-fields (either are correct)
      getByPostIdUserId/abc123/def456
      getByPostIdUserId?postId=abc123&userId=def456

    One required, one optional key-field:
      get/abc123?optionalKey=dfg45

normalizedFieldTypeToOpenApiTypeR = (fieldTypeProps, pipeline, customFieldTypes, path) ->
  {dataType, fields, fieldType} = fieldTypeProps
  if customFieldTypes[fieldType] || (present(fieldType) && !FieldTypes[beforeFieldType = fieldType])
    if fieldType == :record then fieldType = pipeline.name

    unless customFieldTypes[fieldType]
      normalized = normalizedFieldTypeToOpenApiTypeR
          merge fieldTypeProps, fieldType: :object
          pipeline
          customFieldTypes
          "" #{path}: customFieldtype[#{fieldType}]

      customFieldTypes[fieldType] = normalized

    $ref: "" #/components/schemas/#{} fieldType
  else
    switch dataType
    when :integer :number :string :boolean
      type: dataType
    when :object
      requiredFields = []
      result =
        type: :object
        properties: object field, name in fields
          if field.required then requiredFields.push name
          normalizedFieldTypeToOpenApiTypeR field, pipeline, customFieldTypes, "" #{path}: #{name}

      if requiredFields.length > 0 then result.required = requiredFields
      result

    else
      log.error normalizedFieldTypeToOpenApiTypeR_recursiveParameters: {} dataType, fields, fieldTypeProps, customFieldTypes, path
      throw new Error "unsupported dataType: #{formattedInspect dataType}. Path: #{path}"

normalizedFieldTypeToOpenApiType = (fieldTypeProps, pipeline, customFieldTypes, path) ->
  try
    normalizedFieldTypeToOpenApiTypeR fieldTypeProps, pipeline, customFieldTypes, path
  catch error
    throw stripStack error

class OpenApiGenerator extends BaseClass
  @generateOpenApi: (pipelineRegistry) ->
    customFieldTypes =
      session: normalizedFieldTypeToOpenApiTypeR
        normalizeFieldProps fields: signature: :string
        null
        {}
        :session

    apiRoot = :api
    merge
      openapi: :3.0.0
      info:
        title: ""Sample API
        version: :1.0.0
      paths:
        each pipeline in pipelineRegistry.pipelines into out = {}
          each props, type from pipeline.normalizedPublicRequestTypes into out
            # log {} props, type
            unless props
              log.warn  log "" OpenApiGenerator no public requestType definition for action-type: #{type}
            else
              {method, url} = getRestClientParamsForArtEryRequest {}
                server: ""
                type
                pipeline.restPath
                restPath: getPipelineRestPath apiRoot, pipeline

              props extract
                summary
                description
                request extract? fields.key
                response

              requestWithoutKey = if request then if key
                merge request, fields: objectWithout request.fields, :key
              else request
              (out[url]?={})[method] = merge {}
                operationId: "#{pipeline.name}.#{type}"
                summary: summary ? "" #{type} #{pipeline.name}
                security: [] bearerAuth: []
                description
                tags: [] pipeline.name
                parameters: if key? then [] {}
                  in:       :path
                  name:     :id
                  key.required
                  schema: normalizedFieldTypeToOpenApiType key, null, customFieldTypes

                requestBody: if objectHasKeys requestWithoutKey?.fields
                  required: true
                  content:
                    application/json:
                      schema: normalizedFieldTypeToOpenApiType
                        requestWithoutKey
                        pipeline
                        customFieldTypes
                        "" #{type}: request:

                responses:
                  200: merge
                    description: "" Successful response
                    content: # if objectHasKeys response?.fields
                      application/json:
                        schema: normalizedFieldTypeToOpenApiType
                          merge
                            response
                            normalizeFieldProps fieldType: :object
                            fields: merge
                              response?.fields
                              session:
                                dataType: :object
                                fieldType: :session
                          pipeline
                          customFieldTypes
                          "" #{type}: response:

      components: merge
        schemas: if objectHasKeys customFieldTypes then customFieldTypes
        securitySchemes:
          bearerAuth:
            type:         :http
            scheme:       :bearer
            bearerFormat: :JWT