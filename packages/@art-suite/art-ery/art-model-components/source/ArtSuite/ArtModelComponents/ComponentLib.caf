import &ArtStandardLib, &ArtValidation

subscriptionFormPatterns =
  global:  /[_a-z][._a-z0-9]*/gi
  modelKey: /^([_a-z0-9]+)\.([_a-z0-9]+)/i

subscriptionValidator = new Validator
  stateField: :present :string
  key:        {}
  model:      "required" validate: (v) ->
    v is Function
    || v is String

parseSubscriptions: (subscriptions) ->
  out = {}
  add = ({stateField, model, key}) ->
    if out[stateField]
      throw new ErrorWithInfo
        "duplicate subscription declaration for: #{stateField}"
        {}
          stateField
          first-subscription-options: out[stateField]
          duplicate-subscription-options: {} stateField, model, key
          subscriptions

    subscriptionValidator.validate out[stateField] = {} stateField, model, key

  each subscriptionDeclaration in compactFlatten subscriptions into out
    switch
    when isPlainObject subscriptionDeclaration
      each subscriptionOptions, stateField in subscriptionDeclaration
        switch
        when subscriptionOptions is Function
          add {}
            stateField
            model:  stateField
            key:    subscriptionOptions

        when subscriptionOptions is String
          add {}
            stateField
            model:  stateField
            key:    subscriptionOptions

        when subscriptionOptions is Object
          subscriptionOptions extract model, key
          add {}
            stateField
            model:  model ? stateField
            key:    if key is Function then key else key

        else throw new ErrorWithInfo
          "invalid value for subscription. Expecting key-function or object"
          {} stateField, subscriptionOptions

    when isString subscriptionDeclaration
      each subscriptionName in subscriptionDeclaration.match subscriptionFormPatterns.global
        if matches = subscriptionName.match subscriptionFormPatterns.modelKey
          [_, modelName, stateField] = matches
          add {}
            stateField
            model:  modelName
            key:    stateField

        else
          add
            stateField: subscriptionName
            model:      subscriptionName

    else throw new ErrorWithInfo
      "unsupported subscription declaration. Expecting string or object."
      {}
        invalid-subscription-delcaration: subscriptionDeclaration
        subscriptions
