import &StandardImport, &ArtClassSystem

class AfterEventsRouter extends PipelineRegistryMixin BaseObject

  @getAfterEventsRouter: (pipelineOrRequestOrRegistry) => @getPipelineRegistryInstance pipelineOrRequestOrRegistry

  constructor: -> @_handlers = {}

  on: (pipelineName, requestType, actionOrPipeline) ->
    pushIfNotPresent
      (@_handlers[pipelineName] ?= {})[requestType] ?= []
      actionOrPipeline

  registerPipelineListener: (listeningPipeline, listeningToPipelineName, requestType) ->
    throw new Error "listeningPipeline must implement handleRequestAfterEvent" unless isFunction listeningPipeline.handleRequestAfterEvent
    throw new Error "listeningToPipelineName must be a string" unless isString listeningToPipelineName
    @on listeningToPipelineName, requestType, listeningPipeline

  sendEvents: (response) ->
    Promise.resolve response
    .then (response) ->
      response extract pipelineName, requestType

      Promise.all array actionOrPipeline in @_handlers[pipelineName]?[requestType]
        if isFunction actionOrPipeline.handleRequestAfterEvent
          actionOrPipeline.handleRequestAfterEvent response

        else
          actionOrPipeline response

    .then -> response
