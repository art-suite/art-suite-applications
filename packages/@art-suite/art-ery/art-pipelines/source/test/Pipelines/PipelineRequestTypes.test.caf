import &StandardImport, &ArtValidation, &PipelineWithRegistry, &@ArtSuite/KeyFieldsMixin

stripFunctions = (value) ->
  switch
  when isObject value then object v, k from value when !isFunction v with stripFunctions v
  when isArray  value then array  v    from value when !isFunction v with stripFunctions v
  else value

describe
  basics: ->
    requestTypes = null
    chainedTest "simple" ->
      {myPipeline} = class MyPipeline extends Pipeline
        @requestTypes requestTypes =
          getTime: response: data: fields: time: :number

      assert.eq
        myPipeline.requestTypes
        requestTypes

      myPipeline

    .thenTest "simple normalizedRequestTypes" (myPipeline) ->
      assert.eqAfterStringifyingFunctions
        myPipeline.normalizedRequestTypes
        getTime: response: normalizeFieldProps fields: data: fields: time: :number

  autodefined: ->
    test "handlers define request types" ->
      {myPipeline} = class MyPipeline extends Pipeline
        @handler rock: -> :roll

      assert.eq
        myPipeline.requestTypes
        rock: {}

    test "beforeFilters define request types and afterFilters do not" ->
      {myPipeline} = class MyPipeline extends Pipeline
        @filter
          name: :myFilter
          before: rock: -> :roll

        @filter
          name: :myOtherFilter
          after: roll: -> :rap

      assert.eq
        myPipeline.requestTypes
        rock: {}

  normalized: ->
    test "singleton data" ->
      {myPipeline} = class MyPipeline extends Pipeline
        @requestTypes
          getTime:
            response:   data: :number

      assert.eqAfterStringifyingFunctions
        myPipeline.normalizedRequestTypes
        getTime: response: normalizeFieldProps fields: data: :number

    test ":record data" ->
      requestTypes = null
      {myPipeline} = class MyPipeline extends Pipeline
        @fields name: :string
        @requestTypes requestTypes = getTime: response: data: :record

      assert.eq
        myPipeline.requestTypes
        requestTypes

      assert.eq
        stripFunctions myPipeline.normalizedRequestTypes
        getTime: response:
          fields: data:
            fields:    name: dataType: :string, fieldType: :string
            dataType:  :object
            fieldType: :record

          dataType:  :object
          fieldType: :object
##
  extraFields: ->
    test "singleton data" ->
      {myPipeline} = class MyPipeline extends Pipeline
        @requestTypes
          getTime:
            summary:      "" My summary
            description:  "" Even more info.
            response:   data: :number

      assert.eqAfterStringifyingFunctions
        result = myPipeline.normalizedRequestTypes
        getTime:
          summary:        "" My summary
          description:    "" Even more info.
          response: result.getTime.response # validated elsewhere


  filters: ->
    test "filters can define request-types" ->
      class ExampleFilter extends Filter
        @requestTypes
          get:
            request:    key:  true
            response:   data: :record

      pipelineRequestTypes = null
      {myUser} = class MyUser extends KeyFieldsMixin Pipeline
        @filter ExampleFilter
        @fields id: :id
        @requestType pipelineRequestTypes =
          get: request: data: :date
          response: data: :record # should not be overridden by the filter

      assert.eq
        myUser.normalizedFields
        id:
          fieldType: :id
          dataType:  :string
          required:  true
          validate:  myUser.normalizedFields.id.validate

      assert.eq
        myUser.requestTypes
        pipelineRequestTypes

  examples: ->
    test "crud" ->
      requestTypes = null
      class CrudFilter extends Filter
        @requestTypes requestTypes =
          get:
            request:    key:  true
            response:   data: :record

          create:
            request:    data: :record
            response:   key:  true    data: :record

          update:
            request:    key:  true    data: :record
            response:   data: :record

          delete:
            request:    key:  true
            response:   data: :record

      pipelineRequestTypes = null
      {myUser} = class MyUser extends KeyFieldsMixin Pipeline
        @filter CrudFilter
        @fields
          id:   :required :string
          age:  :number

      assert.eq
        stripFunctions myUser.normalizedRequestTypes
        get:
          request:  key: dataType: :string, fieldType: :string, required: true
          response: data:
            fieldType: :record
            dataType:  :object
            fields:
              id:  dataType: :string, fieldType: :string, required: true
              age: dataType: :number, fieldType: :number

        create:
          request: data:
            fieldType: :record
            dataType:  :object
            fields:
              id:  dataType: :string, fieldType: :string, required: true
              age: dataType: :number, fieldType: :number

          response:
            key: dataType: :string, fieldType: :string, required: true
            data:
              fieldType: :record
              dataType:  :object
              fields:
                id:  dataType: :string, fieldType: :string, required: true
                age: dataType: :number, fieldType: :number

        update:
          request:
            key: dataType: :string, fieldType: :string, required: true
            data:
              fieldType: :record
              dataType:  :object
              fields:
                id:  dataType: :string, fieldType: :string, required: true
                age: dataType: :number, fieldType: :number

          response: data:
            fieldType: :record
            dataType:  :object
            fields:
              id:  dataType: :string, fieldType: :string, required: true
              age: dataType: :number, fieldType: :number

        delete:
          request:  key: dataType: :string, fieldType: :string, required: true
          response: data:
            fieldType: :record
            dataType:  :object
            fields:
              id:  dataType: :string, fieldType: :string, required: true
              age: dataType: :number, fieldType: :number

    test "multi-field key" ->
      {friend} = class Friend extends KeyFieldsMixin Pipeline
        @keyFields :userAId :userBId
        @requestTypes requestTypes =
          get:
            request:    key:  true
            response:   data: :record

        @fields
          userAId: :id
          userBId: :id
          message: :string

      assert.eq
        stripFunctions friend.normalizedRequestTypes
        get:
          request: key:
            dataType:  :object
            fieldType: :object
            fields:
              userAId: required: true, fieldType: :id, dataType: :string
              userBId: required: true, fieldType: :id, dataType: :string

            order: [] :userAId, :userBId

          response: data:
            fieldType: :record
            dataType:  :object
            fields:
              userAId: required: true     fieldType: :id, dataType: :string
              userBId: required: true     fieldType: :id, dataType: :string
              message: dataType: :string  fieldType: :string

    skipKnownFailingTest "integer field-type should be supported" ->
      # TODO: two issues:
      #   1. we should have an "integer" field-type
      #   2. currently an unknown string becomes [string]: true - no errors, no exceptions; I may want to revisit that decision
      {user} = class User extends KeyFieldsMixin Pipeline
        @registry new PipelineRegistry
        @requestTypes get: response: data: :record

        @fields age: :integer

        @publicRequestTypes :get

      assert.eq
        stripFunctions user.normalizedRequestTypes
        get: response: data:
          fieldType: :record
          dataType:  :object
          fields:    age: dataType: :number, fieldType: :integer

    test "record required" ->
      {user} = class User extends KeyFieldsMixin Pipeline
        @registry new PipelineRegistry
        @fields
          id: :id

        @requestTypes
          get:
            request:    key:  true
            response:   data:
              required: true
              fieldType: :record

      assert.eq
        stripFunctions user.normalizedRequestTypes
        get: response: data:
          fieldType: :record
