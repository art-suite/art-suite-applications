import &StandardImport

Pipeline.registry new PipelineRegistry session: {}

&ArtConfig.configure()
test "basic", ->
  class MyPipeline extends Pipeline
    @publicHandlers foo: (request) -> foo: 1, bar: 2

  p = new MyPipeline
  assert.eq p.filters.length, 0
  p.foo()
  .then (data) ->
    assert.eq data, foo: 1, bar: 2

test "return string", ->
  class MyPipeline extends Pipeline
    @publicHandlers foo: (request) -> "my string"

  (new MyPipeline)
  .foo().then (data) -> assert.eq data, "my string"

test "default: missing", ->
  {user} = class User extends Pipeline
    @publicHandlers
      get: (request) ->

  assert.missing user.get :abc

test "return false", ->
  class MyPipeline extends Pipeline
    @publicHandlers foo: -> false

  (new MyPipeline)
  .foo().then (data) -> assert.eq data, false

test "query handlers", ->
  class Post extends Pipeline
    @query postByUserId: (request) ->
      [request.key, 1, 2, 3]

    @publicRequestTypes "postByUserId"

  assert.eq Post.post.clientApiMethodList, ["postByUserId"]
  Post.post.postByUserId key: "foo"
  .then (results) ->
    assert.eq results, ["foo", 1, 2, 3]
