"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["getEnv", "Neptune", "log", "Error", "logPromiseErrors", "Promise", "deepMerge", "getArtConfigName", "merge", "MainAppHandler", "CatchAllHandler"], [global, require('./StandardImport'), require('./Handlers')], (getEnv, Neptune, log, Error, logPromiseErrors, Promise, deepMerge, getArtConfigName, merge, MainAppHandler, CatchAllHandler) => {let noServer, artConfigName, WEB_CONCURRENCY, PORT, isTest, Server, temp; temp = getEnv(); noServer = temp.noServer; artConfigName = temp.artConfigName; WEB_CONCURRENCY = temp.WEB_CONCURRENCY; PORT = temp.PORT; isTest = artConfigName === "Test"; return Server = Caf.defClass(class Server extends Object {}, function(Server, classSuper, instanceSuper) {this.start = function(options) {let loadPipelines, postConfigInit, app, metadata, appUrlRegexp, head; loadPipelines = options.loadPipelines; postConfigInit = options.postConfigInit; app = options.app; metadata = options.metadata; appUrlRegexp = options.appUrlRegexp; head = options.head; if ((Caf.exists(app) && app.prototype) instanceof Neptune.Namespace) {log({"art-suite-server.start": {app: options.app.namespacePath, version: options.app.version}});} else {log({"art-suite-server.start": options}); throw new Error("options.app required");}; return !noServer ? logPromiseErrors("Art.Suite.Server", Promise.then(() => require('art-config').configure(deepMerge(options, {artConfig: {"Art.Suite.Server": {app, metadata, appUrlRegexp, head}}}))).then(() => log({"art-ery-server-configured-for": getArtConfigName()})).then(loadPipelines).then(() => isTest ? require('art-ery').sendInitializeRequestToAllPipelines() : undefined).then(postConfigInit).then(() => require('art-ery/Server').start(merge({static: {root: "./public"}, handlers: MainAppHandler, posthandlers: CatchAllHandler, numWorkers: WEB_CONCURRENCY || 1, port: PORT}, options))).tapCatch((e) => log("Error starting Art.Suite.Server server", e))) : undefined;};});});});
//# sourceMappingURL=Server.js.map
