"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["PromiseHandler", "config", "upperCamelCase", "Url", "lowerCase", "merge", "present", "Html", "Head", "Meta", "Title", "Body", "Script", "jsStringify", "cacheSafeUrl", "Link"], [global, require('../StandardImport'), {Url: require('url')}], (PromiseHandler, config, upperCamelCase, Url, lowerCase, merge, present, Html, Head, Meta, Title, Body, Script, jsStringify, cacheSafeUrl, Link) => {let MainAppHandler; return MainAppHandler = Caf.defClass(class MainAppHandler extends PromiseHandler {}, function(MainAppHandler, classSuper, instanceSuper) {this.prototype.canHandleRequest = function(request) {return config.appUrlRegexp.test(request.url);}; this.prototype.handleHtmlRequest = function(request, requestData) {let title, description, image, imageWidth, imageHeight, icons, tags, appleTouchIcons, url, type, temp; if (Caf.exists(temp = config.metadata)) {title = temp.title; description = temp.description; image = temp.image; imageWidth = temp.imageWidth; imageHeight = temp.imageHeight; icons = temp.icons; tags = temp.tags; appleTouchIcons = temp.appleTouchIcons;}; title != null ? title : title = upperCamelCase(config.app.toString().split(/^Neptune\./), ([0]).join(" "), " "); url = Url.format({protocol: "https", host: lowerCase(request.get("host")), pathname: request.path}); tags = merge(present(description) ? {description, "twitter:description": description, "og:description": description} : undefined, {"apple-mobile-web-app-capable": "yes", "apple-mobile-web-app-status-bar-style": "black", "og:title": title, "og:url": url, "og:type": type, "twitter:title": title, "twitter:card": type}, present(image) ? (image = Url.resolve(url, image), {"og:image": image, "og:image:width": imageWidth ? imageWidth : undefined, "og:image:height": imageHeight ? imageHeight : undefined, "twitter:image": image}) : undefined, tags); type = "website"; return "<!DOCTYPE html>" + Html(Head(Meta({charset: "utf-8"}), Title(title), Caf.array(appleTouchIcons, (icon, size) => Link({rel: "apple-touch-icon", href: icon, type: "image/png", sizes: `${Caf.toString(size)}x${Caf.toString(size)}`})), Caf.array(icons, (icon, size) => Link({rel: "icon", href: icon, type: "image/png", sizes: `${Caf.toString(size)}x${Caf.toString(size)}`})), Caf.array(tags, (content, name) => Meta(/^og:/.test(name) ? {content, property: name} : {content, name})), config.head), Body(Script(`self.artConfig = ${Caf.toString(jsStringify(config.clientArtConfig))};\nself.artConfigName = '${Caf.toString(require('art-config').configName || "Production")}';`), Script({async: true, src: cacheSafeUrl("Client.js"), charset: "utf-8"})));};});});});
//# sourceMappingURL=MainAppHandler.js.map
