import &StandardImport, {} &ElasticsearchPipeline

class ElasticsearchGlobal extends &ElasticsearchPipelineBase

  ##
    using @fields, generate the correct 'mappings' data for initializing the ElasticsearchPipelines index
    SEE:
      https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html
      https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html

    OUT: plain data-structue that is exactly what you can PUT to
      elasticsearch to initialize all mappings for the current elasticsearchPipelines.
    ###
  @getElasticsearchMappings: ->
    elasticsearchPipelines = array v in pipelines when v instanceof ElasticsearchPipeline

    {}
      settings = {}
      mappings: object pipeline in elasticsearchPipelines with-key pipeline.elasticsearchType
        mapping = pipeline.getMapping()
        if mapping.settings
          mergeInto settings, mapping.settings
          objectWithout mapping, :settings
        else
          mapping

  @handlers

    # SEE: @getElasticsearchMappings
    initialize: (request)->
      request.subrequest request.pipeline, :indexExists
      .then (exists) ->
        if !exists
          @normalizeJsonRestClientResponse request,
            @restClient.putJson @getIndexUrl(), @class.getElasticsearchMappings()
        else
          status: :alreadyInitialized

    getInitializeParams: (request) -> @class.getElasticsearchMappings()

    getIndicies: (request) ->
      @restClient.getJson :/*

    indexExists: (request) ->
      @restClient.getJson @getIndexUrl()
      .then -> request.success data: true
      .catch (e) ->
        if e.status == missing
          request.success data: false
        else
          @normalizeJsonRestClientError request, e

    createIndex: (request) ->
      @normalizeJsonRestClientResponse request, @restClient.putJson @getIndexUrl()

    deleteIndex: (request) ->
      request.require request.data?.force, "" data.force=true required
      .then ->
        @normalizeJsonRestClientResponse request, @restClient.deleteJson @getIndexUrl()
