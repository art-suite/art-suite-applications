"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Configurable", "log", "formattedInspect", "console", "Promise"], [global, require('./StandardImport'), {ArtEry: require('art-ery')}], (Configurable, log, formattedInspect, console, Promise) => {let Config; return Config = Caf.defClass(class Config extends Configurable {}, function(Config, classSuper, instanceSuper) {this.defaults({appId: "...", key: "...", secret: "...", cluster: null, verbose: false, verifyConnection: false, pusherEventName: "changed"}); this.verboseLog = (...args) => this.config.verbose && log({"Art.Ery.Pusher": (args.length <= 1) ? args[0] : args}); this.configured = function() {let verbose, verifyConnection, key, cluster, pusher, temp; classSuper.configured.apply(this, arguments); temp = this.config; verbose = temp.verbose; verifyConnection = temp.verifyConnection; key = temp.key; cluster = temp.cluster; this.verboseLog(`ArtEryPusher configuring: ${Caf.toString(formattedInspect({PusherClient: !!this.PusherClient, PusherServer: !!this.PusherServer}))}`); if (this.PusherClient) {pusher = this.pusherClient = new this.PusherClient(key, {cluster}); this.verboseLog("ArtEryPusher PusherClient: initialized"); if (verifyConnection) {this.verboseLog("ArtEryPusher PusherClient: subscribing to state changes..."); this.pusherClient.connection.bind("state_change", (data) => this.verboseLog(`ArtEryPusher PusherClient: state_change: ${Caf.toString(formattedInspect(data))}`));};}; if (this.PusherServer) {this.pusherServer = new this.PusherServer(this.config); this.verboseLog("ArtEryPusher PusherServer: initialized"); verifyConnection && this.pusherServer.trigger("ArtEryPusherConfig", "server", {message: "ArtEryPusher PusherServer: verifyConnection: pusher was initialized correctly"}, (error, request, response) => error ? (this.verboseLog(`ArtEryPusher PusherServer: not initialized correctly! trigger-attempt error: ${Caf.toString(error)}`), console.log(error)) : this.verboseLog("ArtEryPusher PusherServer: initialized correctly."));}; if (!this.PusherClient && !this.PusherServer) {this.verboseLog("disabled. Require: art-ery-pusher/Client or art-ery-pusher/Server");}; return this.verboseLog("ArtEryPusher configured.");}; this.onConnected = function() {return new Promise((_resolve, reject) => this.pusherClient ? (this.verboseLog(`onConnected current state: ${Caf.toString(this.pusherClient.connection.state)}`), (this.pusherClient.connection.state === "connected") ? _resolve() : this.pusherClient.connection.bind("state_change", ({current}) => {this.verboseLog(`onConnected updated state: ${Caf.toString(current)}`); return (current === "connected") ? _resolve() : undefined;})) : reject("no pusherClient"));}; this.disconnect = function() {let base; return Caf.exists(base = this.pusherClient) && base.disconnect();};});});});
//# sourceMappingURL=Config.js.map
