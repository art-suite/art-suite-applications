"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Config", "isBrowser", "log"], [global, require('./StandardImport'), {Config: require('./Config'), ArtEry: require('art-ery')}], (Config, isBrowser, log) => {let config, verboseLog, encodePusherChannelName, getPusherChannel; config = Config.config; verboseLog = Config.verboseLog; encodePusherChannelName = function(key) {return key.replace(/[^-a-zA-Z0-9_=@,;]/g, ";");}; return {verboseLog, getPusherChannel: getPusherChannel = function(modelName, key) {return encodePusherChannelName(Caf.each2([modelName, key], (item) => encodePusherChannelName(item)).join("."));}, subscribeToChanges: function(modelName, key, handler) {let pusherClient, channelName, eventName, channel; return (pusherClient = Config.pusherClient) ? (channelName = getPusherChannel(modelName, key), eventName = config.pusherEventName, verboseLog({subscribe: {channelName}}), channel = pusherClient.subscribe(channelName), channel.bind(eventName, handler), {unsubscribe: () => {verboseLog({unsubscribe: {channelName}}); channel.unbind(eventName, handler); return pusherClient.unsubscribe(channelName);}}) : undefined;}, sendChanged: function(modelName, key, payload) {let pusherEventName, channel, request; pusherEventName = config.pusherEventName; channel = getPusherChannel(modelName, key); return (Config.pusherServer != null) ? (verboseLog({"sendChanged-sending": {request: request = {channel, pusherEventName, modelName, key, payload}}}), Config.pusherServer.trigger(channel, pusherEventName, payload || {}).then((response) => (response.status !== 200) ? verboseLog({"sendChanged-unspectedResponse": {request, response}}) : undefined).catch((error) => log({"aert-ery-pusher-sendChanged-error": {request, error}})), true) : (verboseLog({"sendChanged-pretend-sending": {info: `PusherServer not set. ${Caf.toString(isBrowser ? "Cannot send events FROM the browser. ArtEryServer required." : "Cannot send event.")}`, channel, pusherEventName, modelName, key, payload}}), false);}};});});
//# sourceMappingURL=Lib.js.map
