"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Filter", "isString", "Promise", "cryptoRandomString", "sendPusherChangedEvent", "merge"], [global, require('./StandardImport'), require('./Lib')], (Filter, isString, Promise, cryptoRandomString, sendPusherChangedEvent, merge) => {let PusherFilter; return PusherFilter = Caf.defClass(class PusherFilter extends Filter {}, function(PusherFilter, classSuper, instanceSuper) {this.prototype.withArtEryPusherSession = function(response) {return isString(response.session.artEryPusherSession) ? Promise.resolve(response) : response.withMergedSession({artEryPusherSession: cryptoRandomString(12)});}; this.prototype.notifySingleRecordWhichNeedsUpdating = function(pipeline, payload, data) {let keyString; return (keyString = pipeline.toKeyString(data)) ? sendPusherChangedEvent(pipeline.name, null, keyString, payload) : undefined;}; this.prototype.notifyAllQueriesWhichMayNeedUpdating = function(pipeline, payload, data) {return Caf.each2(pipeline.queries, (query, queryName) => {let queryKey; return (queryKey = query.toKeyString(data)) ? sendPusherChangedEvent(pipeline.name, queryName, queryKey, payload) : undefined;});}; this.group("outer"); this.after({all: function(response) {let updateType; updateType = (() => {switch (false) {case !response.isUpdateRequest(): return "update"; case !response.isDeleteRequest(): return "delete";};})(); return updateType ? this.withArtEryPusherSession(response).tap((response) => Promise.then(() => {let key, type, data, request, pipeline, artEryPusherSession, payload; key = response.key; type = response.type; data = response.data; request = response.request; pipeline = response.pipeline; artEryPusherSession = response.session.artEryPusherSession; data = merge(request.data, data, key ? pipeline.toKeyObject(key) : undefined); payload = {type: updateType, sender: artEryPusherSession, key: key || pipeline.toKeyString(data)}; if (!(type === "create")) {this.notifySingleRecordWhichNeedsUpdating(pipeline, payload, data);}; return this.notifyAllQueriesWhichMayNeedUpdating(pipeline, payload, data);})) : response;}});});});});
//# sourceMappingURL=PusherFilter.js.map
