// Generated by CoffeeScript 1.12.7
(function() {
  var Config, Pusher, activeSubscriptions, config, defineModule, log, merge, ref, session,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./StandardImport'), defineModule = ref.defineModule, log = ref.log, merge = ref.merge;

  config = (Config = require('./Config')).config;

  session = require('art-ery').session;

  Pusher = require('./namespace');

  activeSubscriptions = Pusher.activeSubscriptions = {};

  Pusher.logActiveSubscriptions = function() {
    return log({
      activeSubscriptions: Object.keys(activeSubscriptions).sort()
    });
  };

  defineModule(module, function() {
    return function(superClass) {
      var PusherArtModelMixin;
      return PusherArtModelMixin = (function(superClass1) {
        extend(PusherArtModelMixin, superClass1);

        function PusherArtModelMixin() {
          this._processPusherChangedEvent = bind(this._processPusherChangedEvent, this);
          PusherArtModelMixin.__super__.constructor.apply(this, arguments);
          this._channels = {};
          this._listeners = {};
        }

        PusherArtModelMixin.prototype.modelStoreEntryUpdated = function(arg) {
          var key, subscribers;
          key = arg.key, subscribers = arg.subscribers;
          if (subscribers.length > 0) {
            this._subscribe(key);
          }
          return PusherArtModelMixin.__super__.modelStoreEntryUpdated.apply(this, arguments);
        };

        PusherArtModelMixin.prototype.modelStoreEntryRemoved = function(arg) {
          var key;
          key = arg.key;
          this._unsubscribe(key);
          return PusherArtModelMixin.__super__.modelStoreEntryRemoved.apply(this, arguments);
        };

        PusherArtModelMixin.prototype._getPusherChannel = function(key) {
          return Config.getPusherChannel(this.name, key);
        };

        PusherArtModelMixin.prototype._subscribe = function(key) {
          var base, pusherClient, pusherEventName;
          pusherEventName = config.pusherEventName;
          pusherClient = Config.pusherClient;
          if (!pusherClient) {
            return;
          }
          if (config.verbose && !this._channels[key]) {
            log({
              pusher: {
                subscribe: this._getPusherChannel(key),
                model: this.recordsModel || this,
                self: this
              }
            });
          }
          if ((base = this._channels)[key] == null) {
            base[key] = pusherClient.subscribe(this._getPusherChannel(key));
          }
          if (!this._listeners[key]) {
            activeSubscriptions[this.name + " " + key] = true;
            return this._channels[key].bind(pusherEventName, this._listeners[key] = (function(_this) {
              return function(pusherData) {
                log({
                  key: key,
                  pusherData: pusherData
                });
                return _this._processPusherChangedEvent(pusherData, key);
              };
            })(this));
          }
        };

        PusherArtModelMixin.prototype._unsubscribe = function(key) {
          var pusherClient, pusherEventName, ref1;
          pusherEventName = config.pusherEventName;
          pusherClient = Config.pusherClient;
          if (!(pusherClient && this._channels[key])) {
            return;
          }
          if (this._listeners[key]) {
            if ((ref1 = this._channels[key]) != null) {
              ref1.unbind(pusherEventName, this._listeners[key]);
            }
            delete this._listeners[key];
          }
          delete activeSubscriptions[this.name + " " + key];
          if (config.verbose) {
            log({
              pusher: {
                unsubscribe: this._getPusherChannel(key),
                model: this.recordsModel || this
              }
            });
          }
          pusherClient.unsubscribe(this._getPusherChannel(key));
          return delete this._channels[key];
        };

        PusherArtModelMixin.prototype._processPusherChangedEvent = function(event, channelKey) {
          var artModelRecord, error, key, model, sender, type, updatedAt;
          key = event.key, sender = event.sender, updatedAt = event.updatedAt, type = event.type;
          model = this.recordsModel || this;
          log({
            _processPusherChangedEvent: {
              key: key,
              sender: sender,
              updatedAt: updatedAt,
              type: type,
              model: model
            }
          });
          try {
            switch (type) {
              case "create":
              case "update":
                if (sender === session.data.artEryPusherSession) {
                  log("saved 1 reload due to sender check! (model: " + this.name + ", key: " + key + ")");
                  return;
                }
                if ((artModelRecord = model.getModelRecord(key)) && artModelRecord.updatedAt >= updatedAt) {
                  log("saved 1 reload due to updatedAt check! (model: " + this.name + ", key: " + key + ")");
                  return;
                }
                log({
                  dataUpdateTriggered: key
                });
                return model.loadData(key).then(function(data) {
                  return model.dataUpdated(key, data);
                });
              case "delete":
                log({
                  dataDeleteTriggered: key
                });
                model.dataDeleted(key);
                return this.dataDeleted(channelKey, key);
              default:
                return log.error("PusherFluxModelMixin: _processPusherChangedEvent: unsupported type: " + type, {
                  event: event
                });
            }
          } catch (error1) {
            error = error1;
            log({
              error: error
            });
            throw error;
          }
        };

        return PusherArtModelMixin;

      })(superClass);
    };
  });

}).call(this);

//# sourceMappingURL=PusherArtModelMixin.js.map
