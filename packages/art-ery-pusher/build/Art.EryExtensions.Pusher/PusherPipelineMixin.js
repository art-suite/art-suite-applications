"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["subscribeToPusherChangeEvents", "session", "verboseLog", "log", "formattedInspect", "missing"], [global, require('./StandardImport'), require('./Lib'), require('art-communication-status')], (subscribeToPusherChangeEvents, session, verboseLog, log, formattedInspect, missing) => {return function(superClass) {let PusherPipelineMixin; return PusherPipelineMixin = Caf.defClass(class PusherPipelineMixin extends superClass {constructor() {super(...arguments); this._pusherQuerySubscriptions = {}; this._pusherSubscriptions = {};};}, function(PusherPipelineMixin, classSuper, instanceSuper) {Caf.isF(this.abstractClass) && this.abstractClass(); this.filter(require('./PusherFilter')); this.prototype.subscriberAdded = function(key, subscriber, queryName) {let temp, base; ((temp = (base = this._getQueryNamePusherSubscriptions(queryName))[key]) != null ? temp : base[key] = subscribeToPusherChangeEvents(this.name, queryName, key, (pusherData) => this._processPusherChangedEvent(pusherData, key, queryName))); return instanceSuper.subscriberAdded.apply(this, arguments);}; this.prototype.subscriberRemoved = function(key, subscriber, queryName) {let subscriptions, base; subscriptions = this._getQueryNamePusherSubscriptions(queryName); Caf.exists(base = subscriptions[key]) && base.unsubscribe(); delete subscriptions[key]; return instanceSuper.subscriberRemoved.apply(this, arguments);}; this.prototype._getQueryNamePusherSubscriptions = function(queryName) {let temp, base; return queryName ? ((temp = (base = this._pusherQuerySubscriptions)[queryName]) != null ? temp : base[queryName] = {}) : this._pusherSubscriptions;}; this.prototype._processPusherChangedEvent = function(event, channelKey, queryName) {let key, sender, type; key = event.key; sender = event.sender; type = event.type; return (() => {switch (type) {case "create": case "update": return (sender === session.data.artEryPusherSession) ? verboseLog({_processPusherChangedEvent: `saved 1 reload due to sender check! We are the ones who caused the event. (pipeline: ${Caf.toString(this.name)}, key: ${Caf.toString(key)})`}) : this.get(key).then((data) => this._sendDataSubscriptionEventSingle("update", key, data), (errorResponse) => (errorResponse.status === missing) ? this._sendDataSubscriptionEventSingle("delete", key, null) : log.error({message: "Error fetching updated record.", key, errorResponse})); case "delete": verboseLog({_processPusherChangedEvent: {sendingDataDeletedEventToLocalSubscribers: {name: this.name, key, queryName}}}); return this._sendDataSubscriptionEventSingle("delete", key, null); default: return log.error(`PusherPipelineMixin: _processPusherChangedEvent: unsupported type: ${Caf.toString(formattedInspect(type))}`, {event});};})();};});};});});
//# sourceMappingURL=PusherPipelineMixin.js.map
