"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["PusherPipelineMixin", "KeyFieldsMixin", "Pipeline", "PipelineRegistry", "merge", "randomString"], [global, require('../StandardImport')], (PusherPipelineMixin, KeyFieldsMixin, Pipeline, PipelineRegistry, merge, randomString) => {let SimpleStore; return SimpleStore = Caf.defClass(class SimpleStore extends PusherPipelineMixin(KeyFieldsMixin(Pipeline)) {constructor() {super(...arguments); this.db = {};};}, function(SimpleStore, classSuper, instanceSuper) {this.pipelineRegistry(new PipelineRegistry({location: "client"})); this.publicRequestTypes("get", "create", "update", "reset", "delete", "byNoodleId"); this.query({byNoodleId: {query: function({key}) {return Caf.array(this.db, null, (v, k) => v.noodleId === key);}, dataToKeyString: function({noodleId}) {return noodleId;}}}); this.handlers({reset: function({data}) {return this.db = Caf.object(data, (v, k) => merge(v, {id: k}));}, get: function({key}) {return this.db[key];}, create: function(request) {let key, temp, base; key = ((temp = Caf.exists(base = request.data) && base.id) != null ? temp : randomString().slice(0, 8)); return this.db[key] = merge(request.data, {id: key, updatedAt: 1});}, update: function({data, key, pipeline}) {let temp, base; return ((temp = this.db[key != null ? key : key = pipeline.toKeyString(data)] ? this.db[key] = merge(this.db[key], merge(data, {updatedAt: (Caf.exists(base = this.db[key]) && base.updatedAt || 1) + 1})) : undefined) != null ? temp : null);}, delete: function({key, data, pipeline}) {let out, temp; return ((temp = (out = this.db[key != null ? key : key = pipeline.toKeyString(data)]) ? (delete this.db[key], out) : undefined) != null ? temp : null);}});});});});
//# sourceMappingURL=SimpleStore.js.map
