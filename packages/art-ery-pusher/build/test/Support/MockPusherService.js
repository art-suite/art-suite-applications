"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "arrayWithoutValue", "Error", "formattedInspect", "timeout"], [global, require('../StandardImport')], (BaseObject, arrayWithoutValue, Error, formattedInspect, timeout) => {let MockPusherService; return (MockPusherService = Caf.defClass(class MockPusherService extends BaseObject {constructor() {super(...arguments); this._subscriptionsByChannel = {};};}, function(MockPusherService, classSuper, instanceSuper) {this.singletonClass(); this.getter({eventHandlerCount: function() {let count; count = 0; Caf.each2(this._subscriptionsByChannel, ({eventHandlers}, channel) => Caf.each2(eventHandlers, (handlers) => count += handlers.length)); return count;}}); this.prototype.subscribe = function(channel) {let temp, base; return ((temp = (base = this._subscriptionsByChannel)[channel]) != null ? temp : base[channel] = {eventHandlers: {}, bind: (event, handler) => {let temp1, base1; return (((temp1 = (base1 = this._subscriptionsByChannel[channel].eventHandlers)[event]) != null ? temp1 : base1[event] = [])).push(handler);}, unbind: (event, handler) => this._subscriptionsByChannel[channel].eventHandlers[event] = arrayWithoutValue(this._subscriptionsByChannel[channel].eventHandlers[event], handler)});}; this.prototype.unsubscribe = function(channel) {if (Caf.find(this._subscriptionsByChannel[channel].eventHandlers, null, (eventHandlerForRequestType) => eventHandlerForRequestType.length > 0)) {throw new Error(`Existing subscription has >0 eventHandlers. Should call \`unbind\` first.\n${Caf.toString(formattedInspect({channel, eventHandlers: this._subscriptionsByChannel[channel].eventHandlers}))}`);}; return delete this._subscriptionsByChannel[channel];}; this.prototype.trigger = function(channel, event, payload) {return timeout(10, () => {let base, base1; return Caf.each2(Caf.exists(base = this._subscriptionsByChannel[channel]) && (Caf.exists(base1 = base.eventHandlers) && base1[event]), (handler) => handler(payload));}).then(() => {return {status: 200};});};})).singleton;});});
//# sourceMappingURL=MockPusherService.js.map
