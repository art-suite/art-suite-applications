"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "describe", "session", "Promise", "timeout", "Error", "log", "randomString", "chainedTest", "simpleStore", "assert", "Object", "MockPusherService"], [global, require('./StandardImport'), require('./Support')], (BaseObject, describe, session, Promise, timeout, Error, log, randomString, chainedTest, simpleStore, assert, Object, MockPusherService) => {let fakeWeAreNotTheOneWhoTriggeredTheUpdate, PromiseSubScriber; fakeWeAreNotTheOneWhoTriggeredTheUpdate = function() {return session.data.artEryPusherSession = null;}; PromiseSubScriber = Caf.defClass(class PromiseSubScriber extends BaseObject {constructor() {super(...arguments); this._subscriber = (...args) => {let base; return Caf.exists(base = this._waitingPromise) && base.resolve(args);};};}, function(PromiseSubScriber, classSuper, instanceSuper) {this.getter("subscriber", {waitForEventPromise: function() {return this._waitingPromise = new Promise((resolve, reject) => {timeout(250, () => {let error; error = new Error("Expected a subscriber event within 250ms"); error.isTimeout = true; return reject(error);}); return timeout(0, () => this._waitingPromise.resolve = resolve);});}, expectNoEventPromise: function() {return this._waitingPromise = new Promise((resolve, reject) => {timeout(250, resolve); return timeout(0, () => this._waitingPromise.resolve = (resolved) => {log.error({unexpected: resolved}); return reject(new Error("Not expecting an event."));});});}});}); return describe({pipelineSingletonSubscriptions: function() {let queryKeyNoodleId, queryName, recordId, otherData, promiseSubscriber, subscriber; queryKeyNoodleId = "123"; queryName = "byNoodleId"; recordId = randomString(8); otherData = "stuff"; promiseSubscriber = new PromiseSubScriber; subscriber = promiseSubscriber.subscriber; return chainedTest("subscribe creates pusher subscriptions", () => {simpleStore.subscribe(recordId, subscriber); assert.eq(Object.keys(MockPusherService._subscriptionsByChannel), [`simpleStore;${Caf.toString(recordId)}`]); return assert.eq(MockPusherService.eventHandlerCount, 1);}).thenTest("create", () => simpleStore.create({data: {id: recordId}})).tapTest("create event triggered", (record) => {fakeWeAreNotTheOneWhoTriggeredTheUpdate(); return promiseSubscriber.expectNoEventPromise;}).thenTest("update", (record) => simpleStore.update(record.id, {data: {otherData}})).tapTest("update event triggered", (record) => {fakeWeAreNotTheOneWhoTriggeredTheUpdate(); return promiseSubscriber.waitForEventPromise.then((event) => assert.eq(event, ["update", record.id, {otherData, id: record.id, updatedAt: 2}]));}).thenTest("delete", (record) => simpleStore.delete(record.id)).tapTest("delete event NOT triggered", (record) => promiseSubscriber.waitForEventPromise.then((event) => assert.eq(event, ["delete", record.id, null]))).thenTest("unsubscribe removes pusher subscription", () => {simpleStore.unsubscribe(recordId, subscriber); return assert.eq(MockPusherService.eventHandlerCount, 0);});}, pipelineQuerySubscriptions: function() {let queryKeyNoodleId, queryName, noodleId, otherData, promiseSubscriber, subscriber; queryKeyNoodleId = "123"; queryName = "byNoodleId"; noodleId = "123"; otherData = "stuff"; promiseSubscriber = new PromiseSubScriber; subscriber = promiseSubscriber.subscriber; return chainedTest("subscribe creates pusher subscriptions", () => {simpleStore.subscribe(queryKeyNoodleId, subscriber, queryName); assert.eq(Object.keys(MockPusherService._subscriptionsByChannel), [`simpleStore;${Caf.toString(queryName)};${Caf.toString(noodleId)}`]); return assert.eq(MockPusherService.eventHandlerCount, 1);}).thenTest("create", () => simpleStore.create({data: {noodleId}})).tapTest("create event triggered", (record) => {fakeWeAreNotTheOneWhoTriggeredTheUpdate(); return promiseSubscriber.waitForEventPromise.then((event) => assert.eq(event, ["update", record.id, {noodleId, id: record.id, updatedAt: 1}, noodleId]));}).thenTest("update", (record) => simpleStore.update(record.id, {data: {otherData}})).tapTest("update event triggered", (record) => {fakeWeAreNotTheOneWhoTriggeredTheUpdate(); return promiseSubscriber.waitForEventPromise.then((event) => assert.eq(event, ["update", record.id, {noodleId, otherData, id: record.id, updatedAt: 2}, noodleId]));}).thenTest("delete", (record) => simpleStore.delete(record.id)).tapTest("delete event NOT triggered", (record) => promiseSubscriber.expectNoEventPromise).thenTest("unsubscribe removes pusher subscription", () => {simpleStore.unsubscribe(queryKeyNoodleId, subscriber, queryName); return assert.eq(MockPusherService.eventHandlerCount, 0);});}});});});
//# sourceMappingURL=PusherPiplineMixin.test.js.map
