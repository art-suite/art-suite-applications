import &StandardImport, {} &ArtEry

###
  Pusher provieds a testing stub:
  https://blog.pusher.com/testing-your-integration-with-the-pusher-javascript-library/
    "pusher-test-sub.js"

  Could be useful for testing.

  I'm having problems testing since connections can take a bit to fire up...

class Config extends Configurable
  ###
    /Client.coffee and /Server.coffee set this appropriatly:
    Should be a function: () -> pusher instance
      IN: nothing
      OUT: pusher instance

    NOTE: Pusher has a different library for server-side and client-side.
      They are rather inconsistent. Their constructors take different argument structures.
    Their API's aren't even very similar.

  @defaults
    appId:            :...
    key:              :...
    secret:           :...
    cluster:          null  # specify the pusher cluster
    verbose:          false # increase logging level with interesting stuff
    verifyConnection: false # if true, will do a test call to pusher after configured. Logs results.
    pusherEventName:  :changed

    # NOTE: If you specify a host then the 'cluster' parameter is ignored.
    # host: "api.pusherapp.com"

  @verboseLog: (args...) =>
    @config.verbose &&
      log Art.Ery.Pusher: if args.length <= 1 then args[0] else args

  @configured: ->
    super
    @config extract verbose, verifyConnection, key, cluster
    @verboseLog "" ArtEryPusher configuring: #{} formattedInspect PusherClient: !!@PusherClient, PusherServer: !!@PusherServer
    if @PusherClient
      pusher = @pusherClient = new @PusherClient key, {} cluster

      @verboseLog "" ArtEryPusher PusherClient: initialized

      if verifyConnection
        @verboseLog "" ArtEryPusher PusherClient: subscribing to state changes...
        @pusherClient.connection.bind :state_change (data) ->
          @verboseLog "" ArtEryPusher PusherClient: state_change: #{} formattedInspect data

    if @PusherServer
      @pusherServer = new @PusherServer @config

      @verboseLog "" ArtEryPusher PusherServer: initialized
      if verifyConnection
        Promise.then ->
          @pusherServer.trigger
            :ArtEryPusherConfig
            :server
            message: "" ArtEryPusher PusherServer: verifyConnection: pusher was initialized correctly
            (error, request, response) ->
              if error
                @verboseLog "" ArtEryPusher PusherServer: not initialized correctly! trigger-attempt error: #{error}
                console.log error
              else
                @verboseLog "" ArtEryPusher PusherServer: initialized correctly.
        .then
          (success) -> log ArtEryPusher: verifyConnection: {} success unless verifyConnection == :silent
          (error) -> log ArtEryPusher: verifyConnection: error: {message, url, error, status, body} = error

    if !@PusherClient && !@PusherServer
      @verboseLog "" disabled. Require: art-ery-pusher/Client or art-ery-pusher/Server

    @verboseLog "" ArtEryPusher configured.

  ## onConnected
    Client-side only
    promise.then -> # pusher is connected
    promise.catch -> @pusherClient not created - connection is impossible
  @onConnected: ->
    new Promise (_resolve, reject) ->
      if @pusherClient
        @verboseLog "" onConnected current state: #{@pusherClient.connection.state}
        if @pusherClient.connection.state == :connected
          _resolve()
        else
          @pusherClient.connection.bind :state_change ({current}) ->
            @verboseLog "" onConnected updated state: #{current}
            _resolve() if current == :connected
      else
        reject "" no pusherClient

  @disconnect: ->
    @pusherClient?.disconnect()
