import &StandardImport, {} &SimplePipeline
SimplePipeline = require '../SimplePipeline'

userIdObject = userId: "abc123"
wrongUserSession = userId: "wrongUserId123"

suite:
  basic: ->

    test "doesn't set any fields", ->
      class MyPipeline extends SimplePipeline
        @filter UserOwnedFilter

      assert.eq MyPipeline.getFields(), {}

  create: ->
    test "create OK when userId == session.userId", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter UserOwnedFilter

      (new MyPipeline).create data: userIdObject

    test "create without userId sets it to session.userId", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter UserOwnedFilter

      (new MyPipeline).create data: {}
      .then ({userId}) ->
        assert.isString userId
        assert.eq userId, userIdObject.userId

    test "create FAIL when userId != session.userId", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter UserOwnedFilter

      assert.rejects (new MyPipeline).create data: userId: "WRONG ANSWER!"

  userCreatableFields: ->
    test "pass", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userCreatableFields: foo: true

      (new MyPipeline).create data: merge userIdObject, foo: "hi"

    test "no data", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userCreatableFields: foo: true

      (new MyPipeline).create()

    test "fail", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userCreatableFields: foo: true

      assert.rejects (new MyPipeline).create data: merge userIdObject, bar: "hi"
      .then (rejectedWith) -> assert.eq rejectedWith.info.response.status, clientFailureNotAuthorized

    test "addDatabaseFiltersV2", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @addDatabaseFiltersV2
          fields:
            foo: "string"
            bar: "string"
          userOwned: userCreatableFields: foo: true

      pipelines.myPipeline.create data: merge userIdObject, foo: "hi"
      .then ->
        assert.rejects pipelines.myPipeline.create data: merge userIdObject, bar: "hi"
        .then (rejectedWith) -> assert.eq rejectedWith.info.response.status, clientFailureNotAuthorized


    test "create with key is clientFailure", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      assert.clientFailure pipelines.myPipeline.create data: userIdObject, key: "foo"

    test "fail to create with different userId", ->
      session.data = wrongUserSession
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      assert.clientFailureNotAuthorized pipelines.myPipeline.create data: userIdObject

  userUpdatableFields: ->
    test "success to update foo", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id}) ->
        pipelines.myPipeline.update
          key: id
          data: foo: "hi"

    test "clientFailureNotAuthorized to update foo if wrong user", ->
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id}) ->
        session.data = wrongUserSession
        assert.clientFailureNotAuthorized pipelines.myPipeline.update
          key: id
          data: foo: "hi"

    test "clientFailureNotAuthorized to update bar", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id}) ->
        assert.clientFailureNotAuthorized pipelines.myPipeline.update
          key: id
          data: bar: "hi"

    test "addDatabaseFiltersV2", ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @addDatabaseFiltersV2
          fields:
            foo: "string"
            bar: "string"
          userOwned: userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id})->
        pipelines.myPipeline.update
          key: id
          data: foo: "hi"
        .then ->
          assert.clientFailureNotAuthorized pipelines.myPipeline.update
            key: id
            data: bar: "hi"

  delete: ->
    test "owner can delete" ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id}) ->
        pipelines.myPipeline.delete id

    test "non-owner can not delete" ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter userUpdatableFields: foo: true

      pipelines.myPipeline.create data: userIdObject
      .then ({id}) ->
        session.data = wrongUserSession
        assert.clientFailureNotAuthorized pipelines.myPipeline.delete id

  requireUserCanUpdateOverride: ->
    chainedTest ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter
          requireUserCanUpdate: (request, existingRecord, updatingFields) ->
            request.requireServerOriginOr
              request.session.userId == :magicUserId123 ||
              request.session.userId == existingRecord.userId

      pipelines.myPipeline.create data: userIdObject
    .tapTest "success - update my own record" ({id}) ->
      pipelines.myPipeline.update id, data: foo: "hi"

    .tapTest "fail - I'm the wrong user" ({id}) ->
      session.data = wrongUserSession
      assert.clientFailureNotAuthorized pipelines.myPipeline.update id, data: foo: "hi"

    .tapTest "success - magic user can update my record" ({id}) ->
      session.data = userId: :magicUserId123

      pipelines.myPipeline.update id, data: foo: "hi"

  requireUserCanDeleteOverride: ->
    chainedTest ->
      session.data = userIdObject
      class MyPipeline extends SimplePipeline
        @filter new UserOwnedFilter
          requireUserCanDelete: (request, existingRecord, updatingFields) ->
            request.requireServerOriginOr
              request.session.userId == :magicUserId123 ||
              request.session.userId == existingRecord.userId

      pipelines.myPipeline.create data: userIdObject

    .thenTest "success - can delete my own record" ({id}) ->
      pipelines.myPipeline.delete id
      pipelines.myPipeline.create data: userIdObject

    .tapTest "fail - I'm the wrong user" ({id}) ->
      session.data = wrongUserSession
      assert.clientFailureNotAuthorized pipelines.myPipeline.update id, data: foo: "hi"

    .tapTest "success - magic user can delete my record" ({id}) ->
      session.data = userId: :magicUserId123

      pipelines.myPipeline.delete id
