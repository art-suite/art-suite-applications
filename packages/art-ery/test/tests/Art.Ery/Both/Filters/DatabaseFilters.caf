import &StandardImport
SimplePipelineWithKeys = KeyFieldsMixin &SimplePipeline

suite:
  basics: ->

    test "fields are set correctly", ->
      {myPipeline} = class MyPipeline extends SimplePipelineWithKeys
        @filter createDatabaseFilters
          linkFilterVersion: 2
          fields:
            user:   "required link"
            foo:    link: true, required: true
            bar:    link: "user"
            message: "present trimmedString"

      assert.eq Object.keys(myPipeline.fields).sort(), []
        :bar
        :barId
        :createdAt
        :foo
        :fooId
        :id
        :message
        :updatedAt
        :user
        :userId

      assert.eq (array {name} in myPipeline.filters with name), []
        :LinkFieldsFilter2
        :PrefetchedRecordsFilter
        :ValidationFilter
        :AfterEventsFilter
        :DataUpdatesFilter
        :UniqueIdFilter
        :TimestampFilter

    test "create", ->
      class MyPipeline extends SimplePipelineWithKeys
        @filter createDatabaseFilters
          linkFilterVersion: 2
          fields:
            user: required: link: "user"
            message: "present trimmedString"

      MyPipeline.singleton.create
        data:
          user: id: "abc123", name: "George"
          message: "Hi!"
      .then (data) ->
        assert.eq data.message, "Hi!"
        assert.eq data.userId, "abc123"
        assert.isNumber data.createdAt
        assert.isNumber data.updatedAt
        assert.match data.id, /^[-_a-zA-Z0-9\/\:]{12}$/

    test "userOwned only field", ->
      {myPipeline} = class MyPipeline extends SimplePipelineWithKeys
        @filter createDatabaseFilters
          linkFilterVersion: 2
          fields:     {}
          userOwned:  true

      assert.eq Object.keys(myPipeline.fields).sort(), []
        :createdAt
        :id
        :updatedAt
        :userId

      assert.eq (array {name} in myPipeline.filters with name), []
        :LinkFieldsFilter2
        :PrefetchedRecordsFilter
        :AfterEventsFilter
        :DataUpdatesFilter
        :UniqueIdFilter
        :TimestampFilter
        :UserOwnedFilter

    test "userOwned and another field", ->
      {myPipeline} = class MyPipeline extends SimplePipelineWithKeys
        @addDatabaseFiltersV2
          userOwned: true
          fields: myField: "strings"

      assert.eq (array {name} in myPipeline.filters with name), []
        :LinkFieldsFilter2
        :PrefetchedRecordsFilter
        :ValidationFilter
        :AfterEventsFilter
        :DataUpdatesFilter
        :UniqueIdFilter
        :TimestampFilter
        :UserOwnedFilter

      assert.eq Object.keys(myPipeline.fields).sort(), []
        :createdAt
        :id
        :myField
        :updatedAt
        :user
        :userId

  regressions: ->
    test "updatedAt preprocessor", ->
      {myPipeline} = class MyPipeline extends SimplePipelineWithKeys
        @addDatabaseFiltersV2
          fields: myField: "strings"

      myPipeline.create data: myField: "foo"
      .then ({id, createdAt, updatedAt}) ->
        assert.eq updatedAt, createdAt
        assert.eq updatedAt, updatedAt | 0
        myPipeline.update key: id, data: myField: "bar"
      .then ({id, createdAt, updatedAt}) ->
        assert.eq updatedAt, updatedAt | 0
