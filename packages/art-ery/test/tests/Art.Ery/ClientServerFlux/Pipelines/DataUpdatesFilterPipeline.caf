import &StandardImport

fluxLog = []

class DataUpdatesFilterPipeline extends &SimpleStore

  @publicRequestTypes :subrequestTest :update :delete

  @remoteServer :http://localhost:8085

  constructor: ->
    super
    @resetFluxLog()
    @subscribe (type, key, data) =>
      if type == "update" then @fluxLog.push  dataUpdated: {key, data, model: @name}
      else  @fluxLog.push                     dataDeleted: {key, data, model: @name}

  resetFluxLog: -> fluxLog = []

  @filter DataUpdatesFilter

  @filter
    before:
      create: (request) -> request.withMergedData createdAt: 123, updatedAt: 123
      update: (request) -> request.withMergedData updatedAt: 321

  @filter
    location: :client
    before: reset: (request) -> request.pipeline.resetFluxLog(); request

  @getter fluxLog: -> fluxLog

  @query
    userByEmail:
      query:            ({key}) -> array v, k from @db when v.email == key
      dataToKeyString:  ({email}) -> email

  @handlers
    subrequestTest: (request) ->
      {key, data, type} = request.data
      request.require isString(type), "subrequestTest needs a request-type"
      .then ->
        log subrequestTest: {} key, data, type
        request.subrequest request.pipelineName, type, {} key, data
