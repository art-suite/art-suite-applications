import &StandardImport

suite: ->
  test "aliases don't currently add actual alises in pipelines", ->

    class MyPipeline extends Pipeline
      @registry new PipelineRegistry
      @aliases "MyPipelineAlias"

    assert.eq pipelines.myPipelineAlias, undefined
    assert.eq MyPipeline.getAliases(), myPipelineAlias: true
    assert.eq Object.keys(MyPipeline.getRegistry().pipelines).sort(), [] :myPipeline, :myPipelineAlias

  test "second aliases call replaces first", ->
    class MyPipeline extends Pipeline
      @registry new PipelineRegistry
      @aliases "MyPipelineAlias"
      @aliases "FooLand"

    assert.eq MyPipeline.getAliases(), fooLand: true
    assert.eq Object.keys(MyPipeline.getRegistry().pipelines).sort(), [] :fooLand, :myPipeline

  test "aliases are not inherited", ->
    registry = new PipelineRegistry
    class MyPipeline extends Pipeline
      @registry registry
      @aliases "MyPipelineAlias"

    class MySubPipeline extends MyPipeline
      @registry registry
      @aliases "MySubPipelineAlias"

    assert.eq MyPipeline.getAliases(), myPipelineAlias: true
    assert.eq MySubPipeline.getAliases(), mySubPipelineAlias: true
    assert.eq Object.keys(registry.pipelines).sort(), [] :myPipeline, :myPipelineAlias, :mySubPipeline, :mySubPipelineAlias

  test "two pipelines with different aliases are distinct", ->
    registry = new PipelineRegistry
    class MyPipeline extends Pipeline
      @registry registry
      @aliases "MyPipelineAlias"

    class MyOtherPipeline extends Pipeline
      @registry registry
      @aliases "MyOtherPipelineAlias"

    assert.eq MyPipeline.getAliases(), myPipelineAlias: true
    assert.eq MyOtherPipeline.getAliases(), myOtherPipelineAlias: true
    assert.eq Object.keys(registry.pipelines).sort(), [] :myOtherPipeline, :myOtherPipelineAlias, :myPipeline, :myPipelineAlias
