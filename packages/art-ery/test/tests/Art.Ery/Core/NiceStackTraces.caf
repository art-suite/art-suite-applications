import &StandardImport

  # uncomment these to see if we get a clear failure message

indent = (str, indentString = "  ", wordWrapIndent = "  ") ->
  array line in str.split("\n")
    [__, spaces, line] = line.match /^(\s*)(.*)/
    lineIndent = indentString + spaces

    lineIndent +
      &ansiWordwrap line, width:
        global.process?.stdout?.columns || 80
        - lineIndent.length
        - wordWrapIndent.length
        - 1
      .replace :\n :\n + lineIndent + wordWrapIndent

  .join :\n

testNiceStackTrace = (name, tester) ->
  test "#{name} - set VERBOSE_TESTING=true to log error details", ->
    assert.rejects tester
    .then (error) ->
      if process.env.VERBOSE_TESTING == true || process.env.VERBOSE_TESTING == "true"
        log "" \n------------------------------\nNiceStackTrace
        log indent error.message.red
        log ''
        log indent error.stack.grey

suite: ->
  testNiceStackTrace "bad request arguments" ->

    class MyPipeline extends Pipeline
      @handlers get: -> 1

    .singleton.get originatedOnServer: :invalidValue

  testNiceStackTrace "ValidationFilter missing field" ->

    class MyRtUser3 extends Pipeline

    class MyRt3 extends Pipeline

      @publicRequestTypes :create
      @addDatabaseFiltersV2
        linkFilterVersion: 2
        fields:
          myRtUser2: :required :link
          text: :string


    .singleton.create data: text: "hi"

  testNiceStackTrace "ValidationFilter create with unexpected field" ->

    class MyPipeline extends Pipeline

      @publicRequestTypes :create
      @addDatabaseFiltersV2
        linkFilterVersion: 2
        fields:
          text: :string


    pipelines.myPipeline.create data: text: "hi" name: :John

  testNiceStackTrace "originatedOnServer required to issue non-public requests" ->

    class MyRtUser3 extends Pipeline

    {myRt3} = class MyRt3 extends Pipeline
        @handlers
          get: -> 123

    myRt3.get()

  testNiceStackTrace "requirements-not-met-nice-trace" ->
    {myRt4} = class MyRt4 extends Pipeline

      @publicHandlers
        requireSomething: (request) ->
          request.require 1 == 2, "1 must be 2 - what? that doesn't work in your universe?"

    myRt4.requireSomething()

  testNiceStackTrace "with filters" ->
    {myRt4} = class MyRt4 extends Pipeline

      @filter
        name: :filterMan
        before: failBig: (request) ->
          request.withMergedData filteredBy: :filterMan

      @publicHandlers
        failBig: (request) ->
          throw new Error "failed BIG in handler"

        outterRequest: (request) ->
          request.pipeline.failBig request

    myRt4.outterRequest()
