import &StandardImport, &build.RestClientLib

newRequest = (options) ->
  new Request merge
    type:     :get
    pipeline: new Pipeline
    session:  {}
    options

suite:
  getRemoteRequestProps:
    basic: ->
      test "create", ->
        assert.eq
          method: "post"
          url:    "/api/pipeline"
          data:   data: myField: "myInitialValue"
          getRemoteRequestProps newRequest type: "create", data: myField: "myInitialValue"

      test "get", ->
        assert.eq
          method: "get"
          url:    "/api/pipeline/myKey"
          data:   null
          getRemoteRequestProps newRequest type: "get", key: "myKey"

      test "get with compound key", ->
        assert.eq
          method: "get"
          url:    "/api/pipeline"
          data:   data: userId: "abc", postId: "xyz"
          getRemoteRequestProps newRequest type: "get", data: userId: "abc", postId: "xyz"

      test "delete", ->
        assert.eq
          method: "delete"
          url:    "/api/pipeline/myKey"
          data:   null
          getRemoteRequestProps newRequest type: "delete", key: "myKey"

      test "update", ->
        assert.eq
          method: "put"
          url:    "/api/pipeline/myKey"
          data:   data: myField: "myNewValue"
          getRemoteRequestProps newRequest type: "update", key: "myKey", data: myField: "myNewValue"

      test "update myAdd: 1", ->
        assert.eq
          method: "put"
          url:    "/api/pipeline/myKey"
          data:   props: myAdd: myCount: 1
          getRemoteRequestProps newRequest type: "update", key: "myKey", props: myAdd: myCount: 1

    context: ->
      test "context doesn't get passed to remote", ->
        request = newRequest()
        request.context.foo = "bar"
        assert.eq
          method: "get"
          url:    "/api/pipeline"
          data:   null
          getRemoteRequestProps request

