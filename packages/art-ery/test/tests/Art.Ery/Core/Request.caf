import &StandardImport

newRequest = (options) ->
  new Request merge
    type:   "get"
    pipeline: new Pipeline
    session: {}
    options

class MyCompoundKeyPipe extends KeyFieldsMixin Pipeline
  @keyFields "userId/postId"

newCompoundKeyRequest = (options) ->
  new Request merge
    type:   "get"
    pipeline: new MyCompoundKeyPipe
    session: {}
    options

suite:
  props: ->
    test "new Request key and data set via props:", ->

      assert.selectedPropsEq
        # via getters
        key:    "123"
        data:   "abc"
        props:  props = key: "123", data: "abc"

        new Request
          type:   "get"
          props:
            key:    "123"
            data:   "abc"
          session:  {}
          pipeline: new Pipeline

    test "new Request props: myProp: 987", ->

      assert.selectedPropsEq
        # via getters
        key:    undefined
        data:   undefined
        props:  myProp: 987

        new Request
          type:     "get"
          props:    myProp: 987
          session:  {}
          pipeline: new Pipeline

    test "new Request key: and data: are merged into props:", ->

      assert.selectedPropsEq
        # via getters
        key:    "123"
        data:   "abc"
        props:  props = key: "123", data: "abc", customProp: "xyz"

        # direct reads
        _key:   undefined
        _data:  undefined
        _props: props

        new Request
          type:   "get"
          key:    "123"
          data:   "abc"
          props:  customProp: "xyz"
          session:  {}
          pipeline: new Pipeline

    test "remoteRequest prop", ->
      r = new Request {}
        type: :get
        pipeline: new Pipeline
        session:  {}
        remoteRequest = :myRemoteRequest
      assert.eq r.remoteRequest, remoteRequest
      r.withData :foo
      .then (r2) ->
        assert.neq r, r2
        assert.eq r2.data, :foo
        assert.eq r2.remoteRequest, remoteRequest

  validation:
    "valid new Request": ->
      test "type: 'get'", ->
        new Request
          type: "get"
          key: "123"
          pipeline: new Pipeline
          session: {}

      test "type: 'create'", ->
        new Request
          type: "create"
          pipeline: new Pipeline
          session: {}

      test "type: 'update'", ->
        new Request
          type: "update"
          key: "123"
          pipeline: new Pipeline
          session: {}

      test "type: 'delete'", ->
        new Request
          type: "delete"
          key: "123"
          pipeline: new Pipeline
          session: {}

    "invalid new Request": ->
      test "missing everything", ->
        assert.throws -> new Request

      test "missing session", ->
        assert.throws ->
          new Request
            type: "get"
            key: "123"
            pipeline: new Pipeline

      test "key: {}", ->
        assert.throws ->
          new Request
            session: {}
            type: "get"
            key: {}
            pipeline: new Pipeline

      test "props: key: {}", ->
        assert.throws ->
          new Request
            session: {}
            type: "get"
            props: key: {}
            pipeline: new Pipeline

  properties: ->
    test "getKey", ->
      request = new Request
        type: "get"
        pipeline: new Pipeline
        session: {}
        props: key: "123"
      assert.eq request.getKey(), "123"

    test "getRequestType alias for getType", ->
      request = new Request
        type: "get"
        pipeline: new Pipeline
        session: {}
      assert.eq request.getRequestType(), "get"
      assert.eq request.getType(), "get"

  withData: ->
    test "withData", ->
      request = new Request
        type: "create"
        pipeline: new Pipeline
        session: {}
        data: {}
      request.withData foo: "bar"
      .then (newRequest) ->
        assert.neq newRequest, request
        assert.eq newRequest.data, foo: "bar"

    test "withMergedData", ->
      request = new Request
        type: "create"
        pipeline: new Pipeline
        session: {}
        data: bing: "bong"
      request.withMergedData foo: "bar"
      .then (newRequest) ->
        assert.neq newRequest, request
        assert.eq newRequest.data, bing: "bong", foo: "bar"

  derivedRequestsPersistProps: ->
    test "originatedOnServer", ->
      request = new Request
        type: "get"
        key: "123"
        originatedOnServer: true
        pipeline: new Pipeline
        session: {}

      request.withData({}).then (derivedRequest) ->
        assert.selectedPropsEq
          originatedOnServer: true
          type:     "get"
          key:      "123"
          pipeline: request.pipeline
          derivedRequest

  remoteRequestProps: ->

    test "create", ->
      assert.eq
        method: "post"
        url:    "/api/pipeline"
        data:   data: myField: "myInitialValue"
        newRequest(type: "create", data: myField: "myInitialValue").remoteRequestProps

    test "get", ->
      assert.eq
        method: "get"
        url:    "/api/pipeline/myKey"
        data:   null
        newRequest(type: "get", key: "myKey").remoteRequestProps

    test "get with compound key", ->
      assert.eq
        method: "get"
        url:    "/api/pipeline"
        data:   data: userId: "abc", postId: "xyz"
        newRequest(type: "get", data: userId: "abc", postId: "xyz").remoteRequestProps

    test "delete", ->
      assert.eq
        method: "delete"
        url:    "/api/pipeline/myKey"
        data:   null
        newRequest(type: "delete", key: "myKey").remoteRequestProps

    test "update", ->
      assert.eq
        method: "put"
        url:    "/api/pipeline/myKey"
        data:   data: myField: "myNewValue"
        newRequest(type: "update", key: "myKey", data: myField: "myNewValue").remoteRequestProps

    test "update myAdd: 1", ->
      assert.eq
        method: "put"
        url:    "/api/pipeline/myKey"
        data:   props: myAdd: myCount: 1
        newRequest(type: "update", key: "myKey", props: myAdd: myCount: 1).remoteRequestProps

  context:
    basics: ->
      test "context doesn't get passed to remote", ->
        request = newRequest()
        request.context.foo = "bar"
        assert.eq
          method: "get"
          url:    "/api/pipeline"
          data:   null
          request.remoteRequestProps

    "is identical after": ->
      test "request cloning", ->
        request = newRequest()
        {context} = request
        request.withMergedData user: "alice"
        .then (request) ->
          assert.same context, request.context

      test "response generation", ->
        request = newRequest()
        {context} = request
        request.success()
        .then (response) ->
          assert.same context, response.context

      test "subrequests-form-A", ->
        class MyPipeline extends Pipeline

        request = newRequest()
        {context} = request
        subrequest = request.createSubRequest "myPipeline", "get"
        assert.same context, subrequest.context

  subrequests: ->
    subrequestPipeline = null

    subrequestHandlers =
      form1: (request) -> subrequestPipeline.bar request, {} request.props
      form2: (request) -> subrequestPipeline.bar request, request.key, props: objectWithout request.props,             :key
      form3: (request) -> request.subrequest :subrequestPipeline :bar {} request.props
      form4: (request) -> request.subrequest :subrequestPipeline :bar request.key, props: objectWithout request.props, :key
      form5: (request) -> subrequestPipeline.bar request

    subrequestCompatibleHandlers =
      compatibleForm1: (request) -> subrequestPipeline.bar null, {} request.props
      compatibleForm2: (request) -> subrequestPipeline.bar null, request.key, props: objectWithout request.props,             :key

    setup ->
      {subrequestPipeline} = class SubrequestPipeline extends Pipeline
        @handlers handlers = merge
          subrequestHandlers
          subrequestCompatibleHandlers
          bar: (request) -> merge request.props, isSubrequest: !!request.parentRequest
        @publicRequestTypes "HOWHOW", Object.keys handlers

    key = "myKey"
    props = prop1: "propValue1"

    each _, k in subrequestHandlers
      test "subrequests #{k}", ->
        subrequestPipeline[k] key, {} props
        .then (data) -> assert.eq
          data
          merge props, {} key, isSubrequest: true

    each _, k in subrequestCompatibleHandlers
      test "subrequestCompatible #{k}", ->
        subrequestPipeline[k] key, {} props
        .then (data) ->
          assert.eq
            data
            merge props, {} key, isSubrequest: false

  compoundKeys: ->
    request = null
    setup ->
      request = newCompoundKeyRequest
        key: userId: "userAbc", postId: "postXyz"
        data: followerCount: 123

    test "key", -> assert.eq request.key, "userAbc/postXyz"
    test "keyObject", -> assert.eq request.keyObject, userId: "userAbc", postId: "postXyz"
    test "requestDataWithKey", -> assert.eq request.requestDataWithKey, userId: "userAbc", postId: "postXyz", followerCount: 123


  "key and data alias priorities": ->
    test "key: foo has priority over props: key: bar", ->
      assert.eq "aliasKey", (newRequest key: "aliasKey").key
      assert.eq "propsKey", (newRequest props: key: "propsKey").key
      assert.eq "aliasKey", (newRequest key: "aliasKey", props: key: "propsKey").key

    test "data: foo: 123 has priority over props: data: foo: 456", ->
      aliasData = aliasData: 123
      propsData = propsData: 123
      assert.eq aliasData, (newRequest data: aliasData).data
      assert.eq propsData, (newRequest props: data: propsData).data
      assert.eq aliasData, (newRequest data: aliasData, props: data: propsData).data

  withProps:
    withoutAliases: ->
      test "withProps", ->
        request = newRequest props: foo: 1
        request.withProps bar: 2
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.props, bar: 2

      test "withMergedProps", ->
        request = newRequest props: foo: 1
        request.withMergedProps bar: 2
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.props, foo: 1, bar: 2

    withAliases: ->
      test "withProps replaces aliases even if not explicitly set", ->
        request = newRequest key: "myKey", data: {myField: 1}, props: foo: 1
        request.withProps bar: 2
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.key,   undefined
          assert.eq newRequest.data,  undefined
          assert.eq newRequest.props, bar: 2

      test "withProps replace aliases", ->
        request = newRequest key: "myKey", data: {myField: 1}, props: foo: 1
        request.withProps bar: 2, key: "myKey2", data: {myField2: 2}
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.key,   "myKey2"
          assert.eq newRequest.data,  {myField2: 2}
          assert.eq newRequest.props, bar: 2, key: "myKey2", data: {myField2: 2}

      test "withMergedProps does not replace aliases even if not explicitly set", ->
        request = newRequest key: "myKey", data: {myField: 1}, props: foo: 1
        request.withMergedProps bar: 2
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.key,   request.key
          assert.eq newRequest.data,  request.data
          assert.eq newRequest.props, foo: 1, bar: 2, key: "myKey", data: myField: 1

      test "withMergedProps replace aliases", ->
        request = newRequest key: "myKey", data: {myField: 1}, props: foo: 1
        request.withMergedProps bar: 2, key: "myKey2", data: {myField2: 2}
        .then (newRequest) ->
          assert.neq newRequest, request
          assert.eq newRequest.key,   "myKey2"
          assert.eq newRequest.data,  {myField2: 2}
          assert.eq newRequest.props, foo: 1, bar: 2, key: "myKey2", data: {myField2: 2}

  requestTrace: ->
    test "requestTrace depth 1" ->
      {myRt} = class MyRt extends Pipeline

        @publicHandlers
          myHandler: (request) ->
            request.requestTrace

      myRt.myHandler()
      .then (requestTrace) ->
        assert.isArray requestTrace
        assert.selectedEq
          length: 1
          requestTrace
        assert.selectedEq
          request: :myRt.myHandler
          requestTrace[0]
        # assert.selectedEq
        #   name: :myHandler-handler
        #   requestTrace[0].lastFilter

    test "requestTrace depth 2" ->
      {myRt2} = class MyRt2 extends Pipeline

        @publicHandlers
          outterRequest: (request) ->
            myRt2.innerRequest request

          innerRequest: (request) -> request.requestTrace

      myRt2.outterRequest key: randomString()
