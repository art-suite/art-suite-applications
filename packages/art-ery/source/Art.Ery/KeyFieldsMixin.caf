import &StandardImport, &ArtValidation

###
  @primaryKey and @keyFields are synonymous
  Usage:

    class MyModel extends KeyFieldsMixin Pipeline # or FluxModel or whatever
      # 1 key
      @primaryKey "foo"
      @keyFields "foo"
      @keyFields ["foo"]

      # 2 keys
      @keyFields "foo/bar"
      @keyFields ["foo", "bar"]

      # 3 keys
      @keyFields "foo/bar/baz"   # compound key with 3 fields
      @keyFields ["foo", "bar', "baz"]

      # Default:
      # @keyFields "id"

  Note that order matters. @keyFields is a lists of strings. Forward slash (/) is
  used as a delimiter, so it shouldn't be in the names of your key-fields. Ideally
  each key field name should match: /[-._a-zA-Z0-9]+/

(superClass) -> class KeyFieldsMixin extends superClass
  @abstractClass()

  ###########################################
  # Class API
  # TODO: use Declarable
  ###########################################
  @getKeyFields:        -> @_keyFields
  @getKeyFieldsString:  -> @_keyFieldsString

  @primaryKey: keyFields = (a) ->
    if isString a           then @_keyFields = (@_keyFieldsString = a).split "/"
    else if isPlainArray a  then @_keyFieldsString = (@_keyFields = a).join "/"
    else throw new Error "invalid value: #{formattedInspect a}"

  @keyFields: keyFields

  ###########################################
  # Instance API
  ###########################################
  @getter
    keyFieldsString:  -> @_keyFieldsString  ?= @class._keyFieldsString
    keyFields:        -> @_keyFields        ?= @class._keyFields
    keyValidator:     -> @_keyValidator     ?= @class._keyValidator

  allKeyFieldsPresent: (data) ->
    find keyField in @keyFields when !present data[keyField]
      false
    ? true

  isRecord: (data) -> isPlainObject(data) && @allKeyFieldsPresent data

  # Overrides FluxModel's implementation
  dataToKeyString: (a) ->
    @validateKey a
    array field in @keyFields with a[field]
    .join "/"

  createPropsToKeyFunction: (keyField = "id") ->
    if keyField == "id"
      recordType = @pipelineName
      (props, stateField) ->
        propsField = stateField ? recordType
        props[propsField]?.id ? props[propsField + "Id"]

    else if matches = keyField.match /^(.+)Id$/
      [propsIdField, propsField] = matches
      (props) ->  props[propsField]?.id ? props[propsIdField]

    else
      (props) ->  props[keyField]

  @getter
    propsToKey: ->
      @_propsToKey ?=
        if @keyFields.length == 1
          @createPropsToKeyFunction @keyFields[0]
        else
          fMap = object v in @keyFields with @createPropsToKeyFunction v
          (props) -> object f in fMap with f props

  toKeyObject: (a) ->
    keyObject = @validateKey
      if isPlainObject a
        object v in @keyFields with a[v]

      else if isString a
        if @keyFields.length > 1
          splitInput = a.split "/"
          keyObject = object v, i in @keyFields with splitInput[i]
          if splitInput.length != @keyFields.length
            log.warn KeyFieldsMixin_toKeyObject: {}
              message: "wrong number of /-delimited fields in key-string"
              @pipelineName
              input: a
              splitInput
              @keyFields
              usingKeyObject: keyObject

          keyObject

        else
          [@keyFields[0]]: a

      else {}

    @keyValidator?.preprocess keyObject # the important thing is the preprocessor is applied
    ? keyObject

  dataWithoutKeyFields: (data) ->
    data && object v, k in data when not(k in @keyFields)

  validateKey: (key) ->
    find field in @keyFields when !present key[field]
      throw new Error "#{@class.getName()} missing key field(s): #{formattedInspect {missing: field, @keyFields, key}}"

    key

  #################################
  # PRIVATE
  #################################
  @_keyFieldsString:  defaultKeyFieldsString = "id"
  @_keyFields:        [defaultKeyFieldsString]

  @_initFields: ->
    super
    fields = @getFields()
    @_keyValidator = new Validator object fieldName in @getKeyFields() when fields[fieldName] with fields[fieldName]
