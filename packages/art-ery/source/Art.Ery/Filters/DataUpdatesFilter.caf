import &StandardImport

###
  A) Populate context.dataUpdates
  B) if Neptune.Art.Flux is defined, and this is the root request or resposne
     Perform 'local updates'
  TODO:
    Eventually we will want a way to say that some record updates should not be returned client-side.
    First pass
      - data has already gone through the after-pipeline, so any after-filters can removed fields
        the current user can't see. TODO: create privacy filters
      - if data is empty, then don't add it to updates. Nothing to add anyway. DONE


# 2023 Question/Note: Do we properly handle updates where a field of a record was set to NULL?
#   If we strip NULLs in return objects, then the client-side update, if it's a merge and not a replace,
#   wouldn't get the NULL-out signal.
class DataUpdatesFilter extends &Filter

  updateRequestTypeRegExp = /^(create|update)/
  deleteRequestTypeRegExp = /^delete/

  # for subrequests, this will still be on the server
  # for root requests, there is work to do on both the client and server
  @location :both
  @group :outer

  updateDataUpdatesContext = (response, context)->
    response extract key, type, responseData, pipelineName

    context ?= response.context

    if groupName = switch
        when updateRequestTypeRegExp.test type then :dataUpdates
        when deleteRequestTypeRegExp.test type then :dataDeletes

      # if groupName == :dataUpdates
      #   log updateDataUpdatesContext: {} pipelineName, type, key, responseData

      switch
      when responseData is Array
        each record in responseData
          key = response.pipeline.toKeyString record
          # log "" vivifyObjectPathAndSet(A) #{groupName}, #{pipelineName}, #{key} (#{type})
          vivifyObjectPathAndSet context, groupName, pipelineName, key, record

      when key, response.pipeline.isRecord responseData
        responseData ?=
          response.pipeline.toKeyObject? key || responseData
          || {}

        key ?= response.pipeline.toKeyString responseData
        # log "" vivifyObjectPathAndSet(B) #{groupName}, #{pipelineName}, #{key} (#{type})
        vivifyObjectPathAndSet context, groupName, pipelineName, key, responseData

    context

  @after all: (response) ->
    if response.isRootRequest

      switch response.location
      when :client
        response
        .tap (response) -> @applyFluxUpdates response if @models

      when :server :both
        response.withMergedPropsWithoutNulls {dataUpdates, dataDeletes} = response.context

    else
      # log DataUpdatesFilter3: {} response
      updateDataUpdatesContext response
      response

  applyFluxUpdates: (response) ->
    response.responseProps extract dataUpdates, dataDeletes

    @applyModelDataUpdates dataUpdates
    @applyModelDataDeletes dataDeletes

    if updateRequestTypeRegExp.test response.type
      @applyModelDataUpdates updateDataUpdatesContext(response, {}).dataUpdates
    if deleteRequestTypeRegExp.test response.type
      @applyModelDataDeletes updateDataUpdatesContext(response, {}).dataDeletes

  @getter
    models: -> Neptune.Art.Flux?.models

  applyModelDataUpdates: (dataUpdates) ->
    each dataUpdatesByKey, pipelineName in dataUpdates when @models[pipelineName]?.dataUpdated is Function
      each data, key in dataUpdatesByKey
        @models[pipelineName].dataUpdated key, data

  applyModelDataDeletes: (dataDeletes) ->
    each dataDeletesByKey, pipelineName in dataDeletes when @models[pipelineName]?.dataDeleted is Function
      each data, key in dataDeletesByKey
        @models[pipelineName].dataDeleted key, data
