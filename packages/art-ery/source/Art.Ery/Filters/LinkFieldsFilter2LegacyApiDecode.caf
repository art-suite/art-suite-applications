# DOH, we don't need this (I think). LinkFieldsFilter2Transition2BFilter does the job.
import &StandardImport, &LinkFieldsFilter2

# run this AFTER LinkFieldsFilter2 to convert dataUpdates to
# The old over-the-while protocol: including linked objects inline in their parent objects.
class LinkFieldsFilter2LegacyApiDecode extends Filter
  @location :client

  @after
    all: (response) ->
      response.withMergedProps
        data: legacyDecode
          response.pipeline
          dataUpdates = {}
          response.data
        dataUpdates: dataUpdates

  legacyDecode = (pipeline, dataUpdates, data) ->
    if getLinkedFieldFilterForPipeline(pipeline) extract linkFields
      switch
      when data is Array  then array record in data with  legacyDecodeB pipeline, linkFields, dataUpdates, record
      when data is Object then                            legacyDecodeB pipeline, linkFields, dataUpdates, data
      else data
    else data

  ## legacyDecodeB
    IN:
      linkFields: <Object> (Example)
        user:
          pipelineName: :user
          idFieldName: :userId
          prefetch: true
          required: true
          autoCreate: true

      dataUpdates: <Object> (Example)
        myPipelineName: recordId: record

      record: <Object>
  legacyDecodeB = (pipeline, linkFields, dataUpdates, record) ->
    mergeWithoutNulls record, object {idFieldName, pipelineName}, fieldName in linkFields when record[fieldName]
      inlineRecord = record[fieldName]
      vivifyObjectPathAndSet dataUpdates, pipelineName, inlineRecord.id, inlineRecord
      legacyDecode
        pipeline.pipelines[pipelineName]
        dataUpdates
        inlineRecord

      null
