import &StandardImport, &Config, &RestClientLib, &RestServerLib, {}
  &@ArtSuite/DatabaseFilters

class Pipeline extends &@ArtSuite/ArtPipelines.Pipeline
  @abstractClass() # any sub-class that shouldn't auto-register should be an abstract class
  @registry new &@ArtSuite/ArtPipelines.PipelineRegistry location: :client

  # override
  handleRequest: (request) ->
    if request.location == :client && @remoteServer
      sendRemoteRequest request
    else super

  @getter
    isRemoteClient:   -> !!@remoteServer
    apiRoot:          -> @class._apiRoot ? config._apiRoot
    remoteServer:     -> @class._remoteServer ? config.remoteServer
    restPath:         -> @_restPath ?= getPipelineRestPath @
    restPathRegex:    -> @_restPathRegex ?= getPipelineRestPathRegex @

  @remoteServer:    (@_remoteServer)    -> # override default (see config.remoteServer)
  @apiRoot:         (@_apiRoot)         -> # override default (see config.apiRoot)

  @getter
    apiReport: (options = {}) -> apiReport @, options

  #####################################
    ###################################

      Database / RecordPipeline Extensions

    ###################################
    ###################################

    Big question, do these count as RecordPipeline extensions?

      @queries
      @fields

  @addDatabaseFilters: (options) ->
    @filter DatabaseFilters.createDatabaseFilters options, @

  @addDatabaseFiltersV2: (options) ->
    @filter DatabaseFilters.createDatabaseFilters
      merge
        linkFilterVersion: 2
        options

      @

  @tableNamePrefix:     (@_tableNamePrefix) -> # override default (see config.tableNamePrefix)
  getPrefixedTableName: (tableName) -> "#{@tableNamePrefix}#{tableName}"

  @getter
    tableNamePrefix:        -> @class._tableNamePrefix ? config.tableNamePrefix
    tableName:              -> @getPrefixedTableName @name
