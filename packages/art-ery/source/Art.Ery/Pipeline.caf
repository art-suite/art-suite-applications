import &StandardImport, &PrefetchedRecordsCache, {} &DatabaseFilters

###
  TODO: (July2019)
  Factor out all ArtFlux-related stuff
    ArtEry should be independent of ArtFlux or any other client-side state-management-system.

    Remaining:

      artModelMixins -
        This lets you customize what time of Object is created
        for your models. ArtEry shouldn't know anything about creating models, though...

        However, I DO want a way to declare this info in the Pipeline declaration
        to reduce redundency.

      query:
        Another declaration passed directly to ArtFlux

      aliases:
        Another declaration passed directly to ArtFlux

    Perhaps we need a subclass: PipelineWithFluxModel?

  Namespaced-Registry

    I still don't quite know how I want to do this, but I want BOTH ArtFlux (ArtModels?)
    and ArtEry (ArtPipelines?) to have namespaced registries so you can merge as many
    packages as you want based on ArtSuite without name-conflicts in their registries.

class Pipeline extends &PipelineArtModelsMixin &PipelineDbCoreMixin &PipelineRemoteCoreMixin &PipelinePublicRequestsMixin &PipelineCore
  # copy-paste this line to any sub-class that shouldn't auto-register
  @abstractClass()


  ## getPrefetchedRecord
    This allows susequent requests to get temporarilly-cached 'prefetched' records from previous requests
    This requires the PrefetchedRecordsFilter.
    Not even sure anyone uses this particular method...
  getPrefetchedRecord: (key) ->
    prefetchedRecordsCache.get @pipelineName, key

  ## toKeyString
    Note, this requires @dataToKeyString be implemented. Typically that will be by using KeyFilesMixin.
    If this requires KeyFieldsMixin, maybe it should be IN KeyFieldsMixin...
  toKeyString: (key) ->
    return key unless key?
    if isString key
      key
    else if @dataToKeyString && isPlainObject key
      @dataToKeyString key
    else
      throw new Error "override toKeyString or dataToKeyString for non-string-keys like: #{formattedInspect key}"

  ###########################
  # Overrides
  ###########################

  ## getFieldsRequestWillModify (override as needed)
    # called by UserOwnedFilter.before.update for correct authorization validation
    # overriden by Art.Ery.Aws.DynamoDb to support "add" and "setDefault" for a correct modifications-list
  getFieldsRequestWillModify: (request) -> request.data ? {}

  @getter

    # RestCore
    restPath:       -> @_restPath ?= "" /#{config.apiRoot}/#{@name}
    restPathRegex:  -> @_restPathRegex ?=
      ///i
        ^
        #{escapeRegExp @restPath}
        (?:-([a-z0-9_]+))?          # optional request-type (if missing, it is derived from the HTTP method)
        (?:\/([^?]+))?       # optional key
        (?=\?|$)

    # WAT??? Not sure how or if this is used.
    status: -> :OK
