import &StandardImport, {} &Session, &PrefetchedRecordsCache

class PipelineRegistry extends BaseObject
  @singletonClass()

  @pipelineRegistries: pipelineRegistries = []

  constructor: (name)->
    @_name = name ? @class.name
    @_pipelines = {}
    @_registryRegistry()

  _registryRegistry: ->
    registryNumber = pipelineRegistries.length
    @_uniqueName = "#{@name}#{registryNumber}"
    pipelineRegistries[registryNumber] = @

  @getter :name :pipelines :uniqueName
  @getter
    session: -> @_session ?= new Session null, "ArtEry-#{@name}-Session", @
    prefetchedRecordsCache: -> @_prefetchedRecordsCache ?= new PrefetchedRecordsCache @

  # returns the Pipeline's singleton
  register: ({singleton, _aliases, name}) ->

    each _, alias in _aliases
      if @pipelines[alias]
        log {} _aliases
        throw new Error "Error registrying alias #{formattedInspect alias} for Pipeline '#{name}' - already exists: #{formattedInspect @pipelines[alias]}"
      @pipelines[alias] = singleton

    @pipelines[singleton extract name] = singleton
    singleton
