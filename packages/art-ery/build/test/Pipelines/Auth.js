"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Pipeline", "isString", "present"], [global, require('./StandardImport')], (Pipeline, isString, present) => {let isPresentString, Auth; isPresentString = function(s) {return isString(s) && present(s);}; return Auth = Caf.defClass(class Auth extends Pipeline {}, function(Auth, classSuper, instanceSuper) {let authenticationFailed; this.remoteServer("http://localhost:8085"); authenticationFailed = function(data) {let username, password; if (Caf.exists(data)) {username = data.username; password = data.password;}; return (() => {switch (false) {case !(!isPresentString(username)): return "username not present"; case !(!isPresentString(password)): return "password not present"; case !(username !== password): return "username and password don't match";};})();}; this.publicRequestTypes("get", "authenticate", "loggedInAs", "hello", "setFooSession", "getRestrictedResource"); this.handlers({get: function({session}) {return session.username;}, authenticate: function(request) {let data, message; data = request.data; return (message = authenticationFailed(data)) ? request.clientFailure({data: {message}}) : request.respondWithMergedSession({username: data.username});}, loggedInAs: function(request) {let username; return (username = isPresentString(request.session.username)) ? {username} : request.success();}, hello: function(request) {return request.subrequest("myRemote", "hello");}, setFooSession: function(request) {return request.respondWithMergedSession({foo: request.data.foo});}, getRestrictedResource: function(request) {return request.session.username ? {secretSauce: "thousand island dressing"} : request.clientFailureNotAuthorized();}});});});});
//# sourceMappingURL=Auth.js.map
