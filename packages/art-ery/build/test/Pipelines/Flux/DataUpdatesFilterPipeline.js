"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["DataUpdatesFilter", "getFluxLog", "resetFluxLog", "isString", "log"], [global, require('./StandardImport'), require('./FluxLog')], (DataUpdatesFilter, getFluxLog, resetFluxLog, isString, log) => {let DataUpdatesFilterPipeline; return DataUpdatesFilterPipeline = Caf.defClass(class DataUpdatesFilterPipeline extends require('./SimpleStore') {}, function(DataUpdatesFilterPipeline, classSuper, instanceSuper) {this.publicRequestTypes("subrequestTest", "update", "delete"); this.remoteServer("http://localhost:8085"); this.fluxModelMixin(require('./DataUpdatesFilterFluxModelMixin')); this.filter(DataUpdatesFilter); this.filter({before: {create: function(request) {return request.withMergedData({createdAt: 123, updatedAt: 123});}, update: function(request) {return request.withMergedData({updatedAt: 321});}}}); this.filter({location: "client", before: {reset: function(request) {resetFluxLog(); return request;}}}); this.getter({fluxLog: getFluxLog}); this.query({userByEmail: {query: function({key}) {return Caf.array(this.db, null, (v, k) => v.email === key);}, dataToKeyString: function({email}) {return email;}}}); this.handlers({subrequestTest: function(request) {let key, data, type; ({key, data, type} = request.data); return request.require(isString(type), "subrequestTest needs a request-type").then(() => {log({subrequestTest: {key, data, type}}); return request.subrequest(request.pipelineName, type, {key, data});});}});});});});
//# sourceMappingURL=DataUpdatesFilterPipeline.js.map
