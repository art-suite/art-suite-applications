"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["verifySession", "Promise", "createRequestFromRemoteRequestProps", "log", "config", "isArray", "prepareSignedSessionForResponse", "pipelineRegistry"], [global, require('./StandardImport'), require('./ArtErySessionManager')], (verifySession, Promise, createRequestFromRemoteRequestProps, log, config, isArray, prepareSignedSessionForResponse, pipelineRegistry) => {let ArtEryHandler; return ArtEryHandler = Caf.defClass(class ArtEryHandler extends require('art-express-server').PromiseHandler {constructor(options = {}) {let temp; super(...arguments); this._pipelineRegistry = ((temp = options.pipelineRegistry) != null ? temp : pipelineRegistry);};}, function(ArtEryHandler, classSuper, instanceSuper) {let httpMethodsToArtEryRequestTypes; this.getter("pipelineRegistry", {pipelines: function() {return this.pipelineRegistry.pipelines;}}); this.prototype.canHandleRequest = function(request) {let url; ({url} = request); return Caf.find(this.pipelines, null, (pipeline, pipelineName) => pipeline.restPathRegex.test(url));}; this.prototype.handleApiRequest = function(request, requestData) {let found, pipeline, type, key; return (found = this._findPipelineForRequest(request)) ? (({pipeline, type, key} = found), verifySession(requestData.session).catch(() => null).then((session) => pipeline._processRequest(createRequestFromRemoteRequestProps({pipeline, type, key, requestData, session: session || {}, remoteRequest: request})).then((response) => {if (response.isError) {log.error(response);} else {if (config.verbose) {log(`${Caf.toString(response.requestString)}: subrequestCount: ${Caf.toString(response.subrequestCount)}, recordsReturned: ${Caf.toString(response.data ? isArray(response.data) ? response.data.length : 1 : 0)}`);};}; return prepareSignedSessionForResponse(session, response.responseForRemoteRequest);}))) : Promise.resolve(null);}; httpMethodsToArtEryRequestTypes = {get: "get", post: "create", put: "update", delete: "delete"}; this.prototype._findPipelineForRequest = function(request) {let url, method, found, match, pipeline, __, type, key; ({url, method} = request); return (found = Caf.find(this.pipelines, (pipeline, pipelineName) => (match = url.match(pipeline.restPathRegex)) ? {match, pipeline} : undefined)) ? (({match, pipeline} = found), ([__, type, key] = match), type || (type = httpMethodsToArtEryRequestTypes[method.toLocaleLowerCase()]), (config.verbose && type && !pipeline.publicRequestTypes[type]) ? log.warn(`ArtEryHandler blocked request: '${Caf.toString(pipeline.name)}.${Caf.toString(type)}': ${Caf.toString((Caf.in(type, pipeline.requestTypes)) ? "not in publicRequestTypes" : "not a valid request-type")}`) : undefined, pipeline.publicRequestTypes[type] && {pipeline, type, key}) : undefined;};});});});
//# sourceMappingURL=ArtEryHandler.js.map
