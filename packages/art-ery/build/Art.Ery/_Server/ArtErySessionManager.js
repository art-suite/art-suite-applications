"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Promise", "config", "objectWithout", "merge", "Date", "eq"], [global, require('./StandardImport')], (Promise, config, objectWithout, merge, Date, eq) => {let PromiseJsonWebToken, ArtErySessionManager; PromiseJsonWebToken = require('./PromiseJsonWebToken'); return ArtErySessionManager = Caf.defClass(class ArtErySessionManager extends Object {}, function(ArtErySessionManager, classSuper, instanceSuper) {let iatAgeInDays; this.verifySession = function(session) {let sessionSignature; return !(sessionSignature = session) ? Promise.resolve({}) : PromiseJsonWebToken.verify(sessionSignature, config.server.privateSessionKey).then((session) => session);}; this.prepareSignedSessionForResponse = (oldSession, responseData) => {let newSession; return this._shouldReturnNewSignedSession(oldSession, newSession = responseData.session || oldSession) ? this.signSession(newSession).then((signature) => merge(responseData, {session: merge(newSession, {signature})})) : objectWithout(responseData, "session");}; this.signSession = function(session) {return PromiseJsonWebToken.sign(objectWithout(session, "exp", "iat"), config.server.privateSessionKey, {expiresIn: "30 days"});}; this.iatAgeInDays = iatAgeInDays = function(iat) {return (Date.now() / 1000 - iat) / (60 * 60 * 24);}; this._shouldReturnNewSignedSession = function(oldSession, newSession) {let iat; if (oldSession) {({iat} = oldSession);}; return !iat || 1 < iatAgeInDays(iat) || !eq(oldSession, newSession);};});});});
//# sourceMappingURL=ArtErySessionManager.js.map
