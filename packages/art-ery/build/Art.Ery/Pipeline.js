"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["prefetchedRecordsCache", "isString", "isPlainObject", "Error", "formattedInspect", "config", "escapeRegExp"], [global, require('./StandardImport'), require('./PrefetchedRecordsCache'), {DatabaseFilters: require('./DatabaseFilters')}], (prefetchedRecordsCache, isString, isPlainObject, Error, formattedInspect, config, escapeRegExp) => {let Pipeline; return Pipeline = Caf.defClass(class Pipeline extends require('./PipelineArtModelsMixin')(require('./PipelineDbCoreMixin')(require('./PipelineRemoteCoreMixin')(require('./PipelinePublicRequestsMixin')(require('./PipelineCore'))))) {}, function(Pipeline, classSuper, instanceSuper) {this.abstractClass(); this.prototype.getPrefetchedRecord = function(key) {return prefetchedRecordsCache.get(this.pipelineName, key);}; this.prototype.toKeyString = function(key) {if (!(key != null)) {return key;}; return isString(key) ? key : (this.dataToKeyString && isPlainObject(key)) ? this.dataToKeyString(key) : (() => {throw new Error(`override toKeyString or dataToKeyString for non-string-keys like: ${Caf.toString(formattedInspect(key))}`);})();}; this.prototype.getFieldsRequestWillModify = function(request) {let temp; return ((temp = request.data) != null ? temp : {});}; this.getter({restPath: function() {let temp; return ((temp = this._restPath) != null ? temp : this._restPath = `/${Caf.toString(config.apiRoot)}/${Caf.toString(this.name)}`);}, restPathRegex: function() {let temp; return ((temp = this._restPathRegex) != null ? temp : this._restPathRegex = RegExp(`^${Caf.toString(escapeRegExp(this.restPath))}(?:-([a-z0-9_]+))?(?:\\/([^?]+))?(?=\\?|\$)`, 'i'));}, status: function() {return "OK";}});});});});
//# sourceMappingURL=Pipeline.js.map
