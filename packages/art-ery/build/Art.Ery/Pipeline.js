"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["sendRemoteRequest", "config", "getPipelineRestPath", "getPipelineRestPathRegex", "apiReport", "DatabaseFilters", "merge"], [global, require('./StandardImport'), require('./Config'), require('./RestClientLib'), require('./RestServerLib'), {DatabaseFilters: require('@art-suite/database-filters')}], (sendRemoteRequest, config, getPipelineRestPath, getPipelineRestPathRegex, apiReport, DatabaseFilters, merge) => {let Pipeline; return Pipeline = Caf.defClass(class Pipeline extends require('@art-suite/art-pipelines').Pipeline {}, function(Pipeline, classSuper, instanceSuper) {this.abstractClass(); this.registry(new (require('@art-suite/art-pipelines').PipelineRegistry)({location: "client"})); this.prototype.handleRequest = function(request) {return (request.location === "client" && this.remoteServer) ? sendRemoteRequest(request) : instanceSuper.handleRequest.apply(this, arguments);}; this.getter({isRemoteClient: function() {return !!this.remoteServer;}, remoteServer: function() {let temp; return ((temp = this.class._remoteServer) != null ? temp : config.remoteServer);}, restPath: function() {let temp; return ((temp = this._restPath) != null ? temp : this._restPath = getPipelineRestPath(this));}, restPathRegex: function() {let temp; return ((temp = this._restPathRegex) != null ? temp : this._restPathRegex = getPipelineRestPathRegex(this));}}); this.remoteServer = function(_remoteServer) {this._remoteServer = _remoteServer;}; this.getter({apiReport: function(options = {}) {return apiReport(this, options);}}); this.addDatabaseFilters = function(options) {return this.filter(DatabaseFilters.createDatabaseFilters(options, this));}; this.addDatabaseFiltersV2 = function(options) {return this.filter(DatabaseFilters.createDatabaseFilters(merge({linkFilterVersion: 2}, options), this));}; this.tableNamePrefix = function(_tableNamePrefix) {this._tableNamePrefix = _tableNamePrefix;}; this.prototype.getPrefixedTableName = function(tableName) {return `${Caf.toString(this.tableNamePrefix)}${Caf.toString(tableName)}`;}; this.getter({tableNamePrefix: function() {let temp; return ((temp = this.class._tableNamePrefix) != null ? temp : config.tableNamePrefix);}, tableName: function() {return this.getPrefixedTableName(this.name);}});});});});
//# sourceMappingURL=Pipeline.js.map
