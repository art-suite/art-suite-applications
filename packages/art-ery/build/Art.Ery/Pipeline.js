"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["pipelineRegistry", "RestTransportClientFilter", "getRestTransportClientConfig", "config", "DatabaseFilters", "merge", "Error", "formattedInspect"], [global, require('../StandardImport'), require('./Config'), require('./Globals'), {DatabaseFilters: require('@art-suite/database-filters')}], (pipelineRegistry, RestTransportClientFilter, getRestTransportClientConfig, config, DatabaseFilters, merge, Error, formattedInspect) => {let Pipeline; return Pipeline = Caf.defClass(class Pipeline extends require('@art-suite/art-pipelines').Pipeline {constructor() {let remoteServer; super(...arguments); if (this.remoteServer) {if ((remoteServer = this.restTransportClientConfig.remoteServer) && this.remoteServer !== remoteServer) {throw new Error(`Only one remoteServer can be configured per pipelineRegistry: ${Caf.toString(formattedInspect([remoteServer, this.remoteServer]))}`);}; this.restTransportClientConfig.remoteServer = this.remoteServer;};};}, function(Pipeline, classSuper, instanceSuper) {this.abstractClass(); this.registry(pipelineRegistry); this.filter(RestTransportClientFilter); this.remoteServer = function(_remoteServer) {this._remoteServer = _remoteServer;}; this.getter({restTransportClientConfig: function() {return getRestTransportClientConfig(this.pipelineRegistry);}, remoteServer: function() {let temp; return ((temp = this.class._remoteServer) != null ? temp : config.remoteServer);}}); this.addDatabaseFilters = function(options) {return this.filter(DatabaseFilters.createDatabaseFilters(options, this));}; this.addDatabaseFiltersV2 = function(options) {return this.filter(DatabaseFilters.createDatabaseFilters(merge({linkFilterVersion: 2}, options), this));}; this.tableNamePrefix = function(_tableNamePrefix) {this._tableNamePrefix = _tableNamePrefix;}; this.prototype.getPrefixedTableName = function(tableName) {return `${Caf.toString(this.tableNamePrefix)}${Caf.toString(tableName)}`;}; this.getter({tableNamePrefix: function() {let temp; return ((temp = this.class._tableNamePrefix) != null ? temp : config.tableNamePrefix);}, tableName: function() {return this.getPrefixedTableName(this.name);}});});});});
//# sourceMappingURL=Pipeline.js.map
