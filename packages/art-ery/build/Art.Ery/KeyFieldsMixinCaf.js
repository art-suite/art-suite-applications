"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["isString", "isPlainArray", "Error", "formattedInspect", "present", "isPlainObject", "log", "Validator"], [global, require('./StandardImport'), require('art-validation')], (isString, isPlainArray, Error, formattedInspect, present, isPlainObject, log, Validator) => {return function(superClass) {let KeyFieldsMixinCaf; return KeyFieldsMixinCaf = Caf.defClass(class KeyFieldsMixinCaf extends superClass {}, function(KeyFieldsMixinCaf, classSuper, instanceSuper) {let keyFields, defaultKeyFieldsString; this.getKeyFields = function() {return this._keyFields;}; this.getKeyFieldsString = function() {return this._keyFieldsString;}; this.primaryKey = keyFields = function(a) {return isString(a) ? this._keyFields = (this._keyFieldsString = a).split("/") : isPlainArray(a) ? this._keyFieldsString = (this._keyFields = a).join("/") : (() => {throw new Error(`invalid value: ${Caf.toString(formattedInspect(a))}`);})();}; this.keyFields = keyFields; this.getter({keyFieldsString: function() {let temp; return ((temp = this._keyFieldsString) != null ? temp : this._keyFieldsString = this.class._keyFieldsString);}, keyFields: function() {let temp; return ((temp = this._keyFields) != null ? temp : this._keyFields = this.class._keyFields);}, keyValidator: function() {let temp; return ((temp = this._keyValidator) != null ? temp : this._keyValidator = this.class._keyValidator);}}); this.prototype.allKeyFieldsPresent = function(data) {let temp; return ((temp = Caf.find(this.keyFields, (keyField) => false, (keyField) => !present(data[keyField]))) != null ? temp : true);}; this.prototype.isRecord = function(data) {return isPlainObject(data) && this.allKeyFieldsPresent(data);}; this.prototype.dataToKeyString = function(a) {this.validateKey(a); return Caf.array(this.keyFields, (field) => a[field]).join("/");}; this.prototype.createPropsToKeyFunction = function(keyField = "id") {let recordType, matches, propsIdField, propsField; return (keyField === "id") ? (recordType = this.pipelineName, (props, stateField) => {let temp, base; propsField = stateField != null ? stateField : recordType; return ((temp = Caf.exists(base = props[propsField]) && base.id) != null ? temp : props[propsField + "Id"]);}) : (matches = keyField.match(/^(.+)Id$/)) ? (([propsIdField, propsField] = matches), (props) => {let temp, base; return ((temp = Caf.exists(base = props[propsField]) && base.id) != null ? temp : props[propsIdField]);}) : (props) => props[keyField];}; this.getter({propsToKey: function() {let fMap, temp; return ((temp = this._propsToKey) != null ? temp : this._propsToKey = (this.keyFields.length === 1) ? this.createPropsToKeyFunction(this.keyFields[0]) : (fMap = Caf.object(this.keyFields, (v) => this.createPropsToKeyFunction(v)), (props) => Caf.object(fMap, (f) => f(props))));}}); this.prototype.toKeyObject = function(a) {let keyObject, splitInput, temp, base; keyObject = this.validateKey(isPlainObject(a) ? Caf.object(this.keyFields, (v) => a[v]) : isString(a) ? (this.keyFields.length > 1) ? (splitInput = a.split("/"), keyObject = Caf.object(this.keyFields, (v, i) => splitInput[i]), (splitInput.length !== this.keyFields.length) ? log.warn({KeyFieldsMixin_toKeyObject: {message: "wrong number of /-delimited fields in key-string", pipelineName: this.pipelineName, input: a, splitInput, keyFields: this.keyFields, usingKeyObject: keyObject}}) : undefined, keyObject) : {[this.keyFields[0]]: a} : {}); return ((temp = Caf.exists(base = this.keyValidator) && base.preprocess(keyObject)) != null ? temp : keyObject);}; this.prototype.dataWithoutKeyFields = function(data) {return data && Caf.object(data, null, (v, k) => !(Caf.in(k, this.keyFields)));}; this.prototype.validateKey = function(key) {Caf.find(this.keyFields, (field) => (() => {throw new Error(`${Caf.toString(this.class.getName())} missing key field(s): ${Caf.toString(formattedInspect({missing: [field, this.keyFields, key]}))}`);})(), (field) => !present(key[field])); return key;}; this._keyFieldsString = defaultKeyFieldsString = "id"; this._keyFields = [defaultKeyFieldsString]; this._initFields = function() {let fields; classSuper._initFields.apply(this, arguments); fields = this.getFields(); return this._keyValidator = new Validator(Caf.object(this.getKeyFields(), (fieldName) => fields[fieldName], (fieldName) => fields[fieldName]));};});};});});
//# sourceMappingURL=KeyFieldsMixinCaf.js.map
