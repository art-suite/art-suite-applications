"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["compactFlatten", "w", "Object", "merge"], [global, require('./StandardImport')], (compactFlatten, w, Object, merge) => {return function(superClass) {let PipelinePublicRequestsMixin; return PipelinePublicRequestsMixin = Caf.defClass(class PipelinePublicRequestsMixin extends superClass {}, function(PipelinePublicRequestsMixin, classSuper, instanceSuper) {this.abstractClass(); this.extendableProperty({publicRequestTypes: {}}); this.publicRequestTypes = function(...values) {let publicRequestTypes; publicRequestTypes = {}; Caf.each2(compactFlatten(values), (v) => Caf.each2(w(v), (k) => publicRequestTypes[k] = true)); return this.extendPublicRequestTypes(publicRequestTypes);}; this.publicHandlers = function(...maps) {return Caf.each2(maps, (map) => {this.handlers(map); return this.publicRequestTypes(Object.keys(map));});}; this.prototype.isPublicRequestType = function(type) {return !!this.getPublicRequestTypes()[type];}; this.prototype.canHandleRequestType = function(request) {return instanceSuper.canHandleRequestType.apply(this, arguments) || this.isPublicRequestType(request.type);}; this.prototype._processRequest = function(request) {return request.requireServerOriginOr(this.isPublicRequestType(request.type), "to issue non-public requests").then((request) => instanceSuper._processRequest.call(this, request));}; this._defineRequestMethods = function() {Caf.each2(this.getPublicRequestTypes(), (__, name) => this._defineRequestMethod(name)); return classSuper._defineRequestMethods.apply(this, arguments);}; this.prototype.getPipelineReport = function(processingLocation) {return merge(instanceSuper.getPipelineReport.apply(this, arguments), {publicRequestTypes: this.publicRequestTypes()});};});};});});
//# sourceMappingURL=PipelinePublicRequestsMixin.js.map
