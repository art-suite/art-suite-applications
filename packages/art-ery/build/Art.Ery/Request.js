"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Validator", "currentSecond", "Error"], [global, require('./StandardImport')], (Validator, currentSecond, Error) => {let ArtEry, _validator, requestConstructorValidator, Request; ArtEry = require("./namespace"); _validator = null; requestConstructorValidator = function() {return _validator != null ? _validator : _validator = new Validator({pipeline: {required: {instanceof: ArtEry.Pipeline}}, type: {required: {fieldType: "string"}}, session: {required: {fieldType: "object"}}, parentRequest: {instanceof: ArtEry.Request}, originatedOnServer: "boolean", props: "object", key: "string"});}; return Request = Caf.defClass(class Request extends require('./RequestResponseBase') {constructor(options = {}) {let key, temp, temp1, temp2, temp3, temp4; super(...arguments); ((temp = this._filterLog) != null ? temp : this._filterLog = [{name: "created", stack: this._creationStack, time: currentSecond()}]); this._type = options.type; this._pipeline = options.pipeline; this._session = options.session; this._originatedOnServer = options.originatedOnServer; ((temp1 = this._originalRequest) != null ? temp1 : this._originalRequest = ((temp2 = options.originalRequest) != null ? temp2 : this)); this._parentRequest = options.parentRequest; this._props = ((temp3 = options.props) != null ? temp3 : {}); this._remoteRequest = options.remoteRequest; this._verbose = options.verbose; this._context = options.context; this._startTime = null; key = ((temp4 = options.key) != null ? temp4 : this._props.key); if (key != null) {options.key = this._props.key = this.pipeline.toKeyString(key);}; if (options.data != null) {this._props.data = options.data;}; requestConstructorValidator().validate(options, {context: "create Art.Ery.Request options", logErrors: true}); if (options.requestOptions) {throw new Error("options.requestOptions is DEPRICATED - use options.props");};};});});});
//# sourceMappingURL=Request.js.map
