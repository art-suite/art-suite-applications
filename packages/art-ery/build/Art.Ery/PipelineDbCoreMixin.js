"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["merge", "normalizeFieldProps", "config", "isPlainObject", "present", "Object", "isFunction", "Error", "formattedInspect"], [global, require('./StandardImport'), {Request: require('./Request')}], (merge, normalizeFieldProps, config, isPlainObject, present, Object, isFunction, Error, formattedInspect) => {return function(superClass) {let PipelineDbCoreMixin; return PipelineDbCoreMixin = Caf.defClass(class PipelineDbCoreMixin extends superClass {}, function(PipelineDbCoreMixin, classSuper, instanceSuper) {this.abstractClass(); this.postCreateConcreteClass = function({hotReloaded}) {this._defineQueryHandlers(); this._initFields(); return classSuper.postCreateConcreteClass.apply(this, arguments);}; this.extendableProperty({queries: {}, fields: {}}); this.query = function(map) {return this.extendQueries(Caf.object(map, (options, queryName) => this._normalizeQuery(queryName, options)));}; this.addDatabaseFilters = function(options) {return this.filter(require('./DatabaseFilters').createDatabaseFilters(options, this));}; this.addDatabaseFiltersV2 = function(options) {return this.filter(require('./DatabaseFilters').createDatabaseFilters(merge({linkFilterVersion: 2}, options), this));}; this.getter({normalizedFields: function() {let nf; nf = {}; Caf.each2(this.fields, (v, k) => nf[k] = normalizeFieldProps(v)); return nf;}, tableNamePrefix: function() {return this.class._tableNamePrefix || config.tableNamePrefix;}, tableName: function() {return this.getPrefixedTableName(this.name);}, propsToKey: function() {let temp; return ((temp = this._propsToKey) != null ? temp : this._propsToKey = (() => {let recordType; recordType = this.pipelineName; return (props, stateField) => {let propsField, temp1, base; propsField = stateField != null ? stateField : recordType; return ((temp1 = Caf.exists(base = props[propsField]) && base.id) != null ? temp1 : props[propsField + "Id"]);};})());}}); this.prototype.getPrefixedTableName = function(tableName) {return `${Caf.toString(this.tableNamePrefix)}${Caf.toString(tableName)}`;}; this.prototype.isRecord = function(data) {return isPlainObject(data) && present(Caf.exists(data) && data.id);}; this.prototype.getPipelineReport = function() {return merge(instanceSuper.getPipelineReport.apply(this, arguments), {fields: Caf.object(this.fields, (fieldProps) => {let out; return Caf.each2(Object.keys(fieldProps).sort(), (k) => {let v; v = fieldProps[k]; return !isFunction(v) ? out[k] = v : undefined;}, null, out = {});})});}; this.prototype.getFieldsRequestWillModify = function(request) {let temp; return ((temp = request.data) != null ? temp : {});}; this._defineQueryHandlers = function() {let handlers; handlers = this.getHandlers(); return Caf.array(this.getQueries(), (pipelineQuery, k) => handlers = this.extendHandlers(k, pipelineQuery.options.query), (pipelineQuery, k) => !handlers[k]);}; this._normalizeQuery = function(queryName, options) {if (isFunction(options)) {options = {query: options};}; if (!(isFunction(options.query) && options.query.length > 0)) {throw new Error(`query function must have at least one argument:\n\n${Caf.toString(formattedInspect({queryName, options}))}"`);}; return {queryName, options};}; this._initFields = function() {return Caf.each2(this.getFilters(), (filter) => this.extendFields(filter.fields));};});};});});
//# sourceMappingURL=PipelineDbCoreMixin.js.map
