"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["getLinkedFieldFilterForPipeline", "Array", "Object", "mergeWithoutNulls", "vivifyObjectPathAndSet"], [global, require('../StandardImport'), require('./LinkFieldsFilter2')], (getLinkedFieldFilterForPipeline, Array, Object, mergeWithoutNulls, vivifyObjectPathAndSet) => {let LinkFieldsFilter2LegacyApiDecode; return LinkFieldsFilter2LegacyApiDecode = Caf.defClass(class LinkFieldsFilter2LegacyApiDecode extends require('../Filter') {}, function(LinkFieldsFilter2LegacyApiDecode, classSuper, instanceSuper) {let legacyDecode, legacyDecodeB; this.location("client"); this.after({all: function(response) {let dataUpdates; return response.withMergedProps({data: legacyDecode(response.pipelineName, dataUpdates = {}, response.data), dataUpdates});}}); legacyDecode = function(pipelineName, dataUpdates, data) {let linkFields; return (linkFields = getLinkedFieldFilterForPipeline(pipelineName).linkFields) ? (() => {switch (false) {case !(Caf.is(data, Array)): return Caf.array(data, (record) => legacyDecodeB(linkFields, dataUpdates, record)); case !(Caf.is(data, Object)): return legacyDecodeB(linkFields, dataUpdates, data); default: return data;};})() : data;}; legacyDecodeB = function(linkFields, dataUpdates, record) {return mergeWithoutNulls(record, Caf.object(linkFields, ({idFieldName, pipelineName}, fieldName) => {let inlineRecord; inlineRecord = record[fieldName]; vivifyObjectPathAndSet(dataUpdates, pipelineName, inlineRecord.id, inlineRecord); legacyDecode(pipelineName, dataUpdates, inlineRecord); return null;}, ({idFieldName, pipelineName}, fieldName) => record[fieldName]));};});});});
//# sourceMappingURL=LinkFieldsFilter2LegacyApiDecode.js.map
