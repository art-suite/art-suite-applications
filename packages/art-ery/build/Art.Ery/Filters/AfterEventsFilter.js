"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Filter", "pushIfNotPresent", "isFunction", "Error", "isString", "Promise"], [global, require('./StandardImport')], (Filter, pushIfNotPresent, isFunction, Error, isString, Promise) => {let AfterEventsFilter; return AfterEventsFilter = Caf.defClass(class AfterEventsFilter extends Filter {}, function(AfterEventsFilter, classSuper, instanceSuper) {this.handlers = {}; this._registeredPipelineHandlers = {}; this._reset = () => AfterEventsFilter.handlers = {_registeredPipelineHandlers: this._registeredPipelineHandlers = {}}; this.on = function(pipelineName, requestType, actionOrPipeline) {let temp, base, temp1, base1; return pushIfNotPresent(((temp = (base = ((temp1 = (base1 = this.handlers)[pipelineName]) != null ? temp1 : base1[pipelineName] = {}))[requestType]) != null ? temp : base[requestType] = []), actionOrPipeline);}; this.registerPipelineListener = function(listeningPipeline, listeningToPipelineName, requestType) {if (!isFunction(listeningPipeline.handleRequestAfterEvent)) {throw new Error("listeningPipeline must implement handleRequestAfterEvent");}; if (!isString(listeningToPipelineName)) {throw new Error("listeningToPipelineName must be a string");}; return this.on(listeningToPipelineName, requestType, listeningPipeline);}; this.sendEvents = function(response) {return Promise.resolve(response).then((response) => {let pipelineName, requestType, base; pipelineName = response.pipelineName; requestType = response.requestType; return Promise.all(Caf.array(Caf.exists(base = AfterEventsFilter.handlers[pipelineName]) && base[requestType] || [], (actionOrPipeline) => isFunction(actionOrPipeline.handleRequestAfterEvent) ? actionOrPipeline.handleRequestAfterEvent(response) : actionOrPipeline(response)));}).then(() => response);}; this.after({all: function(response) {return AfterEventsFilter.sendEvents(response);}});});});});
//# sourceMappingURL=AfterEventsFilter.js.map
