// Generated by CoffeeScript 1.12.7
(function() {
  var AfterEventsFilter, Filter, Promise, defineModule, formattedInspect, isFunction, isString, log, pushIfNotPresent, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, log = ref.log, Promise = ref.Promise, isFunction = ref.isFunction, isString = ref.isString, pushIfNotPresent = ref.pushIfNotPresent, formattedInspect = ref.formattedInspect;

  Filter = require('../Filter');

  defineModule(module, AfterEventsFilter = (function(superClass) {
    extend(AfterEventsFilter, superClass);

    function AfterEventsFilter() {
      return AfterEventsFilter.__super__.constructor.apply(this, arguments);
    }

    AfterEventsFilter.handlers = {};

    AfterEventsFilter._registeredPipelineHandlers = {};

    AfterEventsFilter._reset = function() {
      AfterEventsFilter.handlers = {};
      return AfterEventsFilter._registeredPipelineHandlers = {};
    };

    AfterEventsFilter.on = function(pipelineName, requestType, actionOrPipeline) {
      var base, base1;
      return pushIfNotPresent(((base = ((base1 = this.handlers)[pipelineName] || (base1[pipelineName] = {})))[requestType] || (base[requestType] = [])), actionOrPipeline);
    };

    AfterEventsFilter.registerPipelineListener = function(listeningPipeline, listeningToPipelineName, requestType) {
      if (!isFunction(listeningPipeline.handleRequestAfterEvent)) {
        throw new Error("listeningPipeline must implement handleRequestAfterEvent");
      }
      if (!isString(listeningToPipelineName)) {
        throw new Error("listeningToPipelineName must be a string");
      }
      return this.on(listeningToPipelineName, requestType, listeningPipeline);
    };

    AfterEventsFilter.sendEvents = function(response) {
      return Promise.resolve(response).then(function(response) {
        var actionOrPipeline, actionPromises, pipelineName, requestType;
        pipelineName = response.pipelineName, requestType = response.requestType;
        actionPromises = (function() {
          var i, len, ref1, ref2, results;
          ref2 = ((ref1 = AfterEventsFilter.handlers[pipelineName]) != null ? ref1[requestType] : void 0) || [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            actionOrPipeline = ref2[i];
            if (isFunction(actionOrPipeline.handleRequestAfterEvent)) {
              results.push(actionOrPipeline.handleRequestAfterEvent(response));
            } else {
              results.push(actionOrPipeline(response));
            }
          }
          return results;
        })();
        return Promise.all(actionPromises);
      }).then(function() {
        return response;
      });
    };

    AfterEventsFilter.after({
      all: function(response) {
        return AfterEventsFilter.sendEvents(response);
      }
    });

    return AfterEventsFilter;

  })(Filter));

}).call(this);

//# sourceMappingURL=AfterEventsFilter.js.map
