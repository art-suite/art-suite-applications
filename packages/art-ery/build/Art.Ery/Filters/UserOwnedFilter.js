"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["defineModule", "merge", "formattedInspect", "Object", "String", "w", "Array", "Error", "Promise"], [global, require('../StandardImport')], (defineModule, merge, formattedInspect, Object, String, w, Array, Error, Promise) => {let UserOwnedFilter; return defineModule(module, UserOwnedFilter = Caf.defClass(class UserOwnedFilter extends require('../Filter') {constructor(options) {let override, temp, temp1; super(...arguments); this.userUpdatableFields = ((temp = Caf.exists(options) && options.userUpdatableFields) != null ? temp : true); this.userCreatableFields = ((temp1 = Caf.exists(options) && options.userCreatableFields) != null ? temp1 : true); this.publicFields = Caf.exists(options) && options.publicFields; if (override = Caf.exists(options) && options.requireUserCanUpdate) {this.requireUserCanUpdate = override;}; if (override = Caf.exists(options) && options.requireUserCanDelete) {this.requireUserCanDelete = override;};};}, function(UserOwnedFilter, classSuper, instanceSuper) {let defaultPublicFields, tailIdRegExp, expandPossiblyLinkedFields, ownershipInfo, parseFields, prasedDefaultPublicFields, _vivifyUserId; this.group("outer"); this.getter("userUpdatableFields", "userCreatableFields", "publicFields"); defaultPublicFields = ["id", "userId", "createdAt", "updatedAt"]; this.setter({publicFields: function(fieldString) {return this._publicFields = expandPossiblyLinkedFields(parseFields(fieldString, merge(prasedDefaultPublicFields)));}, userUpdatableFields: function(fieldString) {return this._userUpdatableFields = expandPossiblyLinkedFields(parseFields(fieldString));}, userCreatableFields: function(fieldString) {return this._userCreatableFields = expandPossiblyLinkedFields(parseFields(fieldString, {userId: true}));}}); this.prototype.requireUserCanUpdate = function(request, existingRecord, updatingFields) {return this._requireIsOwner(request, existingRecord);}; this.prototype.requireUserCanDelete = function(request, existingRecord) {return this._requireIsOwner(request, existingRecord);}; this.before({all: function(request) {let updatingFields; if (request.originatedOnServer) {return _vivifyUserId(request);}; return (() => {switch (request.type) {case "create": return request.requireServerOriginOr(request.session.userId != null, "create without authenticated user").then(() => this._requireAllDataFieldsAllowed(request, this.userCreatableFields)).then(() => request.require(!(request.key != null), "request.key not expected for create")).then(() => _vivifyUserId(request)).then((request) => this._requireIsOwner(request, request.data)); case "update": return this._requireAllDataFieldsAllowed(request, this.userUpdatableFields, updatingFields = request.pipeline.getFieldsRequestWillModify(request)).then(() => request.requireServerOriginOr(request.session.userId != null)).then(() => request.cachedGet(request.pipelineName, request.key)).then((existingRecord) => this._requireUserIdDidntChange(request, existingRecord).then(() => this.requireUserCanUpdate(request, existingRecord, updatingFields))); case "delete": return request.requireServerOriginOr(request.session.userId != null).then(() => request.cachedGet(request.pipelineName, request.key)).then((existingRecord) => this.requireUserCanDelete(request, existingRecord)); default: return request;};})();}}); this.after({all: function(response) {let userId, allowedFields; return (() => {switch (false) {case !(response.originatedOnServer || this.publicFields === true): return response; case !(response.data != null): userId = response.session.userId; allowedFields = this.publicFields; return response.withTransformedRecords({when: (record) => response.pipeline.isRecord(record) && record.userId !== userId, with: (record) => (Caf.find(record, null, (v, k) => v != null && allowedFields[k]) != null) ? Caf.object(record, null, (v, k) => allowedFields[k]) : undefined}); default: return response;};})();}}); tailIdRegExp = /Id$/; expandPossiblyLinkedFields = function(fields) {if (fields === true) {return true;}; Caf.each2(fields, (value, name) => {let root, temp; ([root] = name.split(tailIdRegExp)); return ((temp = fields[root]) != null ? temp : fields[root] = value);}, (value, name) => tailIdRegExp.test(name)); return fields;}; ownershipInfo = function(request, data) {let userId; ({userId} = request.session); data || (data = request.data); return formattedInspect({key: request.key, you: userId, recordOwner: Caf.exists(data) && data.userId});}; parseFields = function(fieldsInput, out = {}) {return (() => {switch (false) {case !(fieldsInput === true): return true; case !(!(fieldsInput != null)): return out; case !(Caf.is(fieldsInput, Object)): return Caf.object(fieldsInput, null, null, out); case !(Caf.is(fieldsInput, String)): return Caf.object(w(fieldsInput), () => true, null, out); case !(Caf.is(fieldsInput, Array)): return Caf.each2(fieldsInput, (element) => parseFields(element, out), null, out); default: return (() => {throw new Error(`invalid field input: ${Caf.toString(formattedInspect(fieldsInput))}`);})();};})();}; prasedDefaultPublicFields = parseFields(defaultPublicFields); _vivifyUserId = function(request) {let base; return /^create/i.test(request.type) ? request.withMergedData({userId: Caf.exists(base = request.data) && base.userId || request.session.userId}) : request;}; this.prototype._requireAllDataFieldsAllowed = function(request, allowedFields, dataFields = request.data) {let temp; return ((temp = (() => {switch (false) {case !(allowedFields === true): return null; case !(Caf.is(allowedFields, Object)): return Caf.find(dataFields, (v, k) => request.requireServerOrigin(`to ${Caf.toString(request.type)} field: ${Caf.toString(k)}. Allowed fields: ${Caf.toString(Object.keys(allowedFields).join(", "))}`), (v, k) => !allowedFields[k]); default: return request.requireServerOrigin(`to ${Caf.toString(request.type)} when no allowed fields have been configured: ${Caf.toString(formattedInspect({allowedFields}))}`);};})()) != null ? temp : Promise.resolve(request));}; this.prototype._requireUserIdDidntChange = function(request, existingRecord) {let userId, temp; return request.requireServerOriginIf((Caf.exists(temp = request.data) ? userId = temp.userId : undefined) && userId !== existingRecord.userId, `to change a record's owner ${Caf.toString(ownershipInfo(request))}`);}; this.prototype._requireIsOwner = function(request, recordWithUserId, message) {return request.requireServerOriginOr((Caf.exists(recordWithUserId) && recordWithUserId.userId) === request.session.userId, `to ${Caf.toString(request.type)}. You do not own the record: ${Caf.toString(ownershipInfo(request, recordWithUserId))}`);};}));});});
//# sourceMappingURL=UserOwnedFilter.js.map
