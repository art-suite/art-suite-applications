"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Filter", "Promise", "merge", "toSeconds"], [global, require('../StandardImport')], (Filter, Promise, merge, toSeconds) => {let TimestampFilter; return TimestampFilter = Caf.defClass(class TimestampFilter extends Filter {}, function(TimestampFilter, classSuper, instanceSuper) {let _requireValidTimestamp, requireValidTimestamps; this.group("outer"); _requireValidTimestamp = function(request, fieldName, data, now) {let value; return (value = data[fieldName]) ? request.require(value <= now + 1, `${Caf.toString(fieldName)} cannot be set more than 1 second in the future (now: ${Caf.toString(now)})`) : undefined;}; requireValidTimestamps = function(request, data, now) {return Promise.all([_requireValidTimestamp(request, "createdAt", data, now), _requireValidTimestamp(request, "updatedAt", data, now)]);}; this.before({create: function(request) {let data, now; data = merge({createdAt: now = toSeconds() + .5 | 0, updatedAt: now}, request.originatedOnServer ? request.data : undefined); return requireValidTimestamps(request, data, now).then(() => request.withMergedData(data));}, update: function(request) {let data, now; data = merge({updatedAt: now = toSeconds() + .5 | 0}, request.originatedOnServer ? request.data : undefined); return requireValidTimestamps(request, data, now).then(() => request.withMergedData(data));}}); this.fields({createdAt: "secondsTimestamp", updatedAt: "secondsTimestamp"});});});});
//# sourceMappingURL=TimestampFilter.js.map
