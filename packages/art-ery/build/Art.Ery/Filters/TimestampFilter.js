// Generated by CoffeeScript 1.12.7
(function() {
  var Filter, TimestampFilter, Validator, defineModule, log, merge, ref, toSeconds,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), defineModule = ref.defineModule, log = ref.log, Validator = ref.Validator, merge = ref.merge, toSeconds = ref.toSeconds;

  Filter = require('../Filter');

  defineModule(module, TimestampFilter = (function(superClass) {
    var _requireValidTimestamp, requireValidTimestamps;

    extend(TimestampFilter, superClass);

    function TimestampFilter() {
      return TimestampFilter.__super__.constructor.apply(this, arguments);
    }

    TimestampFilter.group("outer");

    _requireValidTimestamp = function(request, fieldName, data, now) {
      var value;
      if (value = data[fieldName]) {
        return request.require(value <= now + 1, fieldName + " cannot be set more than 1 second in the future (now: " + now + ")");
      }
    };

    requireValidTimestamps = function(request, data, now) {
      return Promise.all([_requireValidTimestamp(request, "createdAt", data, now), _requireValidTimestamp(request, "updatedAt", data, now)]);
    };

    TimestampFilter.before({
      create: function(request) {
        var data, now;
        data = merge({
          createdAt: now = toSeconds() + .5 | 0,
          updatedAt: now
        }, request.originatedOnServer ? request.data : void 0);
        return requireValidTimestamps(request, data, now).then(function() {
          return request.withMergedData(data);
        });
      },
      update: function(request) {
        var data, now;
        data = merge({
          updatedAt: now = toSeconds() + .5 | 0
        }, request.originatedOnServer ? request.data : void 0);
        return requireValidTimestamps(request, data, now).then(function() {
          return request.withMergedData(data);
        });
      }
    });

    TimestampFilter.fields({
      createdAt: "secondsTimestamp",
      updatedAt: "secondsTimestamp"
    });

    return TimestampFilter;

  })(Filter));

}).call(this);

//# sourceMappingURL=TimestampFilter.js.map
