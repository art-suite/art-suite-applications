"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Promise", "ErrorWithInfo", "pluralize", "merge", "Validator"], [global, require('./StandardImport')], (Promise, ErrorWithInfo, pluralize, merge, Validator) => {let ValidationFilter; return ValidationFilter = Caf.defClass(class ValidationFilter extends require('../Filter') {constructor(options) {super(...arguments); this._exclusive = Caf.exists(options) && options.exclusive; this._validator = new Validator(this.fields);};}, function(ValidationFilter, classSuper, instanceSuper) {this.location("both"); this.before({create: function(request) {return this._validate("validateCreate", request);}, update: function(request) {return this._validate("validateUpdate", request);}}); this.prototype._validate = function(method, request) {return Promise.then(() => {let context, validatedData, data, rejection, fields, unexpectedFields; context = request.requestString; validatedData = this._validator[method](request.data, {context}); data = (request.location === "client") ? this._validator.preprocess(request.data) : validatedData; rejection = this._exclusive ? (({fields} = request.pipeline), unexpectedFields = null, Caf.each2(data, (v, k) => (unexpectedFields || (unexpectedFields = [])).push(k), (v, k) => !fields[k]), unexpectedFields ? (() => {throw new ErrorWithInfo(`${Caf.toString(context)} failed. ${Caf.toString(pluralize(unexpectedFields.length, "Unexpected field"))}: ${Caf.toString(unexpectedFields.join(", "))}`, {unexpected: unexpectedFields});})() : undefined) : undefined; return rejection || request.withData(data);}).catch((exception) => {let message, info; message = exception.message; info = exception.info; return request.clientFailure({data: merge(info, {message: `ValidationFilter: ${Caf.toString(message)}`}), errorProps: {exception}});});};});});});
//# sourceMappingURL=ValidationFilter.js.map
