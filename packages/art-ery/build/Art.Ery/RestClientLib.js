"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["config", "escapeRegExp", "present", "objectHasKeys", "restJsonRequest", "failure", "merge"], [global, require('../StandardImport'), require('art-rest-client'), require('./Config')], (config, escapeRegExp, present, objectHasKeys, restJsonRequest, failure, merge) => {let restMap, getPipelineRestPath, getPipelineRestPathRegex, getRestClientParamsForArtEryRequest, getRemoteRequestProps; restMap = {"get": "get", "delete": "delete", create: "post", update: "put"}; getPipelineRestPath = function(pipeline) {return `/${Caf.toString(config.apiRoot)}/${Caf.toString(pipeline.name)}`;}; getPipelineRestPathRegex = function(pipeline) {return RegExp(`^${Caf.toString(escapeRegExp(getPipelineRestPath(pipeline)))}(?:-([a-z0-9_]+))?(?:\\/([^?]+))?(?=\\?|\$)`, 'i');}; getRestClientParamsForArtEryRequest = function({session, server, restPath, type, key, data}) {let urlKeyClause, hasSessionData, url, method; urlKeyClause = present(key) ? `/${Caf.toString(key)}` : ""; server != null ? server : server = ""; hasSessionData = objectHasKeys(session); url = ((method = restMap[type]) && (method !== "get" || !hasSessionData)) ? `${Caf.toString(server)}${Caf.toString(restPath)}${Caf.toString(urlKeyClause)}` : (method = "post", `${Caf.toString(server)}${Caf.toString(restPath)}-${Caf.toString(type)}${Caf.toString(urlKeyClause)}`); return {method, url, data};}; getRemoteRequestProps = function(request) {let session, data, props, pipeline, type, key, remoteRequestData; session = request.session; data = request.data; props = request.props; pipeline = request.pipeline; type = request.type; key = request.key; props = Caf.object(props, null, (v, k) => v !== undefined && k !== "key" && k !== "data"); data = Caf.object(data, null, (v) => v !== undefined); remoteRequestData = null; if (session.signature) {(remoteRequestData != null ? remoteRequestData : remoteRequestData = {}).session = session.signature;}; if (objectHasKeys(props)) {(remoteRequestData != null ? remoteRequestData : remoteRequestData = {}).props = props;}; if (objectHasKeys(data)) {(remoteRequestData != null ? remoteRequestData : remoteRequestData = {}).data = data;}; return getRestClientParamsForArtEryRequest({restPath: pipeline.restPath, server: (() => {switch (pipeline.remoteServer) {case true: case ".": case "/": return ""; default: return pipeline.remoteServer;};})(), type, key, session, data: remoteRequestData});}; return {getPipelineRestPath, getPipelineRestPathRegex, getRestClientParamsForArtEryRequest, getRemoteRequestProps, sendRemoteRequest: function(request) {let remoteRequest; return restJsonRequest(remoteRequest = getRemoteRequestProps(request)).catch((error) => {let status, response, message, temp; ({status = failure, response, message} = ((temp = error.info) != null ? temp : error)); return merge(response, {status, message});}).then((remoteResponse) => {request.addFilterLog(`${Caf.toString(remoteRequest.method.toLocaleUpperCase())} ${Caf.toString(remoteRequest.url)}`, "remoteRequest"); return request.toResponse(remoteResponse.status, merge(remoteResponse, {remoteRequest, remoteResponse}));});}};});});
//# sourceMappingURL=RestClientLib.js.map
