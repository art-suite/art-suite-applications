"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Validator", "Request", "merge", "Error", "neq"], [global, require('./StandardImport'), require('./Config'), {Request: require('./Request')}], (Validator, Request, merge, Error, neq) => {let responseValidator, Response; responseValidator = new Validator({request: ["required", {instanceof: Request}], status: ["required", "communicationStatus"], session: "object", props: "object"}); return Response = Caf.defClass(class Response extends require('./RequestResponseBase') {constructor(options) {let temp, temp1; responseValidator.validate(options, {context: "Art.Ery.Response options", logErrors: true}); super(merge(options, {creationStack: options.request.creationStack})); this._request = options.request; this._status = options.status; this._session = options.session; this._remoteRequest = options.remoteRequest; this._remoteResponse = options.remoteResponse; this._props = ((temp = options.props) != null ? temp : {}); if (options.requestOptions) {throw new Error("options.requestOptions is DEPRICATED - use options.props");}; if (options.data != null) {this._props.data = options.data;}; ((temp1 = this._session) != null ? temp1 : this._session = neq(this.request.session, this.request.originalRequest.session) ? this.request.session : undefined); this._endTime = null; if (this.type === "create" || this.type === "get") {this.setGetCache();};};});});});
//# sourceMappingURL=Response.js.map
