import &StandardImport

test "createRequest" ->
  {myPipeline} = class MyPipeline extends Pipeline
  assert.instanceof Request, myPipeline.createRequest :foo

test "formattedInspect" ->
  {myPipeline} = class MyPipeline extends Pipeline

  formattedInspect myPipeline.createRequest :foo


test "createRequest with key" ->
  {myPipeline} = class MyPipeline extends Pipeline

  request = myPipeline.createRequest :foo, key: :bar
  assert.eq request.type, :foo
  assert.eq request.key, :bar
  assert.eq request.props, key: :bar

test "createRequest with data" ->
  {myPipeline} = class MyPipeline extends Pipeline

  request = myPipeline.createRequest :foo, data: :bar
  assert.eq request.type, :foo
  assert.eq request.props, data: :bar
  assert.eq request.data, :bar

test "create success response" ->
  {myPipeline} = class MyPipeline extends Pipeline

  request = myPipeline.createRequest :foo
  request.success :bar
  .then (response) ->
    assert.instanceof Request, response
    assert.true response.isResponse
    assert.true response.isSuccessful

test "withKey" ->
  {myPipeline} = class MyPipeline extends Pipeline

  assert.eq
    myPipeline.createRequest :foo, key: :baz
    .withKey :bar
    .key
    :bar
