import &StandardImport, {} &Request

class Filter extends BaseObject

  @extendableProperty
    before: {}
    after: {}

  @getter
    name: -> @_name ? @constructor.name
    inspectedObjects: -> @name

  constructor: (options) ->
    @before = options.before
    @after = options.after
    @_name = options.name

  handleRequest: (request, remainingHandlers) ->
    @applyFilter request, true
    .then (beforeFilteredRequest) ->
      if beforeFilteredRequest.isResponse
        beforeFilteredRequest

      else if remainingHandlers?
        [nextHandler, remainingHandlers] = remainingHandlers
        nextHandler.handleRequest
          beforeFilteredRequest
          remainingHandlers

        .then (handledRequest) -> @applyFilter handledRequest

      else request.failure "" Internal error: no remaining handlers.

  applyFilter: (request, before) ->
    request extract type
    filterSet = if before then @before else @after

    promisedRequest = Promise.resolve request

    if filterFunction = filterSet[type] ? usedAll = filterSet.all
      promisedRequest
      .then filterFunction
      .then (result) ->
        switch
        when result == undefined then request
        when result == null then request.missing()
        when isJsonType result then request.success data: result
        when result is Request then result
        else request.failure "invalid filter result: #{formattedInspect result}"

      .then (result) ->
        if result != request
          result.filter = [if before then :before else :after]: [if usedAll then :all else type]: @

        result

    else promisedRequest
