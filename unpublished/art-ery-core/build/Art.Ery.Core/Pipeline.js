"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "isString", "isPlainObject", "Error", "formattedInspect", "merge", "isClass", "Filter", "inspect", "isPlainArray", "compactFlatten", "Promise"], [global, require('./StandardImport'), {Filter: require('./Filter')}], (BaseClass, isString, isPlainObject, Error, formattedInspect, merge, isClass, Filter, inspect, isPlainArray, compactFlatten, Promise) => {let normalizeRequestArgs, instantiateFilter, preprocessFilters, Pipeline; normalizeRequestArgs = function(a, b) {let key, props, keyProp; if (isString(a)) {key = a; a = b; b = null;}; if (isPlainObject(a)) {props = a; a = b; b = null;}; if (a != null) {throw new Error(`Invalid argument: ${Caf.toString(formattedInspect(a))}`);}; return {props: (key != null) ? (keyProp = {key}, (props != null) ? merge(keyProp, props) : keyProp) : props != null ? props : {}};}; instantiateFilter = function(filter) {return isClass(filter) ? new filter : (Caf.is(filter, Filter)) ? filter : isPlainObject(filter) ? new Filter(filter) : (() => {throw `invalid filter: ${Caf.toString(inspect(filter))} ${Caf.toString(filter instanceof Filter)}`;})();}; preprocessFilters = function(filters) {return isPlainArray(filters) ? Caf.array(compactFlatten(filters), (f) => instantiateFilter(f), (f) => f) : instantiateFilter(filters);}; return Pipeline = Caf.defClass(class Pipeline extends BaseClass {}, function(Pipeline, classSuper, instanceSuper) {this.abstractClass(); this.extendableProperty({handlers: {}, filters: []}); this.register = function() {return this.singletonClass();}; this.postCreateConcreteClass = function({hotReloaded}) {this._defineClientHandlerMethods(); if (!hotReloaded) {this.register();}; return classSuper.postCreateConcreteClass.apply(this, arguments);}; this.getter({filterChain: function() {let temp; return ((temp = this._filterChain) != null ? temp : this._filterChain = compactFlatten([this, this.filters]).reverse());}}); this.filters = function(filters) {return this.extendFilters(preprocessFilters(filters));}; this.filter = function(filters) {return this.filters(filters);}; this.handler = function(handlers) {return this.handlers(handlers);}; this.prototype.handleRequest = function(request) {return Promise.then(() => this.handlers[request.type](request));}; this.prototype._processClientRequest = function(type, a, b) {let props; ({props} = normalizeRequestArgs(a, b)); return this._processRequest({type, props, data: props.data, key: props.key});}; this.prototype._processRequest = function(request) {return this.filterChain[0].handleRequest(request, this.filterChain, 0);}; this._defineClientRequestMethod = function(requestType) {let temp, base; return ((temp = (base = this.prototype)[requestType]) != null ? temp : base[requestType] = function(a, b) {return this._processClientRequest(requestType, a, b);});}; this._defineClientHandlerMethods = function() {return Caf.each2(this.getHandlers(), (handler, name) => this._defineClientRequestMethod(name));};});});});
//# sourceMappingURL=Pipeline.js.map
