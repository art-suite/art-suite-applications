"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseClass", "Promise"], [global, require('./StandardImport')], (BaseClass, Promise) => {let Filter; return Filter = Caf.defClass(class Filter extends BaseClass {constructor(options) {super(...arguments); this.before = options.before; this.after = options.after;};}, function(Filter, classSuper, instanceSuper) {this.extendableProperty({before: {}, after: {}}); this.prototype.applyHandler = function(request, handler) {return Promise.resolve(handler ? handler(request) : request);}; this.prototype.filterBefore = function(request) {return this.applyHandler(request, this.getBeforeFilter(request));}; this.prototype.filterAfter = function(request) {return this.applyHandler(request, this.getAfterFilter(request));}; this.prototype.getBeforeFilter = function({type, location}) {let temp; return ((temp = this.before[type]) != null ? temp : this.before.all);}; this.prototype.getAfterFilter = function({type, location}) {let temp; return ((temp = this.after[type]) != null ? temp : this.after.all);}; this.prototype.handleRequest = function(request, filterChain, filterChainIndex) {return this.filterBefore(request).then((beforeFilteredRequest) => {let nextIndex; nextIndex = filterChainIndex + 1; return filterChain[nextIndex].handleRequest(beforeFilteredRequest, filterChain, nextIndex);}).then((handledRequest) => this.filterAfter(handledRequest));};});});});
//# sourceMappingURL=Filter.js.map
