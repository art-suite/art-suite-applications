"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "Promise", "isJsonType", "Request", "Error", "formattedInspect"], [global, require('./StandardImport'), {Request: require('./Request')}], (BaseObject, Promise, isJsonType, Request, Error, formattedInspect) => {let Filter; return Filter = Caf.defClass(class Filter extends BaseObject {constructor(options) {super(...arguments); this.before = options.before; this.after = options.after; this._name = options.name;};}, function(Filter, classSuper, instanceSuper) {this.extendableProperty({before: {}, after: {}}); this.getter({name: function() {let temp; return ((temp = this._name) != null ? temp : this.constructor.name);}, inspectedObjects: function() {return this.name;}}); this.prototype.handleRequest = function(request, remainingHandlers) {return this.applyFilter(request, true).then((beforeFilteredRequest) => {let nextHandler; return beforeFilteredRequest.isResponse ? beforeFilteredRequest : (remainingHandlers != null) ? (([nextHandler, remainingHandlers] = remainingHandlers), nextHandler.handleRequest(beforeFilteredRequest, remainingHandlers).then((handledRequest) => this.applyFilter(handledRequest))) : request.error("Internal error: no remaining handlers.");});}; this.prototype.applyFilter = function(request, before) {let type, filterSet, promisedRequest, filterFunction, usedAll, temp; type = request.type; filterSet = before ? this.before : this.after; promisedRequest = Promise.resolve(request); return (filterFunction = ((temp = filterSet[type]) != null ? temp : usedAll = filterSet.all)) ? promisedRequest.then(filterFunction).then((result) => {if (isJsonType(result)) {request = request.success({data: result});}; return (() => {switch (false) {case !(result === undefined): return request; case !(Caf.is(result, Request)): if (result !== request) {result.filter = {[before ? "before" : "after"]: {[usedAll ? "all" : type]: this}};}; return result; default: return (() => {throw new Error(`invalid filter result: ${Caf.toString(formattedInspect(result))}`);})();};})();}) : promisedRequest;};});});});
//# sourceMappingURL=Filter.js.map
