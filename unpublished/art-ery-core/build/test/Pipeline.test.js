"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["ArtConfig", "test", "describe", "Pipeline", "assert", "Date", "failure", "Request"], [global, require('./StandardImport')], (ArtConfig, test, describe, Pipeline, assert, Date, failure, Request) => {ArtConfig.configure(); test("pipeline automatically has a singlton", function() {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}); return assert.present(MyPipeline.myPipeline);}); describe("handlers", function() {test("basic handler", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return "Hello world.";}});})).myPipeline.hello().then((result) => assert.eq(result, "Hello world."));}); test("handler and that responds to a key", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}});})).myPipeline.hello("Shane").then((result) => assert.eq(result, "Hello, Shane."));}); test("handler error on invalid argument", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return "Hi";}});}); return assert.throws(() => MyPipeline.myPipeline.hello(new Date));}); test("handler with data payload", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({data}) {return `Hello, ${Caf.toString(data.name)}.`;}});})).myPipeline.hello({data: {name: "Alice"}}).then((result) => assert.eq(result, "Hello, Alice."));}); test("handler with custom props", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({props}) {return `Hello, ${Caf.toString(props.customProp)}.`;}});})).myPipeline.hello({props: {customProp: "John"}}).then((result) => assert.eq(result, "Hello, John."));}); return test("handler with key and data", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key, data}) {return {key, data};}});})).myPipeline.hello("John", {data: "Frank"}).then((result) => assert.eq(result, {key: "John", data: "Frank"}));});}); describe("handler return types", function() {test("string", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return "Hello world.";}});})).myPipeline.hello().then((result) => assert.eq(result, "Hello world."));}); test("null", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return null;}});}); return assert.missing(MyPipeline.myPipeline.hello());}); test("undefined", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return undefined;}});}); return assert.rejects(MyPipeline.myPipeline.hello()).then((error) => assert.eq({status: error.status}, {status: failure}, {error}));}); return test("response", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function(request) {return request.success({data: "Yippee"});}});}); return MyPipeline.myPipeline.hello().then((result) => assert.eq(result, "Yippee"));});}); return describe("requests", function() {return test("returnResponse returns a repsonse object", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function() {return "Hello world.";}});})).myPipeline.hello({returnResponse: true}).then((result) => {assert.instanceof(Request, result); return assert.eq(result.data, "Hello world.");});});});});});
//# sourceMappingURL=Pipeline.test.js.map
