"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["ArtConfig", "describe", "test", "Pipeline", "assert", "failure"], [global, require('./StandardImport')], (ArtConfig, describe, test, Pipeline, assert, failure) => {ArtConfig.configure(); describe("filters", function() {test("basic before filter", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filter({before: {hello: function(request) {return request.withKey(`before-${Caf.toString(request.key)}`);}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, before-George."));}); test("multiple before filters in one declaration", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filter({before: {hello: function(request) {return request.withKey(`before1-${Caf.toString(request.key)}`);}}}, {before: {hello: function(request) {return request.withKey(`before2-${Caf.toString(request.key)}`);}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, before2-before1-George."));}); test("multiple before filters in separate declarations", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filter({before: {hello: function(request) {return request.withKey(`before1-${Caf.toString(request.key)}`);}}}); this.filter({before: {hello: function(request) {return request.withKey(`before2-${Caf.toString(request.key)}`);}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, before2-before1-George."));}); test("basic before all", () => {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}, goodbye: function({key}) {return `Goodbye, ${Caf.toString(key)}.`;}}); this.filters({before: {all: function(request) {return request.withKey(`before-${Caf.toString(request.key)}`);}}});})); return myPipeline.hello("George").then((result) => assert.eq(result, "Hello, before-George.")).then(() => myPipeline.goodbye("George")).then((result) => assert.eq(result, "Goodbye, before-George."));}); return test("basic after filter", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filter({after: {hello: function(response) {return response.withData(`${Caf.toString(response.data)}-after`);}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, George.-after"));});}); return describe("all beforeFilter response Types", function() {test("request", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return request.withKey("demon");}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, demon."));}); test("response", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return request.success({data: "whatever"});}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "whatever"));}); test("undefined", () => {let MyPipeline; return (MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {}}});})).myPipeline.hello("George").then((result) => assert.eq(result, "Hello, George."));}); test("null", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return null;}}});}); return assert.missing(MyPipeline.myPipeline.hello("George"));}); test("string", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return "bob";}}});}); return MyPipeline.myPipeline.hello("George").then((result) => assert.eq(result, "bob"));}); test("object", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return {name: "bob"};}}});}); return MyPipeline.myPipeline.hello("George").then((result) => assert.eq(result, {name: "bob"}));}); return test("invalid response", () => {let MyPipeline; MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {}, function(MyPipeline, classSuper, instanceSuper) {this.handlers({hello: function({key}) {return `Hello, ${Caf.toString(key)}.`;}}); this.filters({before: {hello: function(request) {return MyPipeline;}}});}); return assert.rejects(MyPipeline.myPipeline.hello("George")).then((error) => assert.eq(error.status, failure));});});});});
//# sourceMappingURL=Filter.test.js.map
