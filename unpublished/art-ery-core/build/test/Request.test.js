"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Pipeline", "assert", "Request", "formattedInspect"], [global, require('./StandardImport')], (test, Pipeline, assert, Request, formattedInspect) => {test("createRequest", function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); return assert.instanceof(Request, myPipeline.createRequest("foo"));}); test("formattedInspect", function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); return formattedInspect(myPipeline.createRequest("foo"));}); test("createRequest with key", function() {let myPipeline, MyPipeline, request; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); request = myPipeline.createRequest("foo", {key: "bar"}); assert.eq(request.type, "foo"); assert.eq(request.key, "bar"); return assert.eq(request.props, {key: "bar"});}); test("createRequest with data", function() {let myPipeline, MyPipeline, request; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); request = myPipeline.createRequest("foo", {data: "bar"}); assert.eq(request.type, "foo"); assert.eq(request.props, {data: "bar"}); return assert.eq(request.data, "bar");}); test("create success response", function() {let myPipeline, MyPipeline, request; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); request = myPipeline.createRequest("foo"); return request.success("bar").then((response) => {assert.instanceof(Request, response); assert.true(response.isResponse); return assert.true(response.isSuccessful);});}); return test("withKey", function() {let myPipeline, MyPipeline; ({myPipeline} = MyPipeline = Caf.defClass(class MyPipeline extends Pipeline {})); return assert.eq(myPipeline.createRequest("foo", {key: "baz"}).withKey("bar").key, "bar");});});});
//# sourceMappingURL=Request.test.js.map
