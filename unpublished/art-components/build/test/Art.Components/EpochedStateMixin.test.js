"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "EpochedStateMixin", "BaseClass", "assert"], [global, require('./StandardImport')], (describe, test, EpochedStateMixin, BaseClass, assert) => {return describe({EpochedState: function() {test("setState", () => {let MyEpochedState, myEpochedState; MyEpochedState = Caf.defClass(class MyEpochedState extends EpochedStateMixin(BaseClass) {constructor() {super(...arguments); this._instantiateState();};}); myEpochedState = new MyEpochedState; assert.doesNotExist(myEpochedState.state.foo); myEpochedState.setState({foo: 123}); assert.doesNotExist(myEpochedState.state.foo); return myEpochedState.onNextReady(() => assert.selectedEq({foo: 123}, myEpochedState.state));}); return test("setState before instantiate", () => {let MyEpochedState, myEpochedState; MyEpochedState = Caf.defClass(class MyEpochedState extends EpochedStateMixin(BaseClass) {}); myEpochedState = new MyEpochedState; assert.doesNotExist(myEpochedState.state.foo); myEpochedState.setState({foo: 123}); assert.selectedEq({foo: 123}, myEpochedState.state); myEpochedState._instantiateState(); return myEpochedState.onNextReady(() => assert.selectedEq({foo: 123}, myEpochedState.state));});}});});});
//# sourceMappingURL=EpochedStateMixin.test.js.map
