"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Component", "assert", "TestElement"], [global, require('../StandardImport')], (test, Component, assert, TestElement) => {test("_updateFrom basic", function() {let MyComponent1, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); (a = MyComponent1({name: "foo"}))._instantiate(); b = MyComponent1({name: "bar"}); a._updateFrom(b); return assert.eq(a.props.name, "bar");}); test("_updateFrom add component", function() {let MyComponent1, MyWrapperComponent, c; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({key: this.props.key});};}); MyWrapperComponent = Caf.defClass(class MyWrapperComponent extends Component {}, function(MyWrapperComponent, classSuper, instanceSuper) {this.stateFields({added: false}); this.prototype.render = function() {return TestElement({key: "root"}, TestElement({key: "child1"}), this.added ? MyComponent1({key: "child2"}) : undefined, TestElement({key: "child3"}));};}); return (c = MyWrapperComponent())._instantiate().onNextReady().then(() => {c.added = true; return c.onNextReady();}).then(() => {assert.isArray(c.refs.root.element.children); assert.eq(["child1", "child2", "child3"], Caf.array(c.refs.root.children, (child) => child.props.key)); return assert.eq(["child1", "child2", "child3"], Caf.array(c.refs.root.element.children, (child) => child.props.key));});}); test("_updateFrom add component 2", function() {let MyComponent1, MyWrapperComponent, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({key: this.props.key});};}); MyWrapperComponent = Caf.defClass(class MyWrapperComponent extends Component {}, function(MyWrapperComponent, classSuper, instanceSuper) {this.propFields("includeChild2"); this.prototype.render = function() {return TestElement({key: "root"}, TestElement({key: "child1"}), this.includeChild2 ? MyComponent1({key: "child2"}) : undefined, TestElement({key: "child3"}));};}); (a = MyWrapperComponent({includeChild2: false}))._instantiate(); b = MyWrapperComponent({includeChild2: true}); a._updateFrom(b); return a.onNextReady().then(() => {assert.eq(["child1", "child2", "child3"], Caf.array(a.refs.root.children, (child) => child.props.key)); return assert.eq(["child1", "child2", "child3"], Caf.array(a.refs.root.element.children, (child) => child.props.key));});}); return test("_updateFrom remove component", function() {let MyComponent1, MyWrapperComponent, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({key: this.props.key});};}); MyWrapperComponent = Caf.defClass(class MyWrapperComponent extends Component {}, function(MyWrapperComponent, classSuper, instanceSuper) {this.propFields("includeChild2"); this.prototype.render = function() {return TestElement({key: "root"}, TestElement({key: "child1"}), this.includeChild2 ? MyComponent1({key: "child2"}) : undefined, TestElement({key: "child3"}));};}); (a = MyWrapperComponent({includeChild2: true}))._instantiate(); b = MyWrapperComponent({includeChild2: false}); a._updateFrom(b); return a.onNextReady(() => {assert.eq(["child1", "child3"], Caf.array(a.refs.root.children, (child) => child.props.key)); return assert.eq(["child1", "child3"], Caf.array(a.refs.root.element.children, (child) => child.props.key));});});});});
//# sourceMappingURL=UpdateFrom.test.js.map
