"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Component", "assert", "TestElement"], [global, require('../StandardImport')], (describe, test, Component, assert, TestElement) => {return describe({basic: function() {test("simplest", () => {let MyComponent; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); return assert.eq(MyComponent({name: "foo"})._instantiate().inspectedObjects, {MyComponent: {props: {name: "foo"}, rendered: {TestElement: {props: {name: "foo"}}}}});}); test("nested VirtualElements", () => {let MyComponent; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name}, TestElement({name: this.props.name + "1"}), TestElement({name: this.props.name + "2"}));};}); return assert.eq(MyComponent({name: "foo"})._instantiate().inspectedObjects, {MyComponent: {props: {name: "foo"}, rendered: {TestElement: {props: {name: "foo"}, children: [{TestElement: {props: {name: "foo1"}}}, {TestElement: {props: {name: "foo2"}}}]}}}});}); test("nested Components", () => {let SubComponent, MyComponent; SubComponent = Caf.defClass(class SubComponent extends Component {}, function(SubComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name}, SubComponent({name: this.props.name + "Sub"}));};}); return assert.eq(MyComponent({name: "foo"})._instantiate().inspectedObjects, {MyComponent: {props: {name: "foo"}, rendered: {TestElement: {props: {name: "foo"}, children: [{SubComponent: {props: {name: "fooSub"}, rendered: {TestElement: {props: {name: "fooSub"}}}}}]}}}});}); return test("directly nested Components", () => {let SubComponent, MyComponent; SubComponent = Caf.defClass(class SubComponent extends Component {}, function(SubComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return SubComponent({name: this.props.name + "Sub"});};}); return assert.eq(MyComponent({name: "foo"})._instantiate().inspectedObjects, {MyComponent: {props: {name: "foo"}, rendered: {SubComponent: {props: {name: "fooSub"}, rendered: {TestElement: {props: {name: "fooSub"}}}}}}});});}});});});
//# sourceMappingURL=Basics.test.js.map
