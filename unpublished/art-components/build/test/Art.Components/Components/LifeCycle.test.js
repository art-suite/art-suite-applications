"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Promise", "Component", "mountRootComponent", "assert", "TestElement", "TestSpecializationElement", "merge"], [global, require('../StandardImport')], (describe, test, Promise, Component, mountRootComponent, assert, TestElement, TestSpecializationElement, merge) => {return describe({mounting: function() {test("componentWillMount", () => new Promise((resolve) => {let rendered, componentWillMounted, MyComponent; rendered = false; componentWillMounted = false; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.componentWillMount = function() {componentWillMounted = true; return assert.eq(rendered, false);}; this.prototype.render = function() {assert.eq(componentWillMounted, true, "componentWillMounted should be true at this point"); rendered = true; resolve(); return TestElement({name: "child"});};}); return mountRootComponent(MyComponent());})); return test("componentWillUnmount nested inside VirtualTestElement", () => new Promise((resolve) => {let rendered, altRendered, componentWillMounted, componentWillUnmounted, WrapperComponent, MyComponent, wc; rendered = false; altRendered = false; componentWillMounted = false; componentWillUnmounted = false; WrapperComponent = Caf.defClass(class WrapperComponent extends Component {}, function(WrapperComponent, classSuper, instanceSuper) {this.stateFields({includeComponent: true}); this.prototype.render = function() {return TestElement({name: "wrapper"}, this.state.includeComponent ? MyComponent() : (assert.eq(rendered, true, "rendered should be true at this point"), assert.eq(componentWillMounted, true, "componentWillMounted should be true at this point"), assert.eq(componentWillUnmounted, false, "componentWillUnmounted should be false at this point"), altRendered = true, TestElement({name: "stub"})));};}); MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.componentWillMount = function() {assert.eq(componentWillUnmounted, false, "componentWillUnmounted should be false at this point"); assert.eq(rendered, false, "rendered should be false at this point"); return componentWillMounted = true;}; this.prototype.componentWillUnmount = function() {assert.eq(rendered, true, "rendered should be true at this point"); assert.eq(componentWillMounted, true, "componentWillMounted should be true at this point"); assert.eq(altRendered, true, "altRendered should be true at this point"); componentWillUnmounted = true; return resolve();}; this.prototype.render = function() {assert.eq(componentWillMounted, true, "componentWillMounted should be true at this point"); assert.eq(componentWillUnmounted, false, "componentWillUnmounted should be false at this point"); rendered = true; return TestElement({name: "child"});};}); return (wc = mountRootComponent(WrapperComponent())).onNextReady(() => {wc.setState({includeComponent: false}); return wc.onNextReady();});}));}, preprocessProps: function() {test("instantiate with preprocessProps", () => {let MyComponent, c; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.preprocessProps = function(props) {return {name: `Hi ${Caf.toString(props.name || "John Doe")}!`};}; this.prototype.render = function() {return TestElement({name: this.props.name});};}); c = MyComponent({name: "Sally"}); c._instantiate(); assert.instanceof(TestSpecializationElement, c.element); return assert.eq(c.element.props.name, "Hi Sally!");}); return test("_updateFrom with preprocessProps", () => {let MyComponent1, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.preprocessProps = function(props) {return {name: `Hi ${Caf.toString(props.name || "John Doe")}!`};}; this.prototype.render = function() {return TestElement({name: this.props.name});};}); (a = MyComponent1({name: "foo"}))._instantiate(); b = MyComponent1({name: "bar"}); a._updateFrom(b); return assert.eq(a.props.name, "Hi bar!");});}, preprocessState: function() {test("instantiate with preprocessState", () => new Promise((resolve) => {let MyComponent, c; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.preprocessState = function(state) {return merge(state, {greeting: `Hi ${Caf.toString(this.props.name)}!`});}; this.prototype.render = function() {assert.eq(this.state.greeting, "Hi Sally!"); resolve(); return TestElement();};}); c = MyComponent({name: "Sally"}); return c._instantiate();})); test("preprocessState after preprocessProps", () => new Promise((resolve) => {let MyComponent, c; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.preprocessProps = function(props) {this.setState({name: props.name}); return props;}; this.prototype.preprocessState = function(state) {assert.neq(state.name, this.state.name); return merge(state, {greeting: `Hi ${Caf.toString(state.name)}!`});}; this.prototype.render = function() {assert.eq(this.state.greeting, "Hi Sally!"); resolve(); return TestElement();};}); c = MyComponent({name: "Sally"}); return c._instantiate();})); return test("_updateFrom with preprocessState", () => new Promise((resolve) => {let MyComponent, c1; MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.stateFields({initialName: null}); this.prototype.preprocessProps = function(props) {let temp; ((temp = this.initialName) != null ? temp : this.initialName = props.name); return props;}; this.prototype.preprocessState = function(state) {return merge(state, {greeting: `Hi ${Caf.toString(this.props.name)}!`});}; this.prototype.render = function() {assert.eq(this.state.greeting, `Hi ${Caf.toString(this.props.name)}!`); if (this.state.greeting === "Hi John!" && this.state.initialName === "Sally") {resolve();}; return TestElement();};}); return (c1 = MyComponent({name: "Sally"}))._instantiate().onNextReady(() => c1._updateFrom(MyComponent({name: "John"})));}));}});});});
//# sourceMappingURL=LifeCycle.test.js.map
