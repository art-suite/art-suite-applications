"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Component", "assert", "TestElement"], [global, require('../StandardImport')], (describe, test, Component, assert, TestElement) => {return describe({"can-update-from": function() {test("_canUpdateFrom matching Component-classes == true", () => {let MyComponent1, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); a = MyComponent1({name: "foo"}); b = MyComponent1({name: "bar"}); return assert.eq(true, a._canUpdateFrom(b));}); test("_canUpdateFrom missmatched Component-classes == false", () => {let MyComponent1, MyComponent2, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); MyComponent2 = Caf.defClass(class MyComponent2 extends Component {}, function(MyComponent2, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: this.props.name});};}); a = MyComponent1({name: "foo"}); b = MyComponent2({name: "bar"}); return assert.eq(false, a._canUpdateFrom(b));}); test("_canUpdateFrom matching Component-classes == false", () => {let MyComponent1, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: "baz"});};}); a = MyComponent1({key: "foo"}); b = MyComponent1({key: "bar"}); return assert.eq(false, a._canUpdateFrom(b));}); return test("_canUpdateFrom Component and VirtualElement-classes == false", () => {let MyComponent1, a, b; MyComponent1 = Caf.defClass(class MyComponent1 extends Component {}, function(MyComponent1, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement({name: "baz"});};}); a = MyComponent1({key: "foo"}); b = TestElement({}); assert.eq(false, a._canUpdateFrom(b)); return assert.eq(false, b._canUpdateFrom(a));});}});});});
//# sourceMappingURL=CanUpdateFrom.test.js.map
