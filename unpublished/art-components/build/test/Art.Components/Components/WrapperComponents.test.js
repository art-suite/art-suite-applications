"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "chainedTest", "Component", "TestElement", "TestTextElement", "assert", "log"], [global, require('../StandardImport')], (describe, chainedTest, Component, TestElement, TestTextElement, assert, log) => {return describe({virtualElementChildren: function() {return chainedTest("virtual-element children", () => {let MyWrapper, MyComponent, myComponent; MyWrapper = Caf.defClass(class MyWrapper extends Component {}, function(MyWrapper, classSuper, instanceSuper) {this.stateFields({text: "foo"}); this.prototype.render = function() {return TestElement({key: "componentWrapper"}, TestTextElement({text: this.text}), this.props.children);};}); MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return MyWrapper(TestElement({key: "normalWrapper"}, TestElement({key: "innerMost"})));};}); return (myComponent = MyComponent())._instantiate().onNextReady().then(() => myComponent);}).tapTest(["firstRender", (myComponent) => {let tt; assert.eq(myComponent.findElements("innerMost").length, 1); assert.eq(myComponent.findElements("innerMost")[0].renderedIn, myComponent.find("MyWrapper")[0]); tt = myComponent.findElements("innerMost")[0]; return myComponent.onNextReady();}], ["secondRender", (myComponent) => assert.eq(myComponent.findElements("innerMost").length, 1)]);}, directComponentChildren: function() {return chainedTest("direct component children", () => {let MySimpleComponent, MyWrapper, MyComponent, myComponent; MySimpleComponent = Caf.defClass(class MySimpleComponent extends Component {}, function(MySimpleComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement();};}); MyWrapper = Caf.defClass(class MyWrapper extends Component {}, function(MyWrapper, classSuper, instanceSuper) {this.stateFields({text: "foo"}); this.prototype.render = function() {return TestElement({key: "componentWrapper"}, TestTextElement({text: this.text}), this.props.children);};}); MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return MyWrapper(MySimpleComponent());};}); return (myComponent = MyComponent())._instantiate().onNextReady().then(() => myComponent);}).tapTest(["firstRender", (myComponent) => {assert.eq(myComponent.find("MySimpleComponent").length, 1); myComponent._virtualSubtree.setText("bar"); return myComponent.onNextReady();}], ["secondRender", (myComponent) => assert.eq(myComponent.find("MySimpleComponent").length, 1)]);}, indirectComponentChildren: function() {return chainedTest("indirect component children", () => {let MySimpleComponent, MyWrapper, MyComponent; MySimpleComponent = Caf.defClass(class MySimpleComponent extends Component {}, function(MySimpleComponent, classSuper, instanceSuper) {this.prototype.render = function() {return TestElement();};}); MyWrapper = Caf.defClass(class MyWrapper extends Component {}, function(MyWrapper, classSuper, instanceSuper) {this.stateFields({text: "foo"}); this.prototype.render = function() {return TestElement({key: "componentWrapper"}, TestTextElement({text: this.text}), this.props.children);};}); return MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return MyWrapper(TestElement(MySimpleComponent()));};});}).thenTest("_instantiate and firstRender", (MyComponent) => {let myComponent; return (myComponent = MyComponent())._instantiate().onNextReady().then(() => myComponent);}).tapTest("secondRender", (myComponent) => {assert.eq(myComponent.find("MySimpleComponent").length, 1); myComponent._virtualSubtree.setText("bar"); return myComponent.onNextReady();}, "thirdRender", (myComponent) => assert.eq(myComponent.find("MySimpleComponent").length, 1));}, virtualElementsPassedAsProps: function() {return chainedTest(() => {let MyWrapper, MyComponent; MyWrapper = Caf.defClass(class MyWrapper extends Component {}, function(MyWrapper, classSuper, instanceSuper) {this.stateFields({numElements: 1}); this.prototype.render = function() {let into, to, i1, by; return TestElement({key: "componentWrapper"}, this.props.first, (into = [], to = this.numElements, i1 = 0, by = (i1 < to) ? 1 : -1, (() => {while (by > 0 && i1 < to || by < 0 && i1 > to) {let i; i = i1; into.push(TestElement({key: i})); i1 += by;};})(), into), this.props.last);};}); return MyComponent = Caf.defClass(class MyComponent extends Component {}, function(MyComponent, classSuper, instanceSuper) {this.prototype.render = function() {return MyWrapper({first: TestElement({key: "firstElementKey"}), last: TestElement({key: "secondElementKey"})});};});}).thenTest("_instantiate and firstRender", (MyComponent) => {let myComponent; return (myComponent = MyComponent())._instantiate().onNextReady().then(() => myComponent);}).tapTest("secondRender", (myComponent) => {log("secondRender..."); assert.eq(myComponent.findElements("firstElementKey").length, 1); myComponent._virtualSubtree.setNumElements(2); return myComponent.onNextReady();});}});});});
//# sourceMappingURL=WrapperComponents.test.js.map
