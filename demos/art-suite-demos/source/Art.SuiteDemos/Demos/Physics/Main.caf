import &ArtSuite

animateLocationWithPhysics = ({toValue, element:{currentLocation}, frameSeconds, state, options}) ->
  targetLocation  = toValue.layout()
  velocity        = state.velocity || point()

  currentToTargetVector = targetLocation.sub currentLocation

  springConstant   = if options.spring?   then options.spring   else 100
  frictionConstant = if options.friction? then options.friction else 10

  frictionAcceleration  = velocity.mul              -frictionConstant
  springAcceleration    = currentToTargetVector.mul springConstant
  acceleration          = springAcceleration.add    frictionAcceleration

  if 0 < gravityConstant = options.gravity ? 0
    gravityConstant = options.gravity ? 0
    distanceSquared = currentToTargetVector.magnitudeSquared
    distanceSquared = 1 if distanceSquared < 1
    acceleration    = acceleration.add gravityAcceleration

    gravityAcceleration =
      if distanceSquared > 0
        currentToTargetVector
        .mul 1 / distanceSquared
        .mul gravityConstant

      else point()

  state.velocity = velocity = velocity.add acceleration.mul frameSeconds
  currentLocation.add velocity.mul frameSeconds

class MyComponent extends Component

  @stateFields location: ps: .5

  updateLocation: ({location}) -> @location = location

  render: ->
    @state extract location

    Element
      on: mouseMove: @updateLocation

      RectangleElement color: :white

      RectangleElement
        size:     50
        radius:   50
        axis:     .5
        location: location
        color:    :orange
        animators: location:
          animate:  animateLocationWithPhysics
          spring:   200
