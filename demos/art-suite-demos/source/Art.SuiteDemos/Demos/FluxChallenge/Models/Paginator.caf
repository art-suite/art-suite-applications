import &StandardImport

class Paginator extends FluxSubscriptionsMixin ApplicationState
  slotsPerPage = 5
  @stateFields
    slotIds:                  []
    loadedSlots:              [] null null null null null
    pageUpEnabled:            false
    pageDownEnabled:          false

  constructor: ->
    @onModelRegistered :darkJedi
    .then -> @_updateSlots [] 3616 null null null null

  pageUp:   -> @pageUpEnabled   && @_updateSlots flatten null null @slotIds.slice 0 slotsPerPage - 2
  pageDown: -> @pageDownEnabled && @_updateSlots flatten (@slotIds.slice 2 slotsPerPage), null null

  ###############
  # PRIVATE
  ###############
  _updateSlots: (slotIds)->
    loadedSlots = @_getLoadedSlots slotIds ?= @slotIds
    @slotIds = slotIds = array slotId, index from slotIds
      slotId
      ? loadedSlots[index - 1]?.apprentice
      ? loadedSlots[index + 1]?.master

    @_updateSubscriptions slotIds
    @_updatePageUpDownEnabled @loadedSlots = @_getLoadedSlots slotIds

  _getLoadedSlots: (slotIds) ->
    array key, index in slotIds
      @models.darkJedi.getModelRecord(key)?.data if key?

  _updateSubscriptions: (slotIds) ->
    @unsubscribeAll()
    each key, index in slotIds when key?
      @subscribe {}
        subscriptionKey:  "" darkJedi-#{} key
        modelName:        :darkJedi
        key
        updatesCallback:  ({data:darkJedi}) -> darkJedi && @_updateSlots()

  _updatePageUpDownEnabled: (loadedSlots)->
    first = last = null
    each v in loadedSlots when v?
      first ?= v
      last   = v

    middle = !!loadedSlots[slotsPerPage / 2 | 0]
    @pageUpEnabled   = middle && !!first?.master?
    @pageDownEnabled = middle && !!last?.apprentice?
